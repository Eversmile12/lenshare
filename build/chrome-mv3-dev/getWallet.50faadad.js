// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"hVMLY":[function(require,module,exports) {
var c = typeof globalThis.process < "u" ? globalThis.process.argv : [];
var g = ()=>typeof globalThis.process < "u" ? globalThis.process.env : {};
var M = new Set(c), m = (e)=>M.has(e), j = c.filter((e)=>e.startsWith("--") && e.includes("=")).map((e)=>e.split("=")).reduce((e, [t, s])=>(e[t] = s, e), {});
var F = m("--dry-run"), l = ()=>m("--verbose") || g().VERBOSE === "true", V = l();
var p = (e = "", ...t)=>console.log(e.padEnd(9), "|", ...t);
var f = (...e)=>console.error("\uD83D\uDD34 ERROR".padEnd(9), "|", ...e), h = (...e)=>p("\uD83D\uDD35 INFO", ...e), d = (...e)=>p("\uD83D\uDFE0 WARN", ...e), T = 0, i = (...e)=>l() && p(`\u{1F7E1} ${T++}`, ...e);
var o = {
    "isContentScript": true,
    "isBackground": false,
    "isReact": false,
    "runtimes": [
        "script-runtime"
    ],
    "host": "localhost",
    "port": 1815,
    "entryFilePath": "/Users/vittoriorivabella/projects/lens-cross-post/lenshare/contents/getWallet.ts",
    "bundleId": "faac775d50faadad",
    "envHash": "210281caf8d4160d",
    "verbose": "false",
    "secure": false,
    "serverPort": 50697
};
module.bundle.HMR_BUNDLE_ID = o.bundleId;
globalThis.process = {
    argv: [],
    env: {
        VERBOSE: o.verbose
    }
};
var R = module.bundle.Module;
function w(e) {
    R.call(this, e), this.hot = {
        data: module.bundle.hotData[e],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(t) {
            this._acceptCallbacks.push(t || function() {});
        },
        dispose: function(t) {
            this._disposeCallbacks.push(t);
        }
    }, module.bundle.hotData[e] = void 0;
}
module.bundle.Module = w;
module.bundle.hotData = {};
var J = globalThis.chrome || globalThis.browser || null;
function y() {
    return !o.host || o.host === "0.0.0.0" ? location.protocol.indexOf("http") === 0 ? location.hostname : "localhost" : o.host;
}
function _() {
    return o.port || location.port;
}
function v(e, t) {
    let { modules: s  } = e;
    return s ? !!s[t] : !1;
}
function D(e = _()) {
    let t = y();
    return `${o.secure || location.protocol === "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(t) ? "wss" : "ws"}://${t}:${e}/`;
}
function P(e) {
    typeof e.message == "string" && f("[plasmo/parcel-runtime]: " + e.message);
}
function b(e) {
    if (typeof globalThis.WebSocket > "u") return;
    let t = new WebSocket(D());
    return t.addEventListener("message", async function(s) {
        let r = JSON.parse(s.data);
        if (r.type === "update" && await e(r.assets), r.type === "error") for (let a of r.diagnostics.ansi){
            let A = a.codeframe || a.stack;
            d("[plasmo/parcel-runtime]: " + a.message + `
` + A + `

` + a.hints.join(`
`));
        }
    }), t.addEventListener("error", P), t.addEventListener("open", ()=>{
        h(`[plasmo/parcel-runtime]: Connected to HMR server for ${o.entryFilePath}`);
    }), t.addEventListener("close", ()=>{
        d(`[plasmo/parcel-runtime]: Connection to the HMR server is closed for ${o.entryFilePath}`);
    }), t;
}
var x = "__plasmo-loading__";
function H(e) {
    document.documentElement ? document.documentElement.appendChild(e) : globalThis.addEventListener("DOMContentLoaded", ()=>{
        document.documentElement.appendChild(e);
    });
}
function S() {
    let e = document.createElement("div");
    return e.id = x, e.innerHTML = `
  <style>
    /***************************************************
     * Generated by SVG Artista on 2/8/2023, 4:53:34PM
     * MIT license (https://opensource.org/licenses/MIT)
     * W. https://svgartista.net
     **************************************************/
    
    @keyframes animate-svg-fill {
      0% {
        fill: transparent;
      }
    
      100% {
        fill: #333;
      }
    }
    
    .svg-elem-1 {
      animation: animate-svg-fill 1.47s cubic-bezier(0.47, 0, 0.745, 0.715) 0.8s both infinite;
    }

    .svg-elem-2 {
      animation: animate-svg-fill 1.47s cubic-bezier(0.47, 0, 0.745, 0.715) 0.9s both infinite;
    }
    
    .svg-elem-3 {
      animation: animate-svg-fill 1.47s cubic-bezier(0.47, 0, 0.745, 0.715) 1s both infinite;
    }

    .hidden {
      display: none;
    }

  </style>
  <svg height="32" width="32" viewBox="0 0 264 354" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M139.221 282.243C154.252 282.243 166.903 294.849 161.338 308.812C159.489 313.454 157.15 317.913 154.347 322.109C146.464 333.909 135.26 343.107 122.151 348.538C109.043 353.969 94.6182 355.39 80.7022 352.621C66.7861 349.852 54.0034 343.018 43.9705 332.983C33.9375 322.947 27.105 310.162 24.3369 296.242C21.5689 282.323 22.9895 267.895 28.4193 254.783C33.8491 241.671 43.0441 230.464 54.8416 222.579C59.0353 219.777 63.4908 217.438 68.1295 215.588C82.0915 210.021 94.6978 222.671 94.6978 237.703L94.6978 255.027C94.6978 270.058 106.883 282.243 121.914 282.243H139.221Z" fill="#333" class="svg-elem-1" ></path>
    <path d="M192.261 142.028C192.261 126.996 204.867 114.346 218.829 119.913C223.468 121.763 227.923 124.102 232.117 126.904C243.915 134.789 253.11 145.996 258.539 159.108C263.969 172.22 265.39 186.648 262.622 200.567C259.854 214.487 253.021 227.272 242.988 237.308C232.955 247.343 220.173 254.177 206.256 256.946C192.34 259.715 177.916 258.294 164.807 252.863C151.699 247.432 140.495 238.234 132.612 226.434C129.808 222.238 127.47 217.779 125.62 213.137C120.056 199.174 132.707 186.568 147.738 186.568L165.044 186.568C180.076 186.568 192.261 174.383 192.261 159.352L192.261 142.028Z" fill="#333" class="svg-elem-2" ></path>
    <path d="M95.6522 164.135C95.6522 179.167 83.2279 191.725 68.8013 187.505C59.5145 184.788 50.6432 180.663 42.5106 175.227C26.7806 164.714 14.5206 149.772 7.28089 132.289C0.041183 114.807 -1.85305 95.5697 1.83772 77.0104C5.52849 58.4511 14.6385 41.4033 28.0157 28.0228C41.393 14.6423 58.4366 5.53006 76.9914 1.83839C95.5461 -1.85329 114.779 0.0414162 132.257 7.2829C149.735 14.5244 164.674 26.7874 175.184 42.5212C180.62 50.6576 184.744 59.5332 187.46 68.8245C191.678 83.2519 179.119 95.6759 164.088 95.6759L122.869 95.6759C107.837 95.6759 95.6522 107.861 95.6522 122.892L95.6522 164.135Z" fill="#333" class="svg-elem-3"></path>
  </svg>
  <span class="hidden">Context Invalidated, Press to Reload</span>
  `, e.style.pointerEvents = "none", e.style.position = "fixed", e.style.bottom = "14.7px", e.style.right = "14.7px", e.style.display = "flex", e.style.justifyContent = "center", e.style.alignItems = "center", e.style.padding = "14.7px", e.style.gap = "14.7px", e.style.borderRadius = "4.7px", e.style.border = "1px solid #333", e.style.background = "#f3f3f3", e.style.zIndex = "2147483647", e.style.opacity = "0", e.style.transition = "opacity 0.47s ease-in-out", e.style.boxShadow = "#333 4.7px 4.7px", H(e), e;
}
var C = ()=>{
    let e = document.getElementById(x) || S();
    return {
        element: e,
        show: ({ reloadButton: t = !1  } = {})=>{
            e.style.opacity = "1", t && (e.onclick = (s)=>{
                s.stopPropagation(), globalThis.location.reload();
            }, e.querySelector("span").classList.remove("hidden"), e.style.cursor = "pointer", e.style.pointerEvents = "all");
        },
        hide: ()=>{
            e.style.opacity = "0";
        }
    };
};
var I = `__plasmo_runtime_script_${module.id}__`, n, L = !1, k = C();
async function u() {
    i("Script Runtime - reloading"), L ? globalThis.location?.reload?.() : k.show({
        reloadButton: !0
    });
}
function E() {
    n?.disconnect(), n = chrome.runtime.connect({
        name: I
    }), n.onDisconnect.addListener(()=>{
        u();
    }), n.onMessage.addListener((e)=>{
        e.__plasmo_cs_reload__ && u(), e.__plasmo_cs_active_tab__ && (L = !0);
    });
}
function B() {
    if (chrome?.runtime) try {
        E(), setInterval(E, 24e4);
    } catch  {
        return;
    }
}
B();
b(async (e)=>{
    i("Script runtime - on updated assets"), e.filter((s)=>s.envHash === o.envHash).some((s)=>v(module.bundle, s.id)) && (k.show(), chrome.runtime ? n.postMessage({
        __plasmo_cs_changed__: !0
    }) : setTimeout(()=>{
        u();
    }, 4700));
});

},{}],"7HnuW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config);
var _viem = require("viem");
const config = {
    matches: [
        "<all_urls>"
    ],
    all_frames: true,
    world: "MAIN"
};
window.addEventListener("load", async ()=>{
    const walletClient = (0, _viem.createWalletClient)({
        transport: (0, _viem.custom)(window.ethereum)
    });
    let address;
    while(!address || !address.length)address = await walletClient.getAddresses();
    console.log(address);
});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b","viem":"1nwrH"}],"cfP7b":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1nwrH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbiConstructorNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiConstructorNotFoundError));
parcelHelpers.export(exports, "AbiConstructorParamsNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiConstructorParamsNotFoundError));
parcelHelpers.export(exports, "AbiDecodingDataSizeInvalidError", ()=>(0, _chunkKWPP37TEMjs.AbiDecodingDataSizeInvalidError));
parcelHelpers.export(exports, "AbiDecodingZeroDataError", ()=>(0, _chunkKWPP37TEMjs.AbiDecodingZeroDataError));
parcelHelpers.export(exports, "AbiEncodingArrayLengthMismatchError", ()=>(0, _chunkKWPP37TEMjs.AbiEncodingArrayLengthMismatchError));
parcelHelpers.export(exports, "AbiEncodingLengthMismatchError", ()=>(0, _chunkKWPP37TEMjs.AbiEncodingLengthMismatchError));
parcelHelpers.export(exports, "AbiErrorInputsNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiErrorInputsNotFoundError));
parcelHelpers.export(exports, "AbiErrorNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiErrorNotFoundError));
parcelHelpers.export(exports, "AbiErrorSignatureNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiErrorSignatureNotFoundError));
parcelHelpers.export(exports, "AbiEventNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiEventNotFoundError));
parcelHelpers.export(exports, "AbiEventSignatureNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiEventSignatureNotFoundError));
parcelHelpers.export(exports, "AbiFunctionNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiFunctionNotFoundError));
parcelHelpers.export(exports, "AbiFunctionOutputsNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiFunctionOutputsNotFoundError));
parcelHelpers.export(exports, "AbiFunctionSignatureNotFoundError", ()=>(0, _chunkKWPP37TEMjs.AbiFunctionSignatureNotFoundError));
parcelHelpers.export(exports, "BaseError", ()=>(0, _chunkKWPP37TEMjs.BaseError));
parcelHelpers.export(exports, "BlockNotFoundError", ()=>(0, _chunkKWPP37TEMjs.BlockNotFoundError));
parcelHelpers.export(exports, "CallExecutionError", ()=>(0, _chunkKWPP37TEMjs.CallExecutionError));
parcelHelpers.export(exports, "ChainDoesNotSupportContract", ()=>(0, _chunkKWPP37TEMjs.ChainDoesNotSupportContract));
parcelHelpers.export(exports, "ContractFunctionExecutionError", ()=>(0, _chunkKWPP37TEMjs.ContractFunctionExecutionError));
parcelHelpers.export(exports, "ContractFunctionRevertedError", ()=>(0, _chunkKWPP37TEMjs.ContractFunctionRevertedError));
parcelHelpers.export(exports, "ContractFunctionZeroDataError", ()=>(0, _chunkKWPP37TEMjs.ContractFunctionZeroDataError));
parcelHelpers.export(exports, "DataLengthTooLongError", ()=>(0, _chunkKWPP37TEMjs.DataLengthTooLongError));
parcelHelpers.export(exports, "DataLengthTooShortError", ()=>(0, _chunkKWPP37TEMjs.DataLengthTooShortError));
parcelHelpers.export(exports, "EstimateGasExecutionError", ()=>(0, _chunkKWPP37TEMjs.EstimateGasExecutionError));
parcelHelpers.export(exports, "ExecutionRevertedError", ()=>(0, _chunkKWPP37TEMjs.ExecutionRevertedError));
parcelHelpers.export(exports, "FeeCapTooHighError", ()=>(0, _chunkKWPP37TEMjs.FeeCapTooHighError));
parcelHelpers.export(exports, "FeeCapTooLowError", ()=>(0, _chunkKWPP37TEMjs.FeeCapTooLowError));
parcelHelpers.export(exports, "FilterTypeNotSupportedError", ()=>(0, _chunkKWPP37TEMjs.FilterTypeNotSupportedError));
parcelHelpers.export(exports, "HttpRequestError", ()=>(0, _chunkKWPP37TEMjs.HttpRequestError));
parcelHelpers.export(exports, "InsufficientFundsError", ()=>(0, _chunkKWPP37TEMjs.InsufficientFundsError));
parcelHelpers.export(exports, "InternalRpcError", ()=>(0, _chunkKWPP37TEMjs.InternalRpcError));
parcelHelpers.export(exports, "IntrinsicGasTooHighError", ()=>(0, _chunkKWPP37TEMjs.IntrinsicGasTooHighError));
parcelHelpers.export(exports, "IntrinsicGasTooLowError", ()=>(0, _chunkKWPP37TEMjs.IntrinsicGasTooLowError));
parcelHelpers.export(exports, "InvalidAbiDecodingTypeError", ()=>(0, _chunkKWPP37TEMjs.InvalidAbiDecodingTypeError));
parcelHelpers.export(exports, "InvalidAbiEncodingTypeError", ()=>(0, _chunkKWPP37TEMjs.InvalidAbiEncodingTypeError));
parcelHelpers.export(exports, "InvalidAddressError", ()=>(0, _chunkKWPP37TEMjs.InvalidAddressError));
parcelHelpers.export(exports, "InvalidArrayError", ()=>(0, _chunkKWPP37TEMjs.InvalidArrayError));
parcelHelpers.export(exports, "InvalidBytesBooleanError", ()=>(0, _chunkKWPP37TEMjs.InvalidBytesBooleanError));
parcelHelpers.export(exports, "InvalidDefinitionTypeError", ()=>(0, _chunkKWPP37TEMjs.InvalidDefinitionTypeError));
parcelHelpers.export(exports, "InvalidHexBooleanError", ()=>(0, _chunkKWPP37TEMjs.InvalidHexBooleanError));
parcelHelpers.export(exports, "InvalidHexValueError", ()=>(0, _chunkKWPP37TEMjs.InvalidHexValueError));
parcelHelpers.export(exports, "InvalidInputRpcError", ()=>(0, _chunkKWPP37TEMjs.InvalidInputRpcError));
parcelHelpers.export(exports, "InvalidParamsRpcError", ()=>(0, _chunkKWPP37TEMjs.InvalidParamsRpcError));
parcelHelpers.export(exports, "InvalidRequestRpcError", ()=>(0, _chunkKWPP37TEMjs.InvalidRequestRpcError));
parcelHelpers.export(exports, "JsonRpcVersionUnsupportedError", ()=>(0, _chunkKWPP37TEMjs.JsonRpcVersionUnsupportedError));
parcelHelpers.export(exports, "LimitExceededRpcError", ()=>(0, _chunkKWPP37TEMjs.LimitExceededRpcError));
parcelHelpers.export(exports, "MethodNotFoundRpcError", ()=>(0, _chunkKWPP37TEMjs.MethodNotFoundRpcError));
parcelHelpers.export(exports, "MethodNotSupportedRpcError", ()=>(0, _chunkKWPP37TEMjs.MethodNotSupportedRpcError));
parcelHelpers.export(exports, "NonceMaxValueError", ()=>(0, _chunkKWPP37TEMjs.NonceMaxValueError));
parcelHelpers.export(exports, "NonceTooHighError", ()=>(0, _chunkKWPP37TEMjs.NonceTooHighError));
parcelHelpers.export(exports, "NonceTooLowError", ()=>(0, _chunkKWPP37TEMjs.NonceTooLowError));
parcelHelpers.export(exports, "OffsetOutOfBoundsError", ()=>(0, _chunkKWPP37TEMjs.OffsetOutOfBoundsError));
parcelHelpers.export(exports, "ParseRpcError", ()=>(0, _chunkKWPP37TEMjs.ParseRpcError));
parcelHelpers.export(exports, "RawContractError", ()=>(0, _chunkKWPP37TEMjs.RawContractError));
parcelHelpers.export(exports, "RequestError", ()=>(0, _chunkKWPP37TEMjs.RequestError));
parcelHelpers.export(exports, "ResourceNotFoundRpcError", ()=>(0, _chunkKWPP37TEMjs.ResourceNotFoundRpcError));
parcelHelpers.export(exports, "ResourceUnavailableRpcError", ()=>(0, _chunkKWPP37TEMjs.ResourceUnavailableRpcError));
parcelHelpers.export(exports, "RpcError", ()=>(0, _chunkKWPP37TEMjs.RpcError));
parcelHelpers.export(exports, "RpcRequestError", ()=>(0, _chunkKWPP37TEMjs.RpcRequestError));
parcelHelpers.export(exports, "SizeExceedsPaddingSizeError", ()=>(0, _chunkKWPP37TEMjs.SizeExceedsPaddingSizeError));
parcelHelpers.export(exports, "SwitchChainError", ()=>(0, _chunkKWPP37TEMjs.SwitchChainError));
parcelHelpers.export(exports, "TimeoutError", ()=>(0, _chunkKWPP37TEMjs.TimeoutError));
parcelHelpers.export(exports, "TipAboveFeeCapError", ()=>(0, _chunkKWPP37TEMjs.TipAboveFeeCapError));
parcelHelpers.export(exports, "TransactionExecutionError", ()=>(0, _chunkKWPP37TEMjs.TransactionExecutionError));
parcelHelpers.export(exports, "TransactionNotFoundError", ()=>(0, _chunkKWPP37TEMjs.TransactionNotFoundError));
parcelHelpers.export(exports, "TransactionReceiptNotFoundError", ()=>(0, _chunkKWPP37TEMjs.TransactionReceiptNotFoundError));
parcelHelpers.export(exports, "TransactionRejectedRpcError", ()=>(0, _chunkKWPP37TEMjs.TransactionRejectedRpcError));
parcelHelpers.export(exports, "TransactionTypeNotSupportedError", ()=>(0, _chunkKWPP37TEMjs.TransactionTypeNotSupportedError));
parcelHelpers.export(exports, "UnknownNodeError", ()=>(0, _chunkKWPP37TEMjs.UnknownNodeError));
parcelHelpers.export(exports, "UnknownRpcError", ()=>(0, _chunkKWPP37TEMjs.UnknownRpcError));
parcelHelpers.export(exports, "UrlRequiredError", ()=>(0, _chunkKWPP37TEMjs.UrlRequiredError));
parcelHelpers.export(exports, "UserRejectedRequestError", ()=>(0, _chunkKWPP37TEMjs.UserRejectedRequestError));
parcelHelpers.export(exports, "WaitForTransactionReceiptTimeoutError", ()=>(0, _chunkKWPP37TEMjs.WaitForTransactionReceiptTimeoutError));
parcelHelpers.export(exports, "WebSocketRequestError", ()=>(0, _chunkKWPP37TEMjs.WebSocketRequestError));
parcelHelpers.export(exports, "boolToBytes", ()=>(0, _chunkKWPP37TEMjs.boolToBytes));
parcelHelpers.export(exports, "boolToHex", ()=>(0, _chunkKWPP37TEMjs.boolToHex));
parcelHelpers.export(exports, "bytesToBigint", ()=>(0, _chunkKWPP37TEMjs.bytesToBigint));
parcelHelpers.export(exports, "bytesToBool", ()=>(0, _chunkKWPP37TEMjs.bytesToBool));
parcelHelpers.export(exports, "bytesToHex", ()=>(0, _chunkKWPP37TEMjs.bytesToHex));
parcelHelpers.export(exports, "bytesToNumber", ()=>(0, _chunkKWPP37TEMjs.bytesToNumber));
parcelHelpers.export(exports, "bytesToString", ()=>(0, _chunkKWPP37TEMjs.bytesToString));
parcelHelpers.export(exports, "createClient", ()=>createClient);
parcelHelpers.export(exports, "createPublicClient", ()=>createPublicClient);
parcelHelpers.export(exports, "createTestClient", ()=>createTestClient);
parcelHelpers.export(exports, "createTransport", ()=>createTransport);
parcelHelpers.export(exports, "createWalletClient", ()=>createWalletClient);
parcelHelpers.export(exports, "custom", ()=>custom);
parcelHelpers.export(exports, "decodeAbiParameters", ()=>(0, _chunkKWPP37TEMjs.decodeAbiParameters));
parcelHelpers.export(exports, "decodeErrorResult", ()=>(0, _chunkKWPP37TEMjs.decodeErrorResult));
parcelHelpers.export(exports, "decodeEventLog", ()=>(0, _chunkKWPP37TEMjs.decodeEventLog));
parcelHelpers.export(exports, "decodeFunctionData", ()=>(0, _chunkKWPP37TEMjs.decodeFunctionData));
parcelHelpers.export(exports, "decodeFunctionResult", ()=>(0, _chunkKWPP37TEMjs.decodeFunctionResult));
parcelHelpers.export(exports, "defineBlock", ()=>(0, _chunkKWPP37TEMjs.defineBlock));
parcelHelpers.export(exports, "defineChain", ()=>(0, _chunkKWPP37TEMjs.defineChain));
parcelHelpers.export(exports, "defineTransaction", ()=>(0, _chunkKWPP37TEMjs.defineTransaction));
parcelHelpers.export(exports, "defineTransactionReceipt", ()=>(0, _chunkKWPP37TEMjs.defineTransactionReceipt));
parcelHelpers.export(exports, "defineTransactionRequest", ()=>(0, _chunkKWPP37TEMjs.defineTransactionRequest));
parcelHelpers.export(exports, "encodeAbiParameters", ()=>(0, _chunkKWPP37TEMjs.encodeAbiParameters));
parcelHelpers.export(exports, "encodeDeployData", ()=>(0, _chunkKWPP37TEMjs.encodeDeployData));
parcelHelpers.export(exports, "encodeErrorResult", ()=>(0, _chunkKWPP37TEMjs.encodeErrorResult));
parcelHelpers.export(exports, "encodeEventTopics", ()=>(0, _chunkKWPP37TEMjs.encodeEventTopics));
parcelHelpers.export(exports, "encodeFunctionData", ()=>(0, _chunkKWPP37TEMjs.encodeFunctionData));
parcelHelpers.export(exports, "encodeFunctionResult", ()=>(0, _chunkKWPP37TEMjs.encodeFunctionResult));
parcelHelpers.export(exports, "encodePacked", ()=>(0, _chunkKWPP37TEMjs.encodePacked));
parcelHelpers.export(exports, "etherUnits", ()=>(0, _chunkKWPP37TEMjs.etherUnits));
parcelHelpers.export(exports, "fallback", ()=>fallback);
parcelHelpers.export(exports, "formatBlock", ()=>(0, _chunkKWPP37TEMjs.formatBlock));
parcelHelpers.export(exports, "formatEther", ()=>(0, _chunkKWPP37TEMjs.formatEther));
parcelHelpers.export(exports, "formatGwei", ()=>(0, _chunkKWPP37TEMjs.formatGwei));
parcelHelpers.export(exports, "formatTransaction", ()=>(0, _chunkKWPP37TEMjs.formatTransaction));
parcelHelpers.export(exports, "formatTransactionRequest", ()=>(0, _chunkKWPP37TEMjs.formatTransactionRequest));
parcelHelpers.export(exports, "formatUnits", ()=>(0, _chunkKWPP37TEMjs.formatUnits));
parcelHelpers.export(exports, "fromBytes", ()=>(0, _chunkKWPP37TEMjs.fromBytes));
parcelHelpers.export(exports, "fromHex", ()=>(0, _chunkKWPP37TEMjs.fromHex));
parcelHelpers.export(exports, "fromRlp", ()=>(0, _chunkKWPP37TEMjs.fromRlp));
parcelHelpers.export(exports, "getAbiItem", ()=>(0, _chunkKWPP37TEMjs.getAbiItem));
parcelHelpers.export(exports, "getAccount", ()=>(0, _chunkKWPP37TEMjs.getAccount));
parcelHelpers.export(exports, "getAddress", ()=>(0, _chunkKWPP37TEMjs.getAddress));
parcelHelpers.export(exports, "getContractAddress", ()=>(0, _chunkKWPP37TEMjs.getContractAddress));
parcelHelpers.export(exports, "getContractError", ()=>(0, _chunkKWPP37TEMjs.getContractError));
parcelHelpers.export(exports, "getCreate2Address", ()=>(0, _chunkKWPP37TEMjs.getCreate2Address));
parcelHelpers.export(exports, "getCreateAddress", ()=>(0, _chunkKWPP37TEMjs.getCreateAddress));
parcelHelpers.export(exports, "getEventSelector", ()=>(0, _chunkKWPP37TEMjs.getEventSelector));
parcelHelpers.export(exports, "getFunctionSelector", ()=>(0, _chunkKWPP37TEMjs.getFunctionSelector));
parcelHelpers.export(exports, "gweiUnits", ()=>(0, _chunkKWPP37TEMjs.gweiUnits));
parcelHelpers.export(exports, "hexToBigInt", ()=>(0, _chunkKWPP37TEMjs.hexToBigInt));
parcelHelpers.export(exports, "hexToBool", ()=>(0, _chunkKWPP37TEMjs.hexToBool));
parcelHelpers.export(exports, "hexToBytes", ()=>(0, _chunkKWPP37TEMjs.hexToBytes));
parcelHelpers.export(exports, "hexToNumber", ()=>(0, _chunkKWPP37TEMjs.hexToNumber));
parcelHelpers.export(exports, "hexToString", ()=>(0, _chunkKWPP37TEMjs.hexToString));
parcelHelpers.export(exports, "http", ()=>http);
parcelHelpers.export(exports, "isAddress", ()=>(0, _chunkKWPP37TEMjs.isAddress));
parcelHelpers.export(exports, "isAddressEqual", ()=>(0, _chunkKWPP37TEMjs.isAddressEqual));
parcelHelpers.export(exports, "isBytes", ()=>(0, _chunkKWPP37TEMjs.isBytes));
parcelHelpers.export(exports, "isHex", ()=>(0, _chunkKWPP37TEMjs.isHex));
parcelHelpers.export(exports, "keccak256", ()=>(0, _chunkKWPP37TEMjs.keccak256));
parcelHelpers.export(exports, "labelhash", ()=>(0, _chunkKJWXTN6GMjs.labelhash));
parcelHelpers.export(exports, "multicall3Abi", ()=>(0, _chunkKWPP37TEMjs.multicall3Abi));
parcelHelpers.export(exports, "namehash", ()=>(0, _chunkKJWXTN6GMjs.namehash));
parcelHelpers.export(exports, "numberToBytes", ()=>(0, _chunkKWPP37TEMjs.numberToBytes));
parcelHelpers.export(exports, "numberToHex", ()=>(0, _chunkKWPP37TEMjs.numberToHex));
parcelHelpers.export(exports, "pad", ()=>(0, _chunkKWPP37TEMjs.pad));
parcelHelpers.export(exports, "padBytes", ()=>(0, _chunkKWPP37TEMjs.padBytes));
parcelHelpers.export(exports, "padHex", ()=>(0, _chunkKWPP37TEMjs.padHex));
parcelHelpers.export(exports, "parseAbi", ()=>(0, _chunkKWPP37TEMjs.parseAbi));
parcelHelpers.export(exports, "parseAbiItem", ()=>(0, _chunkKWPP37TEMjs.parseAbiItem));
parcelHelpers.export(exports, "parseAbiParameter", ()=>(0, _chunkKWPP37TEMjs.parseAbiParameter));
parcelHelpers.export(exports, "parseAbiParameters", ()=>(0, _chunkKWPP37TEMjs.parseAbiParameters));
parcelHelpers.export(exports, "parseEther", ()=>(0, _chunkKWPP37TEMjs.parseEther));
parcelHelpers.export(exports, "parseGwei", ()=>(0, _chunkKWPP37TEMjs.parseGwei));
parcelHelpers.export(exports, "parseUnits", ()=>(0, _chunkKWPP37TEMjs.parseUnits));
parcelHelpers.export(exports, "size", ()=>(0, _chunkKWPP37TEMjs.size));
parcelHelpers.export(exports, "slice", ()=>(0, _chunkKWPP37TEMjs.slice));
parcelHelpers.export(exports, "sliceBytes", ()=>(0, _chunkKWPP37TEMjs.sliceBytes));
parcelHelpers.export(exports, "sliceHex", ()=>(0, _chunkKWPP37TEMjs.sliceHex));
parcelHelpers.export(exports, "stringToBytes", ()=>(0, _chunkKWPP37TEMjs.stringToBytes));
parcelHelpers.export(exports, "stringToHex", ()=>(0, _chunkKWPP37TEMjs.stringToHex));
parcelHelpers.export(exports, "stringify", ()=>(0, _chunkKWPP37TEMjs.stringify));
parcelHelpers.export(exports, "toBytes", ()=>(0, _chunkKWPP37TEMjs.toBytes));
parcelHelpers.export(exports, "toHex", ()=>(0, _chunkKWPP37TEMjs.toHex));
parcelHelpers.export(exports, "toRlp", ()=>(0, _chunkKWPP37TEMjs.toRlp));
parcelHelpers.export(exports, "transactionType", ()=>(0, _chunkKWPP37TEMjs.transactionType));
parcelHelpers.export(exports, "trim", ()=>(0, _chunkKWPP37TEMjs.trim));
parcelHelpers.export(exports, "webSocket", ()=>webSocket);
parcelHelpers.export(exports, "weiUnits", ()=>(0, _chunkKWPP37TEMjs.weiUnits));
var _chunkKJWXTN6GMjs = require("./chunk-KJWXTN6G.mjs");
var _chunkKWPP37TEMjs = require("./chunk-KWPP37TE.mjs");
// src/clients/transports/createTransport.ts
function createTransport({ key , name , request , retryCount =3 , retryDelay =150 , timeout , type  }, value) {
    return {
        config: {
            key,
            name,
            request,
            retryCount,
            retryDelay,
            timeout,
            type
        },
        request: (0, _chunkKWPP37TEMjs.buildRequest)(request, {
            retryCount,
            retryDelay
        }),
        value
    };
}
// src/clients/transports/custom.ts
function custom(provider, config = {}) {
    const { key ="custom" , name ="Custom Provider" , retryDelay  } = config;
    return ({ retryCount: defaultRetryCount  })=>createTransport({
            key,
            name,
            request: provider.request.bind(provider),
            retryCount: config.retryCount ?? defaultRetryCount,
            retryDelay,
            type: "custom"
        });
}
// src/clients/transports/fallback.ts
function fallback(transports, config = {}) {
    const { key ="fallback" , name ="Fallback" , retryCount , retryDelay  } = config;
    return ({ chain  })=>createTransport({
            key,
            name,
            async request ({ method , params  }) {
                const fetch = async (i = 0)=>{
                    const transport = transports[i]({
                        chain,
                        retryCount: 0
                    });
                    try {
                        return await transport.request({
                            method,
                            params
                        });
                    } catch (err) {
                        if ((0, _chunkKWPP37TEMjs.isDeterministicError)(err)) throw err;
                        if (i === transports.length - 1) throw err;
                        return fetch(i + 1);
                    }
                };
                return fetch();
            },
            retryCount,
            retryDelay,
            type: "fallback"
        }, {
            transports: transports.map((fn)=>fn({
                    chain,
                    retryCount: 0
                }))
        });
}
// src/clients/transports/http.ts
function http(url, config = {}) {
    const { fetchOptions , key ="http" , name ="HTTP JSON-RPC" , retryDelay , timeout =1e4  } = config;
    return ({ chain , retryCount: defaultRetryCount  })=>{
        const retryCount = config.retryCount ?? defaultRetryCount;
        const url_ = url || chain?.rpcUrls.default.http[0];
        if (!url_) throw new (0, _chunkKWPP37TEMjs.UrlRequiredError)();
        return createTransport({
            key,
            name,
            async request ({ method , params  }) {
                const { result  } = await (0, _chunkKWPP37TEMjs.rpc).http(url_, {
                    body: {
                        method,
                        params
                    },
                    fetchOptions,
                    timeout
                });
                return result;
            },
            retryCount,
            retryDelay,
            timeout,
            type: "http"
        }, {
            url
        });
    };
}
// src/clients/transports/webSocket.ts
function webSocket(url, config = {}) {
    const { key ="webSocket" , name ="WebSocket JSON-RPC" , retryDelay , timeout =1e4  } = config;
    return ({ chain , retryCount: defaultRetryCount  })=>{
        const retryCount = config.retryCount ?? defaultRetryCount;
        const url_ = url || chain?.rpcUrls.default.webSocket?.[0];
        if (!url_) throw new (0, _chunkKWPP37TEMjs.UrlRequiredError)();
        return createTransport({
            key,
            name,
            async request ({ method , params  }) {
                const socket = await (0, _chunkKWPP37TEMjs.getSocket)(url_);
                const { result  } = await (0, _chunkKWPP37TEMjs.rpc).webSocketAsync(socket, {
                    body: {
                        method,
                        params
                    },
                    timeout
                });
                return result;
            },
            retryCount,
            retryDelay,
            timeout,
            type: "webSocket"
        }, {
            getSocket () {
                return (0, _chunkKWPP37TEMjs.getSocket)(url_);
            },
            async subscribe ({ params , onData , onError  }) {
                const socket = await (0, _chunkKWPP37TEMjs.getSocket)(url_);
                const { result: subscriptionId  } = await new Promise((resolve, reject)=>(0, _chunkKWPP37TEMjs.rpc).webSocket(socket, {
                        body: {
                            method: "eth_subscribe",
                            params
                        },
                        onData: (data)=>{
                            if (typeof data.id === "number") {
                                resolve(data);
                                return;
                            }
                            onData(data);
                        },
                        onError: (error)=>{
                            reject(error);
                            onError?.(error);
                        }
                    }));
                return {
                    subscriptionId,
                    async unsubscribe () {
                        return new Promise((resolve, reject)=>(0, _chunkKWPP37TEMjs.rpc).webSocket(socket, {
                                body: {
                                    method: "eth_unsubscribe",
                                    params: [
                                        subscriptionId
                                    ]
                                },
                                onData: resolve,
                                onError: reject
                            }));
                    }
                };
            }
        });
    };
}
// src/utils/uid.ts
var size2 = 256;
var index = size2;
var buffer;
function uid(length = 11) {
    if (!buffer || index + length > size2 * 2) {
        buffer = "";
        index = 0;
        for(let i = 0; i < size2; i++)buffer += (256 + Math.random() * 256 | 0).toString(16).substring(1);
    }
    return buffer.substring(index, index++ + length);
}
// src/clients/createClient.ts
function createClient({ chain , key ="base" , name ="Base Client" , pollingInterval =4e3 , transport , type ="base"  }) {
    const { config , request , value  } = transport({
        chain
    });
    return {
        chain,
        key,
        name,
        pollingInterval,
        request,
        transport: {
            ...config,
            ...value
        },
        type,
        uid: uid()
    };
}
// src/clients/decorators/public.ts
var publicActions = (client)=>({
        call: (args)=>(0, _chunkKWPP37TEMjs.call)(client, args),
        createBlockFilter: ()=>(0, _chunkKWPP37TEMjs.createBlockFilter)(client),
        createContractEventFilter: (args)=>(0, _chunkKWPP37TEMjs.createContractEventFilter)(client, args),
        createEventFilter: (args)=>(0, _chunkKWPP37TEMjs.createEventFilter)(client, args),
        createPendingTransactionFilter: ()=>(0, _chunkKWPP37TEMjs.createPendingTransactionFilter)(client),
        estimateContractGas: (args)=>(0, _chunkKWPP37TEMjs.estimateContractGas)(client, args),
        estimateGas: (args)=>(0, _chunkKWPP37TEMjs.estimateGas)(client, args),
        getBalance: (args)=>(0, _chunkKWPP37TEMjs.getBalance)(client, args),
        getBlock: (args)=>(0, _chunkKWPP37TEMjs.getBlock)(client, args),
        getBlockNumber: (args)=>(0, _chunkKWPP37TEMjs.getBlockNumber)(client, args),
        getBlockTransactionCount: (args)=>(0, _chunkKWPP37TEMjs.getBlockTransactionCount)(client, args),
        getBytecode: (args)=>(0, _chunkKWPP37TEMjs.getBytecode)(client, args),
        getChainId: ()=>(0, _chunkKWPP37TEMjs.getChainId)(client),
        getEnsAddress: (args)=>(0, _chunkKJWXTN6GMjs.getEnsAddress)(client, args),
        getEnsName: (args)=>(0, _chunkKJWXTN6GMjs.getEnsName)(client, args),
        getFeeHistory: (args)=>(0, _chunkKWPP37TEMjs.getFeeHistory)(client, args),
        getFilterChanges: (args)=>(0, _chunkKWPP37TEMjs.getFilterChanges)(client, args),
        getFilterLogs: (args)=>(0, _chunkKWPP37TEMjs.getFilterLogs)(client, args),
        getGasPrice: ()=>(0, _chunkKWPP37TEMjs.getGasPrice)(client),
        getLogs: (args)=>(0, _chunkKWPP37TEMjs.getLogs)(client, args),
        getStorageAt: (args)=>(0, _chunkKWPP37TEMjs.getStorageAt)(client, args),
        getTransaction: (args)=>(0, _chunkKWPP37TEMjs.getTransaction)(client, args),
        getTransactionConfirmations: (args)=>(0, _chunkKWPP37TEMjs.getTransactionConfirmations)(client, args),
        getTransactionCount: (args)=>(0, _chunkKWPP37TEMjs.getTransactionCount)(client, args),
        getTransactionReceipt: (args)=>(0, _chunkKWPP37TEMjs.getTransactionReceipt)(client, args),
        multicall: (args)=>(0, _chunkKWPP37TEMjs.multicall)(client, args),
        readContract: (args)=>(0, _chunkKWPP37TEMjs.readContract)(client, args),
        simulateContract: (args)=>(0, _chunkKWPP37TEMjs.simulateContract)(client, args),
        uninstallFilter: (args)=>(0, _chunkKWPP37TEMjs.uninstallFilter)(client, args),
        waitForTransactionReceipt: (args)=>(0, _chunkKWPP37TEMjs.waitForTransactionReceipt)(client, args),
        watchBlocks: (args)=>(0, _chunkKWPP37TEMjs.watchBlocks)(client, args),
        watchBlockNumber: (args)=>(0, _chunkKWPP37TEMjs.watchBlockNumber)(client, args),
        watchContractEvent: (args)=>(0, _chunkKWPP37TEMjs.watchContractEvent)(client, args),
        watchEvent: (args)=>(0, _chunkKWPP37TEMjs.watchEvent)(client, args),
        watchPendingTransactions: (args)=>(0, _chunkKWPP37TEMjs.watchPendingTransactions)(client, args)
    });
// src/clients/decorators/test.ts
var testActions = (client)=>({
        dropTransaction: (args)=>(0, _chunkKWPP37TEMjs.dropTransaction)(client, args),
        getAutomine: ()=>(0, _chunkKWPP37TEMjs.getAutomine)(client),
        getTxpoolContent: ()=>(0, _chunkKWPP37TEMjs.getTxpoolContent)(client),
        getTxpoolStatus: ()=>(0, _chunkKWPP37TEMjs.getTxpoolStatus)(client),
        impersonateAccount: (args)=>(0, _chunkKWPP37TEMjs.impersonateAccount)(client, args),
        increaseTime: (args)=>(0, _chunkKWPP37TEMjs.increaseTime)(client, args),
        inspectTxpool: ()=>(0, _chunkKWPP37TEMjs.inspectTxpool)(client),
        mine: (args)=>(0, _chunkKWPP37TEMjs.mine)(client, args),
        removeBlockTimestampInterval: ()=>(0, _chunkKWPP37TEMjs.removeBlockTimestampInterval)(client),
        reset: (args)=>(0, _chunkKWPP37TEMjs.reset)(client, args),
        revert: (args)=>(0, _chunkKWPP37TEMjs.revert)(client, args),
        sendUnsignedTransaction: (args)=>(0, _chunkKWPP37TEMjs.sendUnsignedTransaction)(client, args),
        setAutomine: (args)=>(0, _chunkKWPP37TEMjs.setAutomine)(client, args),
        setBalance: (args)=>(0, _chunkKWPP37TEMjs.setBalance)(client, args),
        setBlockGasLimit: (args)=>(0, _chunkKWPP37TEMjs.setBlockGasLimit)(client, args),
        setBlockTimestampInterval: (args)=>(0, _chunkKWPP37TEMjs.setBlockTimestampInterval)(client, args),
        setCode: (args)=>(0, _chunkKWPP37TEMjs.setCode)(client, args),
        setCoinbase: (args)=>(0, _chunkKWPP37TEMjs.setCoinbase)(client, args),
        setIntervalMining: (args)=>(0, _chunkKWPP37TEMjs.setIntervalMining)(client, args),
        setLoggingEnabled: (args)=>(0, _chunkKWPP37TEMjs.setLoggingEnabled)(client, args),
        setMinGasPrice: (args)=>(0, _chunkKWPP37TEMjs.setMinGasPrice)(client, args),
        setNextBlockBaseFeePerGas: (args)=>(0, _chunkKWPP37TEMjs.setNextBlockBaseFeePerGas)(client, args),
        setNextBlockTimestamp: (args)=>(0, _chunkKWPP37TEMjs.setNextBlockTimestamp)(client, args),
        setNonce: (args)=>(0, _chunkKWPP37TEMjs.setNonce)(client, args),
        setRpcUrl: (args)=>(0, _chunkKWPP37TEMjs.setRpcUrl)(client, args),
        setStorageAt: (args)=>(0, _chunkKWPP37TEMjs.setStorageAt)(client, args),
        snapshot: ()=>(0, _chunkKWPP37TEMjs.snapshot)(client),
        stopImpersonatingAccount: (args)=>(0, _chunkKWPP37TEMjs.stopImpersonatingAccount)(client, args)
    });
// src/clients/decorators/wallet.ts
var walletActions = (client)=>({
        addChain: (args)=>(0, _chunkKWPP37TEMjs.addChain)(client, args),
        deployContract: (args)=>(0, _chunkKWPP37TEMjs.deployContract)(client, args),
        getAddresses: ()=>(0, _chunkKWPP37TEMjs.getAddresses)(client),
        getChainId: ()=>(0, _chunkKWPP37TEMjs.getChainId)(client),
        getPermissions: ()=>(0, _chunkKWPP37TEMjs.getPermissions)(client),
        requestAddresses: ()=>(0, _chunkKWPP37TEMjs.requestAddresses)(client),
        requestPermissions: (args)=>(0, _chunkKWPP37TEMjs.requestPermissions)(client, args),
        sendTransaction: (args)=>(0, _chunkKWPP37TEMjs.sendTransaction)(client, args),
        signMessage: (args)=>(0, _chunkKWPP37TEMjs.signMessage)(client, args),
        switchChain: (args)=>(0, _chunkKWPP37TEMjs.switchChain)(client, args),
        watchAsset: (args)=>(0, _chunkKWPP37TEMjs.watchAsset)(client, args),
        writeContract: (args)=>(0, _chunkKWPP37TEMjs.writeContract)(client, args)
    });
// src/clients/createPublicClient.ts
function createPublicClient({ chain , key ="public" , name ="Public Client" , transport , pollingInterval  }) {
    const client = createClient({
        chain,
        key,
        name,
        pollingInterval,
        transport,
        type: "publicClient"
    });
    return {
        ...client,
        ...publicActions(client)
    };
}
// src/clients/createTestClient.ts
function createTestClient({ chain , key ="test" , name ="Test Client" , mode , pollingInterval , transport  }) {
    const client = {
        ...createClient({
            chain,
            key,
            name,
            pollingInterval,
            transport,
            type: "testClient"
        }),
        mode
    };
    return {
        ...client,
        ...testActions(client)
    };
}
// src/clients/createWalletClient.ts
function createWalletClient({ transport , key ="wallet" , name ="Wallet Client" , pollingInterval  }) {
    const client = createClient({
        key,
        name,
        pollingInterval,
        transport: ()=>transport({
                retryCount: 0
            }),
        type: "walletClient"
    });
    return {
        ...client,
        ...walletActions(client)
    };
}

},{"./chunk-KJWXTN6G.mjs":"1D3GD","./chunk-KWPP37TE.mjs":"HU8JQ","@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"1D3GD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "labelhash", ()=>labelhash);
parcelHelpers.export(exports, "namehash", ()=>namehash);
parcelHelpers.export(exports, "getEnsAddress", ()=>getEnsAddress);
parcelHelpers.export(exports, "getEnsName", ()=>getEnsName);
var _chunkKWPP37TEMjs = require("./chunk-KWPP37TE.mjs");
// src/utils/ens/labelhash.ts
function labelhash(label) {
    let result = new Uint8Array(32).fill(0);
    if (!label) return (0, _chunkKWPP37TEMjs.bytesToHex)(result);
    return (0, _chunkKWPP37TEMjs.keccak256)((0, _chunkKWPP37TEMjs.stringToBytes)(label));
}
// src/utils/ens/namehash.ts
function namehash(name) {
    let result = new Uint8Array(32).fill(0);
    if (!name) return (0, _chunkKWPP37TEMjs.bytesToHex)(result);
    const labels = name.split(".");
    for(let i = labels.length - 1; i >= 0; i -= 1){
        const hashed = (0, _chunkKWPP37TEMjs.keccak256)((0, _chunkKWPP37TEMjs.stringToBytes)(labels[i]), "bytes");
        result = (0, _chunkKWPP37TEMjs.keccak256)((0, _chunkKWPP37TEMjs.concat)([
            result,
            hashed
        ]), "bytes");
    }
    return (0, _chunkKWPP37TEMjs.bytesToHex)(result);
}
// src/utils/ens/packetToBytes.ts
function packetToBytes(packet) {
    function length(value2) {
        if (value2 === "." || value2 === "..") return 1;
        return (0, _chunkKWPP37TEMjs.toBytes)(value2.replace(/^\.|\.$/gm, "")).length + 2;
    }
    const bytes = new Uint8Array(length(packet));
    const value = packet.replace(/^\.|\.$/gm, "");
    if (!value.length) return bytes;
    let offset = 0;
    const list = value.split(".");
    for(let i = 0; i < list.length; i++){
        const encoded = (0, _chunkKWPP37TEMjs.toBytes)(list[i]);
        bytes[offset] = encoded.length;
        bytes.set(encoded, offset + 1);
        offset += encoded.length + 1;
    }
    return bytes;
}
// src/actions/ens/getEnsAddress.ts
async function getEnsAddress(client, { blockNumber , blockTag , name , universalResolverAddress: universalResolverAddress_  }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
        if (!client.chain) throw new Error("client chain not configured. universalResolverAddress is required.");
        const contract = client.chain?.contracts?.ensUniversalResolver;
        if (!contract) throw new (0, _chunkKWPP37TEMjs.ChainDoesNotSupportContract)({
            chain: client.chain,
            contract: {
                name: "ensUniversalResolver"
            }
        });
        if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber) throw new (0, _chunkKWPP37TEMjs.ChainDoesNotSupportContract)({
            blockNumber,
            chain: client.chain,
            contract: {
                name: "ensUniversalResolver",
                blockCreated: contract.blockCreated
            }
        });
        universalResolverAddress = contract.address;
    }
    const res = await (0, _chunkKWPP37TEMjs.readContract)(client, {
        address: universalResolverAddress,
        abi: [
            {
                name: "resolve",
                type: "function",
                stateMutability: "view",
                inputs: [
                    {
                        name: "name",
                        type: "bytes"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    }
                ],
                outputs: [
                    {
                        name: "",
                        type: "bytes"
                    },
                    {
                        name: "address",
                        type: "address"
                    }
                ]
            }
        ],
        functionName: "resolve",
        args: [
            (0, _chunkKWPP37TEMjs.toHex)(packetToBytes(name)),
            (0, _chunkKWPP37TEMjs.encodeFunctionData)({
                abi: [
                    {
                        name: "addr",
                        type: "function",
                        stateMutability: "view",
                        inputs: [
                            {
                                name: "name",
                                type: "bytes32"
                            }
                        ],
                        outputs: []
                    }
                ],
                functionName: "addr",
                args: [
                    namehash(name)
                ]
            })
        ],
        blockNumber,
        blockTag
    });
    return (0, _chunkKWPP37TEMjs.decodeFunctionResult)({
        abi: [
            {
                name: "addr",
                type: "function",
                stateMutability: "view",
                inputs: [],
                outputs: [
                    {
                        name: "name",
                        type: "address"
                    }
                ]
            }
        ],
        functionName: "addr",
        data: res[0]
    });
}
// src/actions/ens/getEnsName.ts
async function getEnsName(client, { address , blockNumber , blockTag , universalResolverAddress: universalResolverAddress_  }) {
    let universalResolverAddress = universalResolverAddress_;
    if (!universalResolverAddress) {
        if (!client.chain) throw new Error("client chain not configured. universalResolverAddress is required.");
        const contract = client.chain?.contracts?.ensUniversalResolver;
        if (!contract) throw new (0, _chunkKWPP37TEMjs.ChainDoesNotSupportContract)({
            chain: client.chain,
            contract: {
                name: "ensUniversalResolver"
            }
        });
        if (blockNumber && contract.blockCreated && contract.blockCreated > blockNumber) throw new (0, _chunkKWPP37TEMjs.ChainDoesNotSupportContract)({
            blockNumber,
            chain: client.chain,
            contract: {
                name: "ensUniversalResolver",
                blockCreated: contract.blockCreated
            }
        });
        universalResolverAddress = contract.address;
    }
    const reverseNode = `${address.toLowerCase().substring(2)}.addr.reverse`;
    try {
        const res = await (0, _chunkKWPP37TEMjs.readContract)(client, {
            address: universalResolverAddress,
            abi: [
                {
                    name: "reverse",
                    type: "function",
                    stateMutability: "view",
                    inputs: [
                        {
                            type: "bytes",
                            name: "reverseName"
                        }
                    ],
                    outputs: [
                        {
                            type: "string",
                            name: "resolvedName"
                        },
                        {
                            type: "address",
                            name: "resolvedAddress"
                        },
                        {
                            type: "address",
                            name: "reverseResolver"
                        },
                        {
                            type: "address",
                            name: "resolver"
                        }
                    ]
                }
            ],
            functionName: "reverse",
            args: [
                (0, _chunkKWPP37TEMjs.toHex)(packetToBytes(reverseNode))
            ],
            blockNumber,
            blockTag
        });
        return res[0];
    } catch (error) {
        if (error instanceof (0, _chunkKWPP37TEMjs.ContractFunctionExecutionError) && error.cause.reason === (0, _chunkKWPP37TEMjs.panicReasons)[50]) return null;
        throw error;
    }
}

},{"./chunk-KWPP37TE.mjs":"HU8JQ","@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"HU8JQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseError", ()=>BaseError);
parcelHelpers.export(exports, "AbiConstructorNotFoundError", ()=>AbiConstructorNotFoundError);
parcelHelpers.export(exports, "AbiConstructorParamsNotFoundError", ()=>AbiConstructorParamsNotFoundError);
parcelHelpers.export(exports, "AbiDecodingDataSizeInvalidError", ()=>AbiDecodingDataSizeInvalidError);
parcelHelpers.export(exports, "AbiDecodingZeroDataError", ()=>AbiDecodingZeroDataError);
parcelHelpers.export(exports, "AbiEncodingArrayLengthMismatchError", ()=>AbiEncodingArrayLengthMismatchError);
parcelHelpers.export(exports, "AbiEncodingLengthMismatchError", ()=>AbiEncodingLengthMismatchError);
parcelHelpers.export(exports, "AbiErrorInputsNotFoundError", ()=>AbiErrorInputsNotFoundError);
parcelHelpers.export(exports, "AbiErrorNotFoundError", ()=>AbiErrorNotFoundError);
parcelHelpers.export(exports, "AbiErrorSignatureNotFoundError", ()=>AbiErrorSignatureNotFoundError);
parcelHelpers.export(exports, "AbiEventSignatureNotFoundError", ()=>AbiEventSignatureNotFoundError);
parcelHelpers.export(exports, "AbiEventNotFoundError", ()=>AbiEventNotFoundError);
parcelHelpers.export(exports, "AbiFunctionNotFoundError", ()=>AbiFunctionNotFoundError);
parcelHelpers.export(exports, "AbiFunctionOutputsNotFoundError", ()=>AbiFunctionOutputsNotFoundError);
parcelHelpers.export(exports, "AbiFunctionSignatureNotFoundError", ()=>AbiFunctionSignatureNotFoundError);
parcelHelpers.export(exports, "InvalidAbiEncodingTypeError", ()=>InvalidAbiEncodingTypeError);
parcelHelpers.export(exports, "InvalidAbiDecodingTypeError", ()=>InvalidAbiDecodingTypeError);
parcelHelpers.export(exports, "InvalidArrayError", ()=>InvalidArrayError);
parcelHelpers.export(exports, "InvalidDefinitionTypeError", ()=>InvalidDefinitionTypeError);
parcelHelpers.export(exports, "InvalidAddressError", ()=>InvalidAddressError);
parcelHelpers.export(exports, "BlockNotFoundError", ()=>BlockNotFoundError);
parcelHelpers.export(exports, "ChainDoesNotSupportContract", ()=>ChainDoesNotSupportContract);
parcelHelpers.export(exports, "multicall3Abi", ()=>multicall3Abi);
parcelHelpers.export(exports, "panicReasons", ()=>panicReasons);
parcelHelpers.export(exports, "etherUnits", ()=>etherUnits);
parcelHelpers.export(exports, "gweiUnits", ()=>gweiUnits);
parcelHelpers.export(exports, "weiUnits", ()=>weiUnits);
parcelHelpers.export(exports, "TransactionExecutionError", ()=>TransactionExecutionError);
parcelHelpers.export(exports, "TransactionNotFoundError", ()=>TransactionNotFoundError);
parcelHelpers.export(exports, "TransactionReceiptNotFoundError", ()=>TransactionReceiptNotFoundError);
parcelHelpers.export(exports, "WaitForTransactionReceiptTimeoutError", ()=>WaitForTransactionReceiptTimeoutError);
parcelHelpers.export(exports, "CallExecutionError", ()=>CallExecutionError);
parcelHelpers.export(exports, "ContractFunctionExecutionError", ()=>ContractFunctionExecutionError);
parcelHelpers.export(exports, "ContractFunctionRevertedError", ()=>ContractFunctionRevertedError);
parcelHelpers.export(exports, "ContractFunctionZeroDataError", ()=>ContractFunctionZeroDataError);
parcelHelpers.export(exports, "RawContractError", ()=>RawContractError);
parcelHelpers.export(exports, "SizeExceedsPaddingSizeError", ()=>SizeExceedsPaddingSizeError);
parcelHelpers.export(exports, "DataLengthTooLongError", ()=>DataLengthTooLongError);
parcelHelpers.export(exports, "DataLengthTooShortError", ()=>DataLengthTooShortError);
parcelHelpers.export(exports, "InvalidBytesBooleanError", ()=>InvalidBytesBooleanError);
parcelHelpers.export(exports, "InvalidHexBooleanError", ()=>InvalidHexBooleanError);
parcelHelpers.export(exports, "InvalidHexValueError", ()=>InvalidHexValueError);
parcelHelpers.export(exports, "OffsetOutOfBoundsError", ()=>OffsetOutOfBoundsError);
parcelHelpers.export(exports, "EstimateGasExecutionError", ()=>EstimateGasExecutionError);
parcelHelpers.export(exports, "FilterTypeNotSupportedError", ()=>FilterTypeNotSupportedError);
parcelHelpers.export(exports, "ExecutionRevertedError", ()=>ExecutionRevertedError);
parcelHelpers.export(exports, "FeeCapTooHighError", ()=>FeeCapTooHighError);
parcelHelpers.export(exports, "FeeCapTooLowError", ()=>FeeCapTooLowError);
parcelHelpers.export(exports, "NonceTooHighError", ()=>NonceTooHighError);
parcelHelpers.export(exports, "NonceTooLowError", ()=>NonceTooLowError);
parcelHelpers.export(exports, "NonceMaxValueError", ()=>NonceMaxValueError);
parcelHelpers.export(exports, "InsufficientFundsError", ()=>InsufficientFundsError);
parcelHelpers.export(exports, "IntrinsicGasTooHighError", ()=>IntrinsicGasTooHighError);
parcelHelpers.export(exports, "IntrinsicGasTooLowError", ()=>IntrinsicGasTooLowError);
parcelHelpers.export(exports, "TransactionTypeNotSupportedError", ()=>TransactionTypeNotSupportedError);
parcelHelpers.export(exports, "TipAboveFeeCapError", ()=>TipAboveFeeCapError);
parcelHelpers.export(exports, "UnknownNodeError", ()=>UnknownNodeError);
parcelHelpers.export(exports, "RequestError", ()=>RequestError);
parcelHelpers.export(exports, "RpcRequestError", ()=>RpcRequestError);
parcelHelpers.export(exports, "ParseRpcError", ()=>ParseRpcError);
parcelHelpers.export(exports, "InvalidRequestRpcError", ()=>InvalidRequestRpcError);
parcelHelpers.export(exports, "MethodNotFoundRpcError", ()=>MethodNotFoundRpcError);
parcelHelpers.export(exports, "InvalidParamsRpcError", ()=>InvalidParamsRpcError);
parcelHelpers.export(exports, "InternalRpcError", ()=>InternalRpcError);
parcelHelpers.export(exports, "InvalidInputRpcError", ()=>InvalidInputRpcError);
parcelHelpers.export(exports, "ResourceNotFoundRpcError", ()=>ResourceNotFoundRpcError);
parcelHelpers.export(exports, "ResourceUnavailableRpcError", ()=>ResourceUnavailableRpcError);
parcelHelpers.export(exports, "TransactionRejectedRpcError", ()=>TransactionRejectedRpcError);
parcelHelpers.export(exports, "MethodNotSupportedRpcError", ()=>MethodNotSupportedRpcError);
parcelHelpers.export(exports, "LimitExceededRpcError", ()=>LimitExceededRpcError);
parcelHelpers.export(exports, "JsonRpcVersionUnsupportedError", ()=>JsonRpcVersionUnsupportedError);
parcelHelpers.export(exports, "UserRejectedRequestError", ()=>UserRejectedRequestError);
parcelHelpers.export(exports, "SwitchChainError", ()=>SwitchChainError);
parcelHelpers.export(exports, "UnknownRpcError", ()=>UnknownRpcError);
parcelHelpers.export(exports, "HttpRequestError", ()=>HttpRequestError);
parcelHelpers.export(exports, "WebSocketRequestError", ()=>WebSocketRequestError);
parcelHelpers.export(exports, "RpcError", ()=>RpcError);
parcelHelpers.export(exports, "TimeoutError", ()=>TimeoutError);
parcelHelpers.export(exports, "UrlRequiredError", ()=>UrlRequiredError);
parcelHelpers.export(exports, "concat", ()=>concat);
parcelHelpers.export(exports, "isBytes", ()=>isBytes);
parcelHelpers.export(exports, "isHex", ()=>isHex);
parcelHelpers.export(exports, "pad", ()=>pad);
parcelHelpers.export(exports, "padHex", ()=>padHex);
parcelHelpers.export(exports, "padBytes", ()=>padBytes);
parcelHelpers.export(exports, "trim", ()=>trim);
parcelHelpers.export(exports, "size", ()=>size);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "sliceBytes", ()=>sliceBytes);
parcelHelpers.export(exports, "sliceHex", ()=>sliceHex);
parcelHelpers.export(exports, "boolToHex", ()=>boolToHex);
parcelHelpers.export(exports, "bytesToHex", ()=>bytesToHex);
parcelHelpers.export(exports, "toHex", ()=>toHex);
parcelHelpers.export(exports, "numberToHex", ()=>numberToHex);
parcelHelpers.export(exports, "stringToHex", ()=>stringToHex);
parcelHelpers.export(exports, "toBytes", ()=>toBytes);
parcelHelpers.export(exports, "boolToBytes", ()=>boolToBytes);
parcelHelpers.export(exports, "hexToBytes", ()=>hexToBytes);
parcelHelpers.export(exports, "numberToBytes", ()=>numberToBytes);
parcelHelpers.export(exports, "stringToBytes", ()=>stringToBytes);
parcelHelpers.export(exports, "toRlp", ()=>toRlp);
parcelHelpers.export(exports, "fromHex", ()=>fromHex);
parcelHelpers.export(exports, "hexToBigInt", ()=>hexToBigInt);
parcelHelpers.export(exports, "hexToBool", ()=>hexToBool);
parcelHelpers.export(exports, "hexToNumber", ()=>hexToNumber);
parcelHelpers.export(exports, "hexToString", ()=>hexToString);
parcelHelpers.export(exports, "fromBytes", ()=>fromBytes);
parcelHelpers.export(exports, "bytesToBigint", ()=>bytesToBigint);
parcelHelpers.export(exports, "bytesToBool", ()=>bytesToBool);
parcelHelpers.export(exports, "bytesToNumber", ()=>bytesToNumber);
parcelHelpers.export(exports, "bytesToString", ()=>bytesToString);
parcelHelpers.export(exports, "fromRlp", ()=>fromRlp);
parcelHelpers.export(exports, "extractFunctionParts", ()=>extractFunctionParts);
parcelHelpers.export(exports, "extractFunctionName", ()=>extractFunctionName);
parcelHelpers.export(exports, "extractFunctionParams", ()=>extractFunctionParams);
parcelHelpers.export(exports, "extractFunctionType", ()=>extractFunctionType);
parcelHelpers.export(exports, "keccak256", ()=>keccak256);
parcelHelpers.export(exports, "getEventSelector", ()=>getEventSelector);
parcelHelpers.export(exports, "getFunctionSelector", ()=>getFunctionSelector);
parcelHelpers.export(exports, "isAddress", ()=>isAddress);
parcelHelpers.export(exports, "getAddress", ()=>getAddress);
parcelHelpers.export(exports, "getContractAddress", ()=>getContractAddress2);
parcelHelpers.export(exports, "getCreateAddress", ()=>getCreateAddress);
parcelHelpers.export(exports, "getCreate2Address", ()=>getCreate2Address);
parcelHelpers.export(exports, "isAddressEqual", ()=>isAddressEqual);
parcelHelpers.export(exports, "encodeAbiParameters", ()=>encodeAbiParameters);
parcelHelpers.export(exports, "decodeAbiParameters", ()=>decodeAbiParameters);
parcelHelpers.export(exports, "formatAbiItem", ()=>formatAbiItem);
parcelHelpers.export(exports, "decodeErrorResult", ()=>decodeErrorResult);
parcelHelpers.export(exports, "decodeEventLog", ()=>decodeEventLog);
parcelHelpers.export(exports, "decodeFunctionData", ()=>decodeFunctionData);
parcelHelpers.export(exports, "getAbiItem", ()=>getAbiItem);
parcelHelpers.export(exports, "decodeFunctionResult", ()=>decodeFunctionResult);
parcelHelpers.export(exports, "encodeDeployData", ()=>encodeDeployData);
parcelHelpers.export(exports, "encodeErrorResult", ()=>encodeErrorResult);
parcelHelpers.export(exports, "encodeEventTopics", ()=>encodeEventTopics);
parcelHelpers.export(exports, "encodeFunctionData", ()=>encodeFunctionData);
parcelHelpers.export(exports, "encodeFunctionResult", ()=>encodeFunctionResult);
parcelHelpers.export(exports, "arrayRegex", ()=>arrayRegex);
parcelHelpers.export(exports, "bytesRegex", ()=>bytesRegex);
parcelHelpers.export(exports, "integerRegex", ()=>integerRegex);
parcelHelpers.export(exports, "encodePacked", ()=>encodePacked);
parcelHelpers.export(exports, "formatAbiItemWithArgs", ()=>formatAbiItemWithArgs);
parcelHelpers.export(exports, "parseAbi", ()=>(0, _abitype.parseAbi));
parcelHelpers.export(exports, "parseAbiItem", ()=>(0, _abitype.parseAbiItem));
parcelHelpers.export(exports, "parseAbiParameter", ()=>(0, _abitype.parseAbiParameter));
parcelHelpers.export(exports, "parseAbiParameters", ()=>(0, _abitype.parseAbiParameters));
parcelHelpers.export(exports, "getAccount", ()=>getAccount);
parcelHelpers.export(exports, "isDeterministicError", ()=>isDeterministicError);
parcelHelpers.export(exports, "buildRequest", ()=>buildRequest);
parcelHelpers.export(exports, "defineChain", ()=>defineChain);
parcelHelpers.export(exports, "format", ()=>format3);
parcelHelpers.export(exports, "defineFormatter", ()=>defineFormatter);
parcelHelpers.export(exports, "transactionType", ()=>transactionType);
parcelHelpers.export(exports, "formatTransaction", ()=>formatTransaction);
parcelHelpers.export(exports, "defineTransaction", ()=>defineTransaction);
parcelHelpers.export(exports, "formatBlock", ()=>formatBlock);
parcelHelpers.export(exports, "defineBlock", ()=>defineBlock);
parcelHelpers.export(exports, "extract", ()=>extract);
parcelHelpers.export(exports, "defineTransactionReceipt", ()=>defineTransactionReceipt);
parcelHelpers.export(exports, "formatTransactionRequest", ()=>formatTransactionRequest);
parcelHelpers.export(exports, "defineTransactionRequest", ()=>defineTransactionRequest);
parcelHelpers.export(exports, "containsNodeError", ()=>containsNodeError);
parcelHelpers.export(exports, "getNodeError", ()=>getNodeError);
parcelHelpers.export(exports, "getCallError", ()=>getCallError);
parcelHelpers.export(exports, "getContractError", ()=>getContractError);
parcelHelpers.export(exports, "getEstimateGasError", ()=>getEstimateGasError);
parcelHelpers.export(exports, "getTransactionError", ()=>getTransactionError);
parcelHelpers.export(exports, "stringify", ()=>stringify);
parcelHelpers.export(exports, "getSocket", ()=>getSocket);
parcelHelpers.export(exports, "rpc", ()=>rpc);
parcelHelpers.export(exports, "assertRequest", ()=>assertRequest);
parcelHelpers.export(exports, "call", ()=>call);
parcelHelpers.export(exports, "simulateContract", ()=>simulateContract);
parcelHelpers.export(exports, "createPendingTransactionFilter", ()=>createPendingTransactionFilter);
parcelHelpers.export(exports, "createBlockFilter", ()=>createBlockFilter);
parcelHelpers.export(exports, "createEventFilter", ()=>createEventFilter);
parcelHelpers.export(exports, "createContractEventFilter", ()=>createContractEventFilter);
parcelHelpers.export(exports, "estimateGas", ()=>estimateGas);
parcelHelpers.export(exports, "estimateContractGas", ()=>estimateContractGas);
parcelHelpers.export(exports, "getBalance", ()=>getBalance);
parcelHelpers.export(exports, "getBlock", ()=>getBlock);
parcelHelpers.export(exports, "getBlockNumberCache", ()=>getBlockNumberCache);
parcelHelpers.export(exports, "getBlockNumber", ()=>getBlockNumber);
parcelHelpers.export(exports, "getBlockTransactionCount", ()=>getBlockTransactionCount);
parcelHelpers.export(exports, "getBytecode", ()=>getBytecode);
parcelHelpers.export(exports, "getChainId", ()=>getChainId);
parcelHelpers.export(exports, "getFeeHistory", ()=>getFeeHistory);
parcelHelpers.export(exports, "getFilterChanges", ()=>getFilterChanges);
parcelHelpers.export(exports, "getFilterLogs", ()=>getFilterLogs);
parcelHelpers.export(exports, "getGasPrice", ()=>getGasPrice);
parcelHelpers.export(exports, "getLogs", ()=>getLogs);
parcelHelpers.export(exports, "getStorageAt", ()=>getStorageAt);
parcelHelpers.export(exports, "getTransaction", ()=>getTransaction);
parcelHelpers.export(exports, "getTransactionConfirmations", ()=>getTransactionConfirmations);
parcelHelpers.export(exports, "getTransactionCount", ()=>getTransactionCount);
parcelHelpers.export(exports, "getTransactionReceipt", ()=>getTransactionReceipt);
parcelHelpers.export(exports, "readContract", ()=>readContract);
parcelHelpers.export(exports, "multicall", ()=>multicall);
parcelHelpers.export(exports, "uninstallFilter", ()=>uninstallFilter);
parcelHelpers.export(exports, "waitForTransactionReceipt", ()=>waitForTransactionReceipt);
parcelHelpers.export(exports, "watchBlockNumber", ()=>watchBlockNumber);
parcelHelpers.export(exports, "watchBlocks", ()=>watchBlocks);
parcelHelpers.export(exports, "watchContractEvent", ()=>watchContractEvent);
parcelHelpers.export(exports, "watchEvent", ()=>watchEvent);
parcelHelpers.export(exports, "watchPendingTransactions", ()=>watchPendingTransactions);
parcelHelpers.export(exports, "dropTransaction", ()=>dropTransaction);
parcelHelpers.export(exports, "getAutomine", ()=>getAutomine);
parcelHelpers.export(exports, "getTxpoolContent", ()=>getTxpoolContent);
parcelHelpers.export(exports, "getTxpoolStatus", ()=>getTxpoolStatus);
parcelHelpers.export(exports, "impersonateAccount", ()=>impersonateAccount);
parcelHelpers.export(exports, "increaseTime", ()=>increaseTime);
parcelHelpers.export(exports, "inspectTxpool", ()=>inspectTxpool);
parcelHelpers.export(exports, "mine", ()=>mine);
parcelHelpers.export(exports, "removeBlockTimestampInterval", ()=>removeBlockTimestampInterval);
parcelHelpers.export(exports, "reset", ()=>reset);
parcelHelpers.export(exports, "revert", ()=>revert);
parcelHelpers.export(exports, "sendUnsignedTransaction", ()=>sendUnsignedTransaction);
parcelHelpers.export(exports, "setAutomine", ()=>setAutomine);
parcelHelpers.export(exports, "setBalance", ()=>setBalance);
parcelHelpers.export(exports, "setBlockGasLimit", ()=>setBlockGasLimit);
parcelHelpers.export(exports, "setBlockTimestampInterval", ()=>setBlockTimestampInterval);
parcelHelpers.export(exports, "setCode", ()=>setCode);
parcelHelpers.export(exports, "setCoinbase", ()=>setCoinbase);
parcelHelpers.export(exports, "setIntervalMining", ()=>setIntervalMining);
parcelHelpers.export(exports, "setLoggingEnabled", ()=>setLoggingEnabled);
parcelHelpers.export(exports, "setMinGasPrice", ()=>setMinGasPrice);
parcelHelpers.export(exports, "setNextBlockBaseFeePerGas", ()=>setNextBlockBaseFeePerGas);
parcelHelpers.export(exports, "setNextBlockTimestamp", ()=>setNextBlockTimestamp);
parcelHelpers.export(exports, "setNonce", ()=>setNonce);
parcelHelpers.export(exports, "setRpcUrl", ()=>setRpcUrl);
parcelHelpers.export(exports, "setStorageAt", ()=>setStorageAt);
parcelHelpers.export(exports, "snapshot", ()=>snapshot);
parcelHelpers.export(exports, "stopImpersonatingAccount", ()=>stopImpersonatingAccount);
parcelHelpers.export(exports, "addChain", ()=>addChain);
parcelHelpers.export(exports, "deployContract", ()=>deployContract);
parcelHelpers.export(exports, "getAddresses", ()=>getAddresses);
parcelHelpers.export(exports, "getPermissions", ()=>getPermissions);
parcelHelpers.export(exports, "requestAddresses", ()=>requestAddresses);
parcelHelpers.export(exports, "requestPermissions", ()=>requestPermissions);
parcelHelpers.export(exports, "sendTransaction", ()=>sendTransaction);
parcelHelpers.export(exports, "signMessage", ()=>signMessage);
parcelHelpers.export(exports, "switchChain", ()=>switchChain);
parcelHelpers.export(exports, "watchAsset", ()=>watchAsset);
parcelHelpers.export(exports, "writeContract", ()=>writeContract);
parcelHelpers.export(exports, "parseUnits", ()=>parseUnits);
parcelHelpers.export(exports, "parseGwei", ()=>parseGwei);
parcelHelpers.export(exports, "prepareRequest", ()=>prepareRequest);
parcelHelpers.export(exports, "formatUnits", ()=>formatUnits);
parcelHelpers.export(exports, "formatEther", ()=>formatEther);
parcelHelpers.export(exports, "formatGwei", ()=>formatGwei);
parcelHelpers.export(exports, "parseEther", ()=>parseEther);
// src/utils/abi/index.ts
var _abitype = require("abitype");
// src/utils/hash/keccak256.ts
var _sha3 = require("@noble/hashes/sha3");
// src/utils/rpc.ts
var _isomorphicWs = require("isomorphic-ws");
var _isomorphicWsDefault = parcelHelpers.interopDefault(_isomorphicWs);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};
// package.json
var package_default = {
    name: "viem",
    description: "TypeScript Interface for Ethereum",
    version: "0.1.6",
    scripts: {
        anvil: "source .env && anvil --fork-url $VITE_ANVIL_FORK_URL --fork-block-number $VITE_ANVIL_BLOCK_NUMBER --block-time $VITE_ANVIL_BLOCK_TIME",
        bench: "vitest bench --no-threads",
        "bench:ci": "CI=true vitest bench --no-threads",
        build: "tsup",
        changeset: "changeset",
        "changeset:release": "pnpm build && changeset publish",
        "changeset:version": "changeset version && pnpm install --lockfile-only",
        clean: "rimraf dist abi chains contract ens public test utils wallet window",
        "contracts:build": "wagmi generate",
        dev: "DEV=true tsup",
        "dev:docs": "pnpm -r --filter site dev",
        format: "rome format src/ --write",
        lint: "rome check .",
        "lint:fix": "pnpm lint --apply-suggested",
        playground: "pnpm --filter playground-browser dev",
        postinstall: "pnpm dev && pnpm contracts:build",
        preinstall: "npx only-allow pnpm",
        prepublishOnly: "pnpm bun scripts/prepublishOnly.ts",
        prepare: "npx simple-git-hooks",
        test: "vitest dev --no-threads",
        "test:cov": "vitest dev --coverage --no-threads",
        "test:ci": "CI=true vitest --coverage --no-threads",
        "test:ui": "vitest dev --ui --no-threads",
        "ts-node": "bun",
        typecheck: "tsc --noEmit"
    },
    tsup: {
        entry: [
            "src/index.ts",
            "src/abi.ts",
            "src/chains.ts",
            "src/contract.ts",
            "src/ens.ts",
            "src/public.ts",
            "src/test.ts",
            "src/utils/index.ts",
            "src/wallet.ts",
            "src/window.ts"
        ]
    },
    files: [
        "/abi",
        "/dist",
        "/chains",
        "/contract",
        "/ens",
        "/public",
        "/test",
        "/utils",
        "/wallet",
        "/window"
    ],
    exports: {
        ".": {
            types: "./dist/index.d.ts",
            module: "./dist/index.mts",
            default: "./dist/index.js"
        },
        "./abi": {
            types: "./dist/abi.d.ts",
            module: "./dist/abi.mts",
            default: "./dist/abi.js"
        },
        "./chains": {
            types: "./dist/chains.d.ts",
            module: "./dist/chains.mts",
            default: "./dist/chains.js"
        },
        "./contract": {
            types: "./dist/contract.d.ts",
            module: "./dist/contract.mts",
            default: "./dist/contract.js"
        },
        "./ens": {
            types: "./dist/ens.d.ts",
            module: "./dist/ens.mts",
            default: "./dist/ens.js"
        },
        "./public": {
            types: "./dist/public.d.ts",
            module: "./dist/public.mts",
            default: "./dist/public.js"
        },
        "./test": {
            types: "./dist/test.d.ts",
            module: "./dist/test.mts",
            default: "./dist/test.js"
        },
        "./utils": {
            types: "./dist/utils/index.d.ts",
            module: "./dist/utils/index.mts",
            default: "./dist/utils/index.js"
        },
        "./wallet": {
            types: "./dist/wallet.d.ts",
            module: "./dist/wallet.mts",
            default: "./dist/wallet.js"
        },
        "./window": {
            types: "./dist/window.d.ts",
            module: "./dist/window.mts",
            default: "./dist/window.js"
        },
        "./package.json": "./package.json"
    },
    main: "dist/index.js",
    module: "dist/index.mjs",
    types: "dist/index.d.ts",
    sideEffects: false,
    dependencies: {
        "@noble/hashes": "^1.1.2",
        "@wagmi/chains": "~0.2.11",
        abitype: "~0.6.7",
        "idna-uts46-hx": "^4.1.2",
        "isomorphic-ws": "^5.0.0",
        ws: "^8.12.0"
    },
    devDependencies: {
        "@actions/core": "^1.10.0",
        "@actions/github": "^5.1.1",
        "@adraffy/ens-normalize": "^1.8.9",
        "@changesets/changelog-github": "^0.4.5",
        "@changesets/cli": "^2.23.2",
        "@types/dedent": "^0.7.0",
        "@types/fs-extra": "^9.0.13",
        "@types/node": "^17.0.45",
        "@types/ws": "^8.5.4",
        "@vitest/coverage-c8": "^0.29.2",
        "@vitest/ui": "^0.29.2",
        "@wagmi/cli": "^0.1.6",
        bun: "^0.5.5",
        bundlewatch: "^0.3.3",
        dedent: "^0.7.0",
        ethers: "^5.7.2",
        "ethers@6": "npm:ethers@^6.0.2",
        execa: "^6.1.0",
        "fs-extra": "^10.1.0",
        rimraf: "^4.1.2",
        rome: "^11.0.0",
        "simple-git-hooks": "^2.8.1",
        tsup: "^6.6.0",
        typescript: "^4.9.4",
        vite: "^4.1.4",
        vitest: "~0.29.2"
    },
    license: "MIT",
    repository: "wagmi-dev/viem",
    authors: [
        "awkweb.eth",
        "jxom.eth"
    ],
    keywords: [
        "eth",
        "ethereum",
        "dapps",
        "wallet",
        "web3"
    ],
    "simple-git-hooks": {
        "pre-commit": "pnpm format && pnpm lint:fix"
    },
    pnpm: {
        patchedDependencies: {
            "vitepress@1.0.0-alpha.49": "patches/vitepress@1.0.0-alpha.49.patch"
        },
        peerDependencyRules: {
            ignoreMissing: [
                "@algolia/client-search"
            ]
        }
    }
};
// src/errors/utils.ts
var getContractAddress = (address)=>address;
var getUrl = (url)=>url;
var getVersion = ()=>`${package_default.name}@${package_default.version}`;
// src/errors/base.ts
var BaseError = class extends Error {
    constructor(shortMessage, args = {}){
        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath5 = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
            shortMessage || "An error occurred.",
            "",
            ...args.metaMessages ? [
                ...args.metaMessages,
                ""
            ] : [],
            ...docsPath5 ? [
                `Docs: https://viem.sh${docsPath5}`
            ] : [],
            ...details ? [
                `Details: ${details}`
            ] : [],
            `Version: ${getVersion()}`
        ].join("\n");
        super(message);
        __publicField(this, "details");
        __publicField(this, "docsPath");
        __publicField(this, "metaMessages");
        __publicField(this, "shortMessage");
        __publicField(this, "name", "ViemError");
        if (args.cause) this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath5;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
    }
};
// src/errors/abi.ts
var AbiConstructorNotFoundError = class extends BaseError {
    constructor({ docsPath: docsPath5  }){
        super([
            "A constructor was not found on the ABI.",
            "Make sure you are using the correct ABI and that the constructor exists on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiConstructorNotFoundError");
    }
};
var AbiConstructorParamsNotFoundError = class extends BaseError {
    constructor({ docsPath: docsPath5  }){
        super([
            "Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.",
            "Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiConstructorParamsNotFoundError");
    }
};
var AbiDecodingDataSizeInvalidError = class extends BaseError {
    constructor(size2){
        super([
            `Data size of ${size2} bytes is invalid.`,
            "Size must be in increments of 32 bytes (size % 32 === 0)."
        ].join("\n"));
        __publicField(this, "name", "AbiDecodingDataSizeInvalidError");
    }
};
var AbiDecodingZeroDataError = class extends BaseError {
    constructor(){
        super('Cannot decode zero data ("0x") with ABI parameters.');
        __publicField(this, "name", "AbiDecodingZeroDataError");
    }
};
var AbiEncodingArrayLengthMismatchError = class extends BaseError {
    constructor({ expectedLength , givenLength , type  }){
        super([
            `ABI encoding array length mismatch for type ${type}.`,
            `Expected length: ${expectedLength}`,
            `Given length: ${givenLength}`
        ].join("\n"));
        __publicField(this, "name", "AbiEncodingArrayLengthMismatchError");
    }
};
var AbiEncodingBytesSizeMismatchError = class extends BaseError {
    constructor({ expectedSize , value  }){
        super(`Size of bytes "${value}" (bytes${size(value)}) does not match expected size (bytes${expectedSize}).`);
        __publicField(this, "name", "AbiEncodingBytesSizeMismatchError");
    }
};
var AbiEncodingLengthMismatchError = class extends BaseError {
    constructor({ expectedLength , givenLength  }){
        super([
            "ABI encoding params/values length mismatch.",
            `Expected length (params): ${expectedLength}`,
            `Given length (values): ${givenLength}`
        ].join("\n"));
        __publicField(this, "name", "AbiEncodingLengthMismatchError");
    }
};
var AbiErrorInputsNotFoundError = class extends BaseError {
    constructor(errorName, { docsPath: docsPath5  }){
        super([
            `Arguments (\`args\`) were provided to "${errorName}", but "${errorName}" on the ABI does not contain any parameters (\`inputs\`).`,
            "Cannot encode error result without knowing what the parameter types are.",
            "Make sure you are using the correct ABI and that the inputs exist on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiErrorInputsNotFoundError");
    }
};
var AbiErrorNotFoundError = class extends BaseError {
    constructor(errorName, { docsPath: docsPath5  }){
        super([
            `Error "${errorName}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiErrorNotFoundError");
    }
};
var AbiErrorSignatureNotFoundError = class extends BaseError {
    constructor(signature, { docsPath: docsPath5  }){
        super([
            `Encoded error signature "${signature}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the error exists on it.",
            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiErrorSignatureNotFoundError");
    }
};
var AbiEventSignatureNotFoundError = class extends BaseError {
    constructor(signature, { docsPath: docsPath5  }){
        super([
            `Encoded event signature "${signature}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the event exists on it.",
            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiEventSignatureNotFoundError");
    }
};
var AbiEventNotFoundError = class extends BaseError {
    constructor(eventName, { docsPath: docsPath5  }){
        super([
            `Event "${eventName}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the event exists on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiEventNotFoundError");
    }
};
var AbiFunctionNotFoundError = class extends BaseError {
    constructor(functionName, { docsPath: docsPath5  }){
        super([
            `Function "${functionName}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiFunctionNotFoundError");
    }
};
var AbiFunctionOutputsNotFoundError = class extends BaseError {
    constructor(functionName, { docsPath: docsPath5  }){
        super([
            `Function "${functionName}" does not contain any \`outputs\` on ABI.`,
            "Cannot decode function result without knowing what the parameter types are.",
            "Make sure you are using the correct ABI and that the function exists on it."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiFunctionOutputsNotFoundError");
    }
};
var AbiFunctionSignatureNotFoundError = class extends BaseError {
    constructor(signature, { docsPath: docsPath5  }){
        super([
            `Encoded function signature "${signature}" not found on ABI.`,
            "Make sure you are using the correct ABI and that the function exists on it.",
            `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "AbiFunctionSignatureNotFoundError");
    }
};
var BytesSizeMismatchError = class extends BaseError {
    constructor({ expectedSize , givenSize  }){
        super(`Expected bytes${expectedSize}, got bytes${givenSize}.`);
        __publicField(this, "name", "BytesSizeMismatchError");
    }
};
var InvalidAbiEncodingTypeError = class extends BaseError {
    constructor(type, { docsPath: docsPath5  }){
        super([
            `Type "${type}" is not a valid encoding type.`,
            "Please provide a valid ABI type."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "InvalidAbiEncodingType");
    }
};
var InvalidAbiDecodingTypeError = class extends BaseError {
    constructor(type, { docsPath: docsPath5  }){
        super([
            `Type "${type}" is not a valid decoding type.`,
            "Please provide a valid ABI type."
        ].join("\n"), {
            docsPath: docsPath5
        });
        __publicField(this, "name", "InvalidAbiDecodingType");
    }
};
var InvalidArrayError = class extends BaseError {
    constructor(value){
        super([
            `Value "${value}" is not a valid array.`
        ].join("\n"));
        __publicField(this, "name", "InvalidArrayError");
    }
};
var InvalidDefinitionTypeError = class extends BaseError {
    constructor(type){
        super([
            `"${type}" is not a valid definition type.`,
            'Valid types: "function", "event", "error"'
        ].join("\n"));
        __publicField(this, "name", "InvalidDefinitionTypeError");
    }
};
var UnsupportedPackedAbiType = class extends BaseError {
    constructor(type){
        super(`Type "${type}" is not supported for packed encoding.`);
        __publicField(this, "name", "UnsupportedPackedAbiType");
    }
};
// src/errors/address.ts
var InvalidAddressError = class extends BaseError {
    constructor({ address  }){
        super(`Address "${address}" is invalid.`);
        __publicField(this, "name", "InvalidAddressError");
    }
};
// src/errors/block.ts
var BlockNotFoundError = class extends BaseError {
    constructor({ blockHash , blockNumber  }){
        let identifier = "Block";
        if (blockHash) identifier = `Block at hash "${blockHash}"`;
        if (blockNumber) identifier = `Block at number "${blockNumber}"`;
        super(`${identifier} could not be found.`);
        __publicField(this, "name", "BlockNotFoundError");
    }
};
// src/errors/chain.ts
var ChainDoesNotSupportContract = class extends BaseError {
    constructor({ blockNumber , chain , contract  }){
        super(`Chain "${chain.name}" does not support contract "${contract.name}".`, {
            metaMessages: [
                "This could be due to any of the following:",
                ...blockNumber && contract.blockCreated && contract.blockCreated > blockNumber ? [
                    `- The contract "${contract.name}" was not deployed until block ${contract.blockCreated} (current block ${blockNumber}).`
                ] : [
                    `- The chain does not have the contract "${contract.name}" configured.`
                ]
            ]
        });
        __publicField(this, "name", "ChainDoesNotSupportContract");
    }
};
var ChainMismatchError = class extends BaseError {
    constructor({ chain , currentChainId  }){
        super(`The current chain (id: ${currentChainId}) does not match the chain passed to the request (id: ${chain.id} \u2013 ${chain.name}).`, {
            metaMessages: [
                `Current Chain ID:  ${currentChainId}`,
                `Expected Chain ID: ${chain.id} \u2013 ${chain.name}`
            ]
        });
        __publicField(this, "name", "ChainMismatchError");
    }
};
// src/constants/abis.ts
var multicall3Abi = [
    {
        inputs: [
            {
                components: [
                    {
                        name: "target",
                        type: "address"
                    },
                    {
                        name: "allowFailure",
                        type: "bool"
                    },
                    {
                        name: "callData",
                        type: "bytes"
                    }
                ],
                name: "calls",
                type: "tuple[]"
            }
        ],
        name: "aggregate3",
        outputs: [
            {
                components: [
                    {
                        name: "success",
                        type: "bool"
                    },
                    {
                        name: "returnData",
                        type: "bytes"
                    }
                ],
                name: "returnData",
                type: "tuple[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
// src/constants/solidity.ts
var panicReasons = {
    1: "An `assert` condition failed.",
    17: "Arithmic operation resulted in underflow or overflow.",
    18: "Division or modulo by zero (e.g. `5 / 0` or `23 % 0`).",
    33: "Attempted to convert to an invalid type.",
    34: "Attempted to access a storage byte array that is incorrectly encoded.",
    49: "Performed `.pop()` on an empty array",
    50: "Array index is out of bounds.",
    65: "Allocated too much memory or created an array which is too large.",
    81: "Attempted to call a zero-initialized variable of internal function type."
};
var solidityError = {
    inputs: [
        {
            name: "message",
            type: "string"
        }
    ],
    name: "Error",
    type: "error"
};
var solidityPanic = {
    inputs: [
        {
            name: "reason",
            type: "uint256"
        }
    ],
    name: "Panic",
    type: "error"
};
// src/constants/unit.ts
var etherUnits = {
    gwei: 9,
    wei: 18
};
var gweiUnits = {
    ether: -9,
    wei: 9
};
var weiUnits = {
    ether: -18,
    gwei: -9
};
// src/errors/transaction.ts
function prettyPrint(args) {
    const entries = Object.entries(args).map(([key, value])=>{
        if (value === void 0 || value === false) return null;
        return [
            key,
            value
        ];
    }).filter(Boolean);
    const maxLength = entries.reduce((acc, [key])=>Math.max(acc, key.length), 0);
    return entries.map(([key, value])=>`  ${`${key}:`.padEnd(maxLength + 1)}  ${value}`).join("\n");
}
var FeeConflictError = class extends BaseError {
    constructor(){
        super([
            "Cannot specify both a `gasPrice` and a `maxFeePerGas`/`maxPriorityFeePerGas`.",
            "Use `maxFeePerGas`/`maxPriorityFeePerGas` for EIP-1559 compatible networks, and `gasPrice` for others."
        ].join("\n"));
        __publicField(this, "name", "FeeConflictError");
    }
};
var TransactionExecutionError = class extends BaseError {
    constructor(cause, { account , docsPath: docsPath5 , chain , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value  }){
        const prettyArgs = prettyPrint({
            chain: chain && `${chain?.name} (id: ${chain?.id})`,
            from: account.address,
            to,
            value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency.symbol || "ETH"}`,
            data,
            gas,
            gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
            maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
            nonce
        });
        super(cause.shortMessage, {
            cause,
            docsPath: docsPath5,
            metaMessages: [
                ...cause.metaMessages ? [
                    ...cause.metaMessages,
                    " "
                ] : [],
                "Request Arguments:",
                prettyArgs
            ].filter(Boolean)
        });
        __publicField(this, "cause");
        __publicField(this, "name", "TransactionExecutionError");
        this.cause = cause;
    }
};
var TransactionNotFoundError = class extends BaseError {
    constructor({ blockHash , blockNumber , blockTag , hash: hash2 , index  }){
        let identifier = "Transaction";
        if (blockTag && index !== void 0) identifier = `Transaction at block time "${blockTag}" at index "${index}"`;
        if (blockHash && index !== void 0) identifier = `Transaction at block hash "${blockHash}" at index "${index}"`;
        if (blockNumber && index !== void 0) identifier = `Transaction at block number "${blockNumber}" at index "${index}"`;
        if (hash2) identifier = `Transaction with hash "${hash2}"`;
        super(`${identifier} could not be found.`);
        __publicField(this, "name", "TransactionNotFoundError");
    }
};
var TransactionReceiptNotFoundError = class extends BaseError {
    constructor({ hash: hash2  }){
        super(`Transaction receipt with hash "${hash2}" could not be found. The Transaction may not be processed on a block yet.`);
        __publicField(this, "name", "TransactionReceiptNotFoundError");
    }
};
var WaitForTransactionReceiptTimeoutError = class extends BaseError {
    constructor({ hash: hash2  }){
        super(`Timed out while waiting for transaction with hash "${hash2}" to be confirmed.`);
        __publicField(this, "name", "WaitForTransactionReceiptTimeoutError");
    }
};
// src/errors/contract.ts
var CallExecutionError = class extends BaseError {
    constructor(cause, { account , docsPath: docsPath5 , chain , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value  }){
        const prettyArgs = prettyPrint({
            from: account?.address,
            to,
            value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency.symbol || "ETH"}`,
            data,
            gas,
            gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
            maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
            nonce
        });
        super(cause.shortMessage, {
            cause,
            docsPath: docsPath5,
            metaMessages: [
                ...cause.metaMessages ? [
                    ...cause.metaMessages,
                    " "
                ] : [],
                "Raw Call Arguments:",
                prettyArgs
            ].filter(Boolean)
        });
        __publicField(this, "cause");
        __publicField(this, "name", "CallExecutionError");
        this.cause = cause;
    }
};
var ContractFunctionExecutionError = class extends BaseError {
    constructor(cause, { abi , args , contractAddress , docsPath: docsPath5 , functionName , sender  }){
        const abiItem = getAbiItem({
            abi,
            args,
            name: functionName
        });
        const formattedArgs = abiItem ? formatAbiItemWithArgs({
            abiItem,
            args,
            includeFunctionName: false,
            includeName: false
        }) : void 0;
        const functionWithParams = abiItem ? formatAbiItem(abiItem, {
            includeName: true
        }) : void 0;
        const prettyArgs = prettyPrint({
            address: contractAddress && getContractAddress(contractAddress),
            function: functionWithParams,
            args: formattedArgs && formattedArgs !== "()" && `${[
                ...Array(functionName?.length ?? 0).keys()
            ].map(()=>" ").join("")}${formattedArgs}`,
            sender
        });
        super(cause.shortMessage || `An unknown error occurred while executing the contract function "${functionName}".`, {
            cause,
            docsPath: docsPath5,
            metaMessages: [
                ...cause.metaMessages ? [
                    ...cause.metaMessages,
                    " "
                ] : [],
                "Contract Call:",
                prettyArgs
            ].filter(Boolean)
        });
        __publicField(this, "abi");
        __publicField(this, "args");
        __publicField(this, "cause");
        __publicField(this, "contractAddress");
        __publicField(this, "formattedArgs");
        __publicField(this, "functionName");
        __publicField(this, "sender");
        __publicField(this, "name", "ContractFunctionExecutionError");
        this.abi = abi;
        this.args = args;
        this.cause = cause;
        this.contractAddress = contractAddress;
        this.functionName = functionName;
        this.sender = sender;
    }
};
var ContractFunctionRevertedError = class extends BaseError {
    constructor({ abi , data , functionName , message  }){
        let decodedData = void 0;
        let metaMessages;
        let reason;
        if (data && data !== "0x") {
            decodedData = decodeErrorResult({
                abi,
                data
            });
            const { abiItem , errorName , args: errorArgs  } = decodedData;
            if (errorName === "Error") reason = errorArgs[0];
            else if (errorName === "Panic") {
                const [firstArg] = errorArgs;
                reason = panicReasons[firstArg];
            } else if (errorArgs) {
                const errorWithParams = abiItem ? formatAbiItem(abiItem, {
                    includeName: true
                }) : void 0;
                const formattedArgs = abiItem ? formatAbiItemWithArgs({
                    abiItem,
                    args: errorArgs,
                    includeFunctionName: false,
                    includeName: false
                }) : void 0;
                metaMessages = [
                    errorWithParams ? `Error: ${errorWithParams}` : "",
                    formattedArgs && formattedArgs !== "()" ? `       ${[
                        ...Array(errorName?.length ?? 0).keys()
                    ].map(()=>" ").join("")}${formattedArgs}` : ""
                ];
            }
        } else if (message) reason = message;
        super(reason ? [
            `The contract function "${functionName}" reverted with the following reason:`,
            reason
        ].join("\n") : `The contract function "${functionName}" reverted.`, {
            metaMessages
        });
        __publicField(this, "name", "ContractFunctionRevertedError");
        __publicField(this, "data");
        __publicField(this, "reason");
        this.reason = reason;
        this.data = decodedData;
    }
};
var ContractFunctionZeroDataError = class extends BaseError {
    constructor({ functionName  }){
        super(`The contract function "${functionName}" returned no data ("0x").`, {
            metaMessages: [
                "This could be due to any of the following:",
                `  - The contract does not have the function "${functionName}",`,
                "  - The parameters passed to the contract function may be invalid, or",
                "  - The address is not a contract."
            ]
        });
        __publicField(this, "name", "ContractFunctionZeroDataError");
    }
};
var RawContractError = class extends BaseError {
    constructor({ data , message  }){
        super(message || "");
        __publicField(this, "code", 3);
        __publicField(this, "name", "RawContractError");
        __publicField(this, "data");
        this.data = data;
    }
};
// src/errors/data.ts
var SizeExceedsPaddingSizeError = class extends BaseError {
    constructor({ size: size2 , targetSize , type  }){
        super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (${size2}) exceeds padding size (${targetSize}).`);
        __publicField(this, "name", "SizeExceedsPaddingSizeError");
    }
};
// src/errors/encoding.ts
var DataLengthTooLongError = class extends BaseError {
    constructor({ consumed , length  }){
        super(`Consumed bytes (${consumed}) is shorter than data length (${length - 1}).`);
        __publicField(this, "name", "DataLengthTooLongError");
    }
};
var DataLengthTooShortError = class extends BaseError {
    constructor({ length , dataLength  }){
        super(`Data length (${dataLength - 1}) is shorter than prefix length (${length - 1}).`);
        __publicField(this, "name", "DataLengthTooShortError");
    }
};
var InvalidBytesBooleanError = class extends BaseError {
    constructor(bytes){
        super(`Bytes value "${bytes}" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`);
        __publicField(this, "name", "InvalidBytesBooleanError");
    }
};
var InvalidHexBooleanError = class extends BaseError {
    constructor(hex){
        super(`Hex value "${hex}" is not a valid boolean. The hex value must be "0x0" (false) or "0x1" (true).`);
        __publicField(this, "name", "InvalidHexBooleanError");
    }
};
var InvalidHexValueError = class extends BaseError {
    constructor(value){
        super(`Hex value "${value}" is an odd length (${value.length}). It must be an even length.`);
        __publicField(this, "name", "InvalidHexValueError");
    }
};
var OffsetOutOfBoundsError = class extends BaseError {
    constructor({ nextOffset , offset  }){
        super(`Next offset (${nextOffset}) is greater than previous offset + consumed bytes (${offset})`);
        __publicField(this, "name", "OffsetOutOfBoundsError");
    }
};
// src/errors/estimateGas.ts
var EstimateGasExecutionError = class extends BaseError {
    constructor(cause, { account , docsPath: docsPath5 , chain , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value  }){
        const prettyArgs = prettyPrint({
            from: account.address,
            to,
            value: typeof value !== "undefined" && `${formatEther(value)} ${chain?.nativeCurrency.symbol || "ETH"}`,
            data,
            gas,
            gasPrice: typeof gasPrice !== "undefined" && `${formatGwei(gasPrice)} gwei`,
            maxFeePerGas: typeof maxFeePerGas !== "undefined" && `${formatGwei(maxFeePerGas)} gwei`,
            maxPriorityFeePerGas: typeof maxPriorityFeePerGas !== "undefined" && `${formatGwei(maxPriorityFeePerGas)} gwei`,
            nonce
        });
        super(cause.shortMessage, {
            cause,
            docsPath: docsPath5,
            metaMessages: [
                ...cause.metaMessages ? [
                    ...cause.metaMessages,
                    " "
                ] : [],
                "Estimate Gas Arguments:",
                prettyArgs
            ].filter(Boolean)
        });
        __publicField(this, "cause");
        __publicField(this, "name", "EstimateGasExecutionError");
        this.cause = cause;
    }
};
// src/errors/log.ts
var FilterTypeNotSupportedError = class extends BaseError {
    constructor(type){
        super(`Filter type "${type}" is not supported.`);
        __publicField(this, "name", "FilterTypeNotSupportedError");
    }
};
// src/errors/node.ts
var ExecutionRevertedError = class extends BaseError {
    constructor({ cause , message  } = {}){
        const reason = message?.replace("execution reverted: ", "")?.replace("execution reverted", "");
        super(`Execution reverted ${reason ? `with reason: ${reason}` : "for an unknown reason"}.`, {
            cause
        });
        __publicField(this, "name", "ExecutionRevertedError");
    }
};
__publicField(ExecutionRevertedError, "code", 3);
__publicField(ExecutionRevertedError, "nodeMessage", /execution reverted/);
var FeeCapTooHighError = class extends BaseError {
    constructor({ cause , maxFeePerGas  } = {}){
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ""}) cannot be higher than the maximum allowed value (2^256-1).`, {
            cause
        });
        __publicField(this, "name", "FeeCapTooHigh");
    }
};
__publicField(FeeCapTooHighError, "nodeMessage", /max fee per gas higher than 2\^256-1|fee cap higher than 2\^256-1/);
var FeeCapTooLowError = class extends BaseError {
    constructor({ cause , maxFeePerGas  } = {}){
        super(`The fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)}` : ""} gwei) cannot be lower than the block base fee.`, {
            cause
        });
        __publicField(this, "name", "FeeCapTooLow");
    }
};
__publicField(FeeCapTooLowError, "nodeMessage", /max fee per gas less than block base fee|fee cap less than block base fee|transaction is outdated/);
var NonceTooHighError = class extends BaseError {
    constructor({ cause , nonce  } = {}){
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is higher than the next one expected.`, {
            cause
        });
        __publicField(this, "name", "NonceTooHighError");
    }
};
__publicField(NonceTooHighError, "nodeMessage", /nonce too high/);
var NonceTooLowError = class extends BaseError {
    constructor({ cause , nonce  } = {}){
        super([
            `Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}is lower than the current nonce of the account.`,
            "Try increasing the nonce or find the latest nonce with `getTransactionCount`."
        ].join("\n"), {
            cause
        });
        __publicField(this, "name", "NonceTooLowError");
    }
};
__publicField(NonceTooLowError, "nodeMessage", /nonce too low|transaction already imported/);
var NonceMaxValueError = class extends BaseError {
    constructor({ cause , nonce  } = {}){
        super(`Nonce provided for the transaction ${nonce ? `(${nonce}) ` : ""}exceeds the maximum allowed nonce.`, {
            cause
        });
        __publicField(this, "name", "NonceMaxValueError");
    }
};
__publicField(NonceMaxValueError, "nodeMessage", /nonce has max value/);
var InsufficientFundsError = class extends BaseError {
    constructor({ cause  } = {}){
        super([
            "The total cost (gas * gas fee + value) of executing this transaction exceeds the balance of the account."
        ].join("\n"), {
            cause,
            metaMessages: [
                "This error could arise when the account does not have enough funds to:",
                " - pay for the total gas fee,",
                " - pay for the value to send.",
                " ",
                "The cost of the transaction is calculated as `gas * gas fee + value`, where:",
                " - `gas` is the amount of gas needed for transaction to execute,",
                " - `gas fee` is the gas fee,",
                " - `value` is the amount of ether to send to the recipient."
            ]
        });
        __publicField(this, "name", "InsufficientFundsError");
    }
};
__publicField(InsufficientFundsError, "nodeMessage", /insufficient funds/);
var IntrinsicGasTooHighError = class extends BaseError {
    constructor({ cause , gas  } = {}){
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction exceeds the limit allowed for the block.`, {
            cause
        });
        __publicField(this, "name", "IntrinsicGasTooHighError");
    }
};
__publicField(IntrinsicGasTooHighError, "nodeMessage", /intrinsic gas too high|gas limit reached/);
var IntrinsicGasTooLowError = class extends BaseError {
    constructor({ cause , gas  } = {}){
        super(`The amount of gas ${gas ? `(${gas}) ` : ""}provided for the transaction is too low.`, {
            cause
        });
        __publicField(this, "name", "IntrinsicGasTooLowError");
    }
};
__publicField(IntrinsicGasTooLowError, "nodeMessage", /intrinsic gas too low/);
var TransactionTypeNotSupportedError = class extends BaseError {
    constructor({ cause  }){
        super("The transaction type is not supported for this chain.", {
            cause
        });
        __publicField(this, "name", "TransactionTypeNotSupportedError");
    }
};
__publicField(TransactionTypeNotSupportedError, "nodeMessage", /transaction type not valid/);
var TipAboveFeeCapError = class extends BaseError {
    constructor({ cause , maxPriorityFeePerGas , maxFeePerGas  } = {}){
        super([
            `The provided tip (\`maxPriorityFeePerGas\`${maxPriorityFeePerGas ? ` = ${formatGwei(maxPriorityFeePerGas)} gwei` : ""}) cannot be higher than the fee cap (\`maxFeePerGas\`${maxFeePerGas ? ` = ${formatGwei(maxFeePerGas)} gwei` : ""}).`
        ].join("\n"), {
            cause
        });
        __publicField(this, "name", "TipAboveFeeCapError");
    }
};
__publicField(TipAboveFeeCapError, "nodeMessage", /max priority fee per gas higher than max fee per gas|tip higher than fee cap/);
var UnknownNodeError = class extends BaseError {
    constructor({ cause  }){
        super(`An error occurred while executing: ${cause?.message}`, {
            cause
        });
        __publicField(this, "name", "UnknownNodeError");
    }
};
// src/errors/request.ts
var RequestError = class extends BaseError {
    constructor(err, { docsPath: docsPath5 , metaMessages , shortMessage  }){
        super(shortMessage, {
            cause: err,
            docsPath: docsPath5,
            metaMessages
        });
        this.name = err.name;
    }
};
var RpcRequestError = class extends RequestError {
    constructor(err, { docsPath: docsPath5 , shortMessage  }){
        super(err, {
            docsPath: docsPath5,
            metaMessages: err.metaMessages,
            shortMessage
        });
        __publicField(this, "code");
        this.code = err.code;
        this.name = err.name;
    }
};
var ParseRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
        });
        __publicField(this, "name", "ParseRpcError");
        __publicField(this, "code", -32700);
    }
};
var InvalidRequestRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "JSON is not a valid request object."
        });
        __publicField(this, "name", "InvalidRequestRpcError");
        __publicField(this, "code", -32600);
    }
};
var MethodNotFoundRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "The method does not exist / is not available."
        });
        __publicField(this, "name", "MethodNotFoundRpcError");
        __publicField(this, "code", -32601);
    }
};
var InvalidParamsRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: [
                "Invalid parameters were provided to the RPC method.",
                "Double check you have provided the correct parameters."
            ].join("\n")
        });
        __publicField(this, "name", "InvalidParamsRpcError");
        __publicField(this, "code", -32602);
    }
};
var InternalRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "An internal error was received."
        });
        __publicField(this, "name", "InternalRpcError");
        __publicField(this, "code", -32603);
    }
};
var InvalidInputRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: [
                "Missing or invalid parameters.",
                "Double check you have provided the correct parameters."
            ].join("\n")
        });
        __publicField(this, "name", "InvalidInputRpcError");
        __publicField(this, "code", -32000);
    }
};
var ResourceNotFoundRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Requested resource not found."
        });
        __publicField(this, "name", "ResourceNotFoundRpcError");
        __publicField(this, "code", -32001);
    }
};
var ResourceUnavailableRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Requested resource not available."
        });
        __publicField(this, "name", "ResourceUnavailableRpcError");
        __publicField(this, "code", -32002);
    }
};
var TransactionRejectedRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Transaction creation failed."
        });
        __publicField(this, "name", "TransactionRejectedRpcError");
        __publicField(this, "code", -32003);
    }
};
var MethodNotSupportedRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Method is not implemented."
        });
        __publicField(this, "name", "MethodNotSupportedRpcError");
        __publicField(this, "code", -32004);
    }
};
var LimitExceededRpcError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Request exceeds defined limit."
        });
        __publicField(this, "name", "LimitExceededRpcError");
        __publicField(this, "code", -32005);
    }
};
var JsonRpcVersionUnsupportedError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "Version of JSON-RPC protocol is not supported."
        });
        __publicField(this, "name", "JsonRpcVersionUnsupportedError");
        __publicField(this, "code", -32006);
    }
};
var UserRejectedRequestError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "User rejected the request."
        });
        __publicField(this, "name", "UserRejectedRequestError");
        __publicField(this, "code", 4001);
    }
};
var SwitchChainError = class extends RpcRequestError {
    constructor(err){
        super(err, {
            shortMessage: "An error occurred when attempting to switch chain."
        });
        __publicField(this, "name", "SwitchChainError");
        __publicField(this, "code", 4902);
    }
};
var UnknownRpcError = class extends RequestError {
    constructor(err){
        super(err, {
            shortMessage: "An unknown RPC error occurred."
        });
        __publicField(this, "name", "UnknownRpcError");
    }
};
// src/errors/rpc.ts
var HttpRequestError = class extends BaseError {
    constructor({ body , details , headers , status , url  }){
        super("HTTP request failed.", {
            details,
            metaMessages: [
                status && `Status: ${status}`,
                `URL: ${getUrl(url)}`,
                `Request body: ${stringify(body)}`
            ].filter(Boolean)
        });
        __publicField(this, "name", "HttpRequestError");
        __publicField(this, "body");
        __publicField(this, "headers");
        __publicField(this, "status");
        __publicField(this, "url");
        this.body = body;
        this.headers = headers;
        this.status = status;
        this.url = url;
    }
};
var WebSocketRequestError = class extends BaseError {
    constructor({ body , details , url  }){
        super("WebSocket request failed.", {
            details,
            metaMessages: [
                `URL: ${getUrl(url)}`,
                `Request body: ${stringify(body)}`
            ]
        });
        __publicField(this, "name", "WebSocketRequestError");
    }
};
var RpcError = class extends BaseError {
    constructor({ body , error , url  }){
        super("RPC Request failed.", {
            cause: error,
            details: error.message,
            metaMessages: [
                `URL: ${getUrl(url)}`,
                `Request body: ${stringify(body)}`
            ]
        });
        __publicField(this, "code");
        __publicField(this, "name", "RpcError");
        this.code = error.code;
    }
};
var TimeoutError = class extends BaseError {
    constructor({ body , url  }){
        super("The request took too long to respond.", {
            details: "The request timed out.",
            metaMessages: [
                `URL: ${getUrl(url)}`,
                `Request body: ${stringify(body)}`
            ]
        });
        __publicField(this, "name", "TimeoutError");
    }
};
// src/errors/transport.ts
var UrlRequiredError = class extends BaseError {
    constructor(){
        super("No URL was provided to the Transport. Please provide a valid RPC URL to the Transport.", {
            docsPath: "/docs/clients/intro"
        });
    }
};
// src/utils/data/concat.ts
function concat(values) {
    if (typeof values[0] === "string") return concatHex(values);
    return concatBytes(values);
}
function concatBytes(values) {
    let length = 0;
    for (const arr of values)length += arr.length;
    const result = new Uint8Array(length);
    let offset = 0;
    for (const arr of values){
        result.set(arr, offset);
        offset += arr.length;
    }
    return result;
}
function concatHex(values) {
    return `0x${values.reduce((acc, x)=>acc + x.replace("0x", ""), "")}`;
}
// src/utils/data/isBytes.ts
function isBytes(value) {
    if (!value) return false;
    if (typeof value !== "object") return false;
    if (!("BYTES_PER_ELEMENT" in value)) return false;
    return value.BYTES_PER_ELEMENT === 1 && value.constructor.name === "Uint8Array";
}
// src/utils/data/isHex.ts
function isHex(value) {
    if (!value) return false;
    if (typeof value !== "string") return false;
    return /^0x[0-9a-fA-F]*$/.test(value);
}
// src/utils/data/pad.ts
function pad(hexOrBytes, { dir , size: size2 = 32  } = {}) {
    if (typeof hexOrBytes === "string") return padHex(hexOrBytes, {
        dir,
        size: size2
    });
    return padBytes(hexOrBytes, {
        dir,
        size: size2
    });
}
function padHex(hex_, { dir , size: size2 = 32  } = {}) {
    if (size2 === null) return hex_;
    let hex = hex_.replace("0x", "");
    if (hex.length > size2 * 2) throw new SizeExceedsPaddingSizeError({
        size: Math.ceil(hex.length / 2),
        targetSize: size2,
        type: "hex"
    });
    return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size2 * 2, "0")}`;
}
function padBytes(bytes, { dir , size: size2 = 32  } = {}) {
    if (size2 === null) return bytes;
    if (bytes.length > size2) throw new SizeExceedsPaddingSizeError({
        size: bytes.length,
        targetSize: size2,
        type: "bytes"
    });
    const paddedBytes = new Uint8Array(size2);
    for(let i = 0; i < size2; i++){
        const padEnd = dir === "right";
        paddedBytes[padEnd ? i : size2 - i - 1] = bytes[padEnd ? i : bytes.length - i - 1];
    }
    return paddedBytes;
}
// src/utils/data/trim.ts
function trim(hexOrBytes, { dir ="left"  } = {}) {
    let data = typeof hexOrBytes === "string" ? hexOrBytes.replace("0x", "") : hexOrBytes;
    let sliceLength = 0;
    for(let i = 0; i < data.length - 1; i++){
        if (data[dir === "left" ? i : data.length - i - 1].toString() === "0") sliceLength++;
        else break;
    }
    data = dir === "left" ? data.slice(sliceLength) : data.slice(0, data.length - sliceLength);
    if (typeof hexOrBytes === "string") {
        if (data.length === 1 && dir === "right") data = `${data}0`;
        return `0x${data}`;
    }
    return data;
}
// src/utils/data/size.ts
function size(value) {
    if (isHex(value)) return Math.ceil((value.length - 2) / 2);
    return value.length;
}
// src/utils/data/slice.ts
function slice(value, start, end) {
    if (isHex(value)) return sliceHex(value, start, end);
    return sliceBytes(value, start, end);
}
function assertStartOffset(value, start) {
    if (typeof start === "number" && start > 0 && start > size(value) - 1) throw new Error(`Slice starting at offset "${start}" is out-of-bounds (size: ${size(value)}).`);
}
function sliceBytes(value, start, end) {
    assertStartOffset(value, start);
    return value.slice(start, end);
}
function sliceHex(value_, start, end) {
    assertStartOffset(value_, start);
    const value = value_.replace("0x", "").slice((start ?? 0) * 2, (end ?? value_.length) * 2);
    return `0x${value}`;
}
// src/utils/encoding/toHex.ts
var hexes = Array.from({
    length: 256
}, (_v, i)=>i.toString(16).padStart(2, "0"));
function boolToHex(value) {
    return `0x${Number(value)}`;
}
function bytesToHex(value) {
    let hex = "";
    for(let i = 0; i < value.length; i++)hex += hexes[value[i]];
    return `0x${hex}`;
}
function toHex(value) {
    if (typeof value === "number" || typeof value === "bigint") return numberToHex(value);
    if (typeof value === "string") return stringToHex(value);
    if (typeof value === "boolean") return boolToHex(value);
    return bytesToHex(value);
}
function numberToHex(value_, opts = {}) {
    const { signed , size: size2  } = opts;
    let value = BigInt(value_);
    let maxValue;
    if (size2) {
        if (signed) maxValue = (1n << BigInt(size2) * 8n - 1n) - 1n;
        else maxValue = 2n ** (BigInt(size2) * 8n) - 1n;
    } else if (typeof value_ === "number") maxValue = BigInt(Number.MAX_SAFE_INTEGER);
    const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
    if (maxValue && value > maxValue || value < minValue) {
        const suffix = typeof value_ === "bigint" ? "n" : "";
        throw new Error(`Number "${value_}${suffix}" is not in safe ${size2 ? `${size2 * 8}-bit ${signed ? "signed" : "unsigned"} ` : ""}integer range ${maxValue ? `(${minValue}${suffix} to ${maxValue}${suffix})` : `(above ${minValue})`}`);
    }
    const hex = `0x${(signed && value < 0 ? (1n << BigInt(size2 * 8)) + BigInt(value) : value).toString(16)}`;
    if (size2) return pad(hex, {
        size: size2
    });
    return hex;
}
var encoder = new TextEncoder();
function stringToHex(value_) {
    const value = encoder.encode(value_);
    return toHex(value);
}
// src/utils/encoding/toBytes.ts
var encoder2 = new TextEncoder();
function toBytes(value) {
    if (typeof value === "number" || typeof value === "bigint") return numberToBytes(value);
    if (typeof value === "boolean") return boolToBytes(value);
    if (value.startsWith("0x")) return hexToBytes(value);
    return stringToBytes(value);
}
function boolToBytes(value) {
    const bytes = new Uint8Array(1);
    bytes[0] = Number(value);
    return bytes;
}
function hexToBytes(hex_) {
    let hex = hex_.slice(2);
    if (hex.length % 2) hex = `0${hex}`;
    const bytes = new Uint8Array(hex.length / 2);
    for(let index = 0; index < bytes.length; index++){
        const start = index * 2;
        const hexByte = hex.slice(start, start + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new BaseError(`Invalid byte sequence ("${hexByte}" in "${hex}").`);
        bytes[index] = byte;
    }
    return bytes;
}
function numberToBytes(value, opts) {
    const hex = numberToHex(value, opts);
    return hexToBytes(hex);
}
function stringToBytes(value) {
    return encoder2.encode(value);
}
// src/utils/encoding/toRlp.ts
function toRlp(hexOrBytes, to_) {
    const to = to_ || "hex";
    return format(bytesToRlp(parse(hexOrBytes)), to);
}
function parse(hexOrBytes) {
    if (Array.isArray(hexOrBytes)) return hexOrBytes.map(parse);
    return typeof hexOrBytes === "string" ? toBytes(hexOrBytes) : hexOrBytes;
}
function format(bytes, type = "bytes") {
    return type === "hex" ? bytesToHex(bytes) : bytes;
}
function bytesToRlp(bytes) {
    if (Array.isArray(bytes)) {
        const encoded = concat(bytes.map(bytesToRlp));
        return new Uint8Array([
            ...encodeLength(encoded.length, 192),
            ...encoded
        ]);
    }
    if (bytes.length === 1 && bytes[0] < 128) return bytes;
    return new Uint8Array([
        ...encodeLength(bytes.length, 128),
        ...bytes
    ]);
}
function encodeLength(length, offset) {
    if (length < 56) return [
        offset + length
    ];
    return [
        toBytes(length).length + offset + 55,
        ...toBytes(length)
    ];
}
// src/utils/encoding/fromHex.ts
function fromHex(hex, to) {
    if (to === "number") return hexToNumber(hex);
    if (to === "bigint") return hexToBigInt(hex);
    if (to === "string") return hexToString(hex);
    if (to === "boolean") return hexToBool(hex);
    return hexToBytes(hex);
}
function hexToBigInt(hex, opts = {}) {
    const { signed  } = opts;
    const value = BigInt(hex);
    if (!signed) return value;
    const size2 = (hex.length - 2) / 2;
    const max = (1n << BigInt(size2) * 8n - 1n) - 1n;
    if (value <= max) return value;
    return value - BigInt(`0x${"f".padStart(size2 * 2, "f")}`) - 1n;
}
function hexToBool(hex) {
    if (trim(hex) === "0x0") return false;
    if (trim(hex) === "0x1") return true;
    throw new InvalidHexBooleanError(hex);
}
function hexToNumber(hex, opts = {}) {
    return Number(hexToBigInt(hex, opts));
}
function hexToString(hex) {
    const bytes = hexToBytes(hex);
    return new TextDecoder().decode(bytes);
}
// src/utils/encoding/fromBytes.ts
function fromBytes(bytes, to) {
    if (to === "number") return bytesToNumber(bytes);
    if (to === "bigint") return bytesToBigint(bytes);
    if (to === "boolean") return bytesToBool(bytes);
    if (to === "string") return bytesToString(bytes);
    return bytesToHex(bytes);
}
function bytesToBigint(bytes) {
    const hex = bytesToHex(bytes);
    return hexToBigInt(hex);
}
function bytesToBool(bytes) {
    if (bytes.length > 1 || bytes[0] > 1) throw new InvalidBytesBooleanError(bytes);
    return Boolean(bytes[0]);
}
function bytesToNumber(bytes) {
    const hex = bytesToHex(bytes);
    return hexToNumber(hex);
}
function bytesToString(bytes) {
    return new TextDecoder().decode(bytes);
}
// src/utils/encoding/fromRlp.ts
function fromRlp(value, to) {
    const bytes = parse2(value);
    const [data, consumed] = rlpToBytes(bytes);
    if (consumed < bytes.length) throw new DataLengthTooLongError({
        consumed,
        length: bytes.length
    });
    return format2(data, to);
}
function parse2(value) {
    if (typeof value === "string") {
        if (value.length > 3 && value.length % 2 !== 0) throw new InvalidHexValueError(value);
        return hexToBytes(value);
    }
    return value;
}
function format2(bytes, to) {
    if (Array.isArray(bytes)) return bytes.map((b)=>format2(b, to));
    return to === "hex" ? trim(bytesToHex(bytes)) : bytes;
}
function rlpToBytes(bytes, offset = 0) {
    if (bytes.length === 0) return [
        new Uint8Array([]),
        0
    ];
    const prefix = bytes[offset];
    if (prefix <= 127) return [
        new Uint8Array([
            bytes[offset]
        ]),
        1
    ];
    if (prefix <= 183) {
        const length2 = prefix - 128;
        const offset_ = offset + 1;
        if (offset_ + length2 > bytes.length) throw new DataLengthTooShortError({
            length: offset_ + length2,
            dataLength: bytes.length
        });
        return [
            bytes.slice(offset_, offset_ + length2),
            1 + length2
        ];
    }
    if (prefix <= 191) {
        const lengthOfLength2 = prefix - 183;
        const offset_ = offset + 1;
        const length2 = bytesToNumber(bytes.slice(offset_, offset_ + lengthOfLength2));
        if (offset_ + lengthOfLength2 + length2 > bytes.length) throw new DataLengthTooShortError({
            length: lengthOfLength2 + length2,
            dataLength: bytes.length - lengthOfLength2
        });
        return [
            bytes.slice(offset_ + lengthOfLength2, offset_ + lengthOfLength2 + length2),
            1 + lengthOfLength2 + length2
        ];
    }
    let lengthOfLength = 0;
    let length = prefix - 192;
    if (prefix > 247) {
        lengthOfLength = prefix - 247;
        length = bytesToNumber(bytes.slice(offset + 1, offset + 1 + lengthOfLength));
    }
    let nextOffset = offset + 1 + lengthOfLength;
    if (nextOffset > bytes.length) throw new DataLengthTooShortError({
        length: nextOffset,
        dataLength: bytes.length
    });
    let consumed = 1 + lengthOfLength + length;
    let result = [];
    while(nextOffset < offset + consumed){
        const decoded = rlpToBytes(bytes, nextOffset);
        result.push(decoded[0]);
        nextOffset += decoded[1];
        if (nextOffset > offset + consumed) throw new OffsetOutOfBoundsError({
            nextOffset,
            offset: offset + consumed
        });
    }
    return [
        result,
        consumed
    ];
}
// src/utils/contract/extractFunctionParts.ts
var paramsRegex = /((function|event)\s)?(.*)(\((.*)\))/;
function extractFunctionParts(def) {
    const parts = def.match(paramsRegex);
    const type = parts?.[2] || void 0;
    const name = parts?.[3];
    const params = parts?.[5] || void 0;
    return {
        type,
        name,
        params
    };
}
function extractFunctionName(def) {
    return extractFunctionParts(def).name;
}
function extractFunctionParams(def) {
    const params = extractFunctionParts(def).params;
    const splitParams = params?.split(",").map((x)=>x.trim().split(" "));
    return splitParams?.map((param)=>({
            type: param[0],
            name: param[1] === "indexed" ? param[2] : param[1],
            ...param[1] === "indexed" ? {
                indexed: true
            } : {}
        }));
}
function extractFunctionType(def) {
    return extractFunctionParts(def).type;
}
function keccak256(value, to_) {
    const to = to_ || "hex";
    const bytes = (0, _sha3.keccak_256)(isHex(value) ? toBytes(value) : value);
    if (to === "bytes") return bytes;
    return toHex(bytes);
}
// src/utils/hash/hashFunction.ts
var hash = (value)=>keccak256(toBytes(value));
function hashFunction(def) {
    const name = extractFunctionName(def);
    const params = extractFunctionParams(def);
    if (!params || params.length === 0) return hash(def.replace(/ /g, ""));
    return hash(`${name}(${params.map(({ type  })=>type).join(",")})`);
}
// src/utils/hash/getEventSelector.ts
var getEventSelector = (event)=>hashFunction(event);
// src/utils/hash/getFunctionSelector.ts
var getFunctionSelector = (fn)=>slice(hashFunction(fn), 0, 4);
// src/utils/address/isAddress.ts
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function isAddress(address) {
    return addressRegex.test(address);
}
// src/utils/address/getAddress.ts
function checksumAddress(address_) {
    const hexAddress = address_.substring(2).toLowerCase();
    const hash2 = keccak256(stringToBytes(hexAddress), "bytes");
    let address = hexAddress.split("");
    for(let i = 0; i < 40; i += 2){
        if (hash2[i >> 1] >> 4 >= 8 && address[i]) address[i] = address[i].toUpperCase();
        if ((hash2[i >> 1] & 15) >= 8 && address[i + 1]) address[i + 1] = address[i + 1].toUpperCase();
    }
    return `0x${address.join("")}`;
}
function getAddress(address) {
    if (!isAddress(address)) throw new InvalidAddressError({
        address
    });
    return checksumAddress(address);
}
// src/utils/address/getContractAddress.ts
function getContractAddress2(opts) {
    if (opts.opcode === "CREATE2") return getCreate2Address(opts);
    return getCreateAddress(opts);
}
function getCreateAddress(opts) {
    const from = toBytes(getAddress(opts.from));
    let nonce = toBytes(opts.nonce);
    if (nonce[0] === 0) nonce = new Uint8Array([]);
    return getAddress(`0x${keccak256(toRlp([
        from,
        nonce
    ], "bytes")).slice(26)}`);
}
function getCreate2Address(opts) {
    const from = toBytes(getAddress(opts.from));
    const salt = pad(isBytes(opts.salt) ? opts.salt : toBytes(opts.salt), {
        size: 32
    });
    const bytecodeHash = toBytes(keccak256(isBytes(opts.bytecode) ? opts.bytecode : toBytes(opts.bytecode)));
    return getAddress(slice(keccak256(concat([
        toBytes("0xff"),
        from,
        salt,
        bytecodeHash
    ])), 12));
}
// src/utils/address/isAddressEqual.ts
function isAddressEqual(a, b) {
    if (!isAddress(a)) throw new InvalidAddressError({
        address: a
    });
    if (!isAddress(b)) throw new InvalidAddressError({
        address: b
    });
    return a.toLowerCase() === b.toLowerCase();
}
// src/utils/abi/encodeAbiParameters.ts
function encodeAbiParameters(params, values) {
    if (params.length !== values.length) throw new AbiEncodingLengthMismatchError({
        expectedLength: params.length,
        givenLength: values.length
    });
    const preparedParams = prepareParams({
        params,
        values
    });
    const data = encodeParams(preparedParams);
    if (data.length === 0) return "0x";
    return data;
}
function prepareParams({ params , values  }) {
    let preparedParams = [];
    for(let i = 0; i < params.length; i++)preparedParams.push(prepareParam({
        param: params[i],
        value: values[i]
    }));
    return preparedParams;
}
function prepareParam({ param , value  }) {
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents) {
        const [length, type] = arrayComponents;
        return encodeArray(value, {
            length,
            param: {
                ...param,
                type
            }
        });
    }
    if (param.type === "tuple") return encodeTuple(value, {
        param
    });
    if (param.type === "address") return encodeAddress(value);
    if (param.type === "bool") return encodeBool(value);
    if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        const signed = param.type.startsWith("int");
        return encodeNumber(value, {
            signed
        });
    }
    if (param.type.startsWith("bytes")) return encodeBytes(value, {
        param
    });
    if (param.type === "string") return encodeString(value);
    throw new InvalidAbiEncodingTypeError(param.type, {
        docsPath: "/docs/contract/encodeAbiParameters"
    });
}
function encodeParams(preparedParams) {
    let staticSize = 0;
    for(let i = 0; i < preparedParams.length; i++){
        const { dynamic , encoded  } = preparedParams[i];
        if (dynamic) staticSize += 32;
        else staticSize += size(encoded);
    }
    let staticParams = [];
    let dynamicParams = [];
    let dynamicSize = 0;
    for(let i = 0; i < preparedParams.length; i++){
        const { dynamic , encoded  } = preparedParams[i];
        if (dynamic) {
            staticParams.push(numberToHex(staticSize + dynamicSize, {
                size: 32
            }));
            dynamicParams.push(encoded);
            dynamicSize += size(encoded);
        } else staticParams.push(encoded);
    }
    return concat([
        ...staticParams,
        ...dynamicParams
    ]);
}
function encodeAddress(value) {
    if (!isAddress(value)) throw new InvalidAddressError({
        address: value
    });
    return {
        dynamic: false,
        encoded: padHex(value.toLowerCase())
    };
}
function encodeArray(value, { length , param  }) {
    let dynamic = length === null;
    if (!Array.isArray(value)) throw new InvalidArrayError(value);
    if (!dynamic && value.length !== length) throw new AbiEncodingArrayLengthMismatchError({
        expectedLength: length,
        givenLength: value.length,
        type: `${param.type}[${length}]`
    });
    let dynamicChild = false;
    let preparedParams = [];
    for(let i = 0; i < value.length; i++){
        const preparedParam = prepareParam({
            param,
            value: value[i]
        });
        if (preparedParam.dynamic) dynamicChild = true;
        preparedParams.push(preparedParam);
    }
    if (dynamic || dynamicChild) {
        const data = encodeParams(preparedParams);
        if (dynamic) {
            const length2 = numberToHex(preparedParams.length, {
                size: 32
            });
            return {
                dynamic: true,
                encoded: preparedParams.length > 0 ? concat([
                    length2,
                    data
                ]) : length2
            };
        }
        if (dynamicChild) return {
            dynamic: true,
            encoded: data
        };
    }
    return {
        dynamic: false,
        encoded: concat(preparedParams.map(({ encoded  })=>encoded))
    };
}
function encodeBytes(value, { param  }) {
    const [_, size_] = param.type.split("bytes");
    if (!size_) {
        const partsLength = Math.ceil(size(value) / 32);
        const parts = [];
        for(let i = 0; i < partsLength; i++)parts.push(padHex(slice(value, i * 32, (i + 1) * 32), {
            dir: "right"
        }));
        return {
            dynamic: true,
            encoded: concat([
                padHex(numberToHex(size(value), {
                    size: 32
                })),
                ...parts
            ])
        };
    }
    if (size(value) !== parseInt(size_)) throw new AbiEncodingBytesSizeMismatchError({
        expectedSize: parseInt(size_),
        value
    });
    return {
        dynamic: false,
        encoded: padHex(value, {
            dir: "right"
        })
    };
}
function encodeBool(value) {
    return {
        dynamic: false,
        encoded: padHex(boolToHex(value))
    };
}
function encodeNumber(value, { signed  }) {
    return {
        dynamic: false,
        encoded: numberToHex(value, {
            size: 32,
            signed
        })
    };
}
function encodeString(value) {
    const hexValue = stringToHex(value);
    const partsLength = Math.ceil(size(hexValue) / 32);
    const parts = [];
    for(let i = 0; i < partsLength; i++)parts.push(padHex(slice(hexValue, i * 32, (i + 1) * 32), {
        dir: "right"
    }));
    return {
        dynamic: true,
        encoded: concat([
            padHex(numberToHex(size(hexValue), {
                size: 32
            })),
            ...parts
        ])
    };
}
function encodeTuple(value, { param  }) {
    let dynamic = false;
    let preparedParams = [];
    for(let i = 0; i < param.components.length; i++){
        const param_ = param.components[i];
        const index = Array.isArray(value) ? i : param_.name;
        const preparedParam = prepareParam({
            param: param_,
            value: value[index]
        });
        preparedParams.push(preparedParam);
        if (preparedParam.dynamic) dynamic = true;
    }
    return {
        dynamic,
        encoded: dynamic ? encodeParams(preparedParams) : concat(preparedParams.map(({ encoded  })=>encoded))
    };
}
function getArrayComponents(type) {
    const matches = type.match(/^(.*)\[(\d+)?\]$/);
    return matches ? // Return `null` if the array is dynamic.
    [
        matches[2] ? Number(matches[2]) : null,
        matches[1]
    ] : void 0;
}
// src/utils/abi/decodeAbiParameters.ts
function decodeAbiParameters(params, data) {
    if (data === "0x" && params.length > 0) throw new AbiDecodingZeroDataError();
    if (size(data) % 32 !== 0) throw new AbiDecodingDataSizeInvalidError(size(data));
    return decodeParams({
        data,
        params
    });
}
function decodeParams({ data , params  }) {
    let decodedValues = [];
    let position = 0;
    for(let i = 0; i < params.length; i++){
        const param = params[i];
        const { consumed , value  } = decodeParam({
            data,
            param,
            position
        });
        decodedValues.push(value);
        position += consumed;
    }
    return decodedValues;
}
function decodeParam({ data , param , position  }) {
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents) {
        const [length, type] = arrayComponents;
        return decodeArray(data, {
            length,
            param: {
                ...param,
                type
            },
            position
        });
    }
    if (param.type === "tuple") return decodeTuple(data, {
        param,
        position
    });
    if (param.type === "string") return decodeString(data, {
        position
    });
    if (param.type.startsWith("bytes")) return decodeBytes(data, {
        param,
        position
    });
    let value = slice(data, position, position + 32);
    if (param.type.startsWith("uint") || param.type.startsWith("int")) return decodeNumber(value, {
        param
    });
    if (param.type === "address") return decodeAddress(value);
    if (param.type === "bool") return decodeBool(value);
    throw new InvalidAbiDecodingTypeError(param.type, {
        docsPath: "/docs/contract/decodeAbiParameters"
    });
}
function decodeAddress(value) {
    return {
        consumed: 32,
        value: checksumAddress(slice(value, -20))
    };
}
function decodeArray(data, { param , length , position  }) {
    if (!length) {
        const offset = hexToNumber(slice(data, position, position + 32));
        const length2 = hexToNumber(slice(data, offset, offset + 32));
        let consumed2 = 0;
        let value2 = [];
        for(let i = 0; i < length2; ++i){
            const decodedChild = decodeParam({
                data: slice(data, offset + 32),
                param,
                position: consumed2
            });
            consumed2 += decodedChild.consumed;
            value2.push(decodedChild.value);
        }
        return {
            value: value2,
            consumed: 32
        };
    }
    if (hasDynamicChild(param)) {
        const arrayComponents = getArrayComponents(param.type);
        const dynamicChild = !arrayComponents?.[0];
        let consumed2 = 0;
        let value2 = [];
        for(let i = 0; i < length; ++i){
            const offset = hexToNumber(slice(data, position, position + 32));
            const decodedChild = decodeParam({
                data: slice(data, offset),
                param,
                position: dynamicChild ? consumed2 : i * 32
            });
            consumed2 += decodedChild.consumed;
            value2.push(decodedChild.value);
        }
        return {
            value: value2,
            consumed: consumed2
        };
    }
    let consumed = 0;
    let value = [];
    for(let i = 0; i < length; ++i){
        const decodedChild = decodeParam({
            data,
            param,
            position: position + consumed
        });
        consumed += decodedChild.consumed;
        value.push(decodedChild.value);
    }
    return {
        value,
        consumed
    };
}
function decodeBool(value) {
    return {
        consumed: 32,
        value: hexToBool(value)
    };
}
function decodeBytes(data, { param , position  }) {
    const [_, size2] = param.type.split("bytes");
    if (!size2) {
        const offset = hexToNumber(slice(data, position, position + 32));
        const length = hexToNumber(slice(data, offset, offset + 32));
        const value2 = // If there is no length, we have zero data.
        length === 0 ? "0x" : slice(data, offset + 32, offset + 32 + length);
        return {
            consumed: 32,
            value: value2
        };
    }
    const value = slice(data, position, position + parseInt(size2));
    return {
        consumed: 32,
        value
    };
}
function decodeNumber(value, { param  }) {
    const signed = param.type.startsWith("int");
    const size2 = parseInt(param.type.split("int")[1] || "256");
    return {
        consumed: 32,
        value: size2 > 48 ? hexToBigInt(value, {
            signed
        }) : hexToNumber(value, {
            signed
        })
    };
}
function decodeString(data, { position  }) {
    const offset = hexToNumber(slice(data, position, position + 32));
    const length = hexToNumber(slice(data, offset, offset + 32));
    const value = hexToString(trim(slice(data, offset + 32, offset + 32 + length)));
    return {
        consumed: 32,
        value
    };
}
function decodeTuple(data, { param , position  }) {
    const hasUnnamedChild = param.components.length === 0 || param.components.some(({ name  })=>!name);
    let value = hasUnnamedChild ? [] : {};
    let consumed = 0;
    if (hasDynamicChild(param)) {
        const offset = hexToNumber(slice(data, position, position + 32));
        for(let i = 0; i < param.components.length; ++i){
            const component = param.components[i];
            const decodedChild = decodeParam({
                data: slice(data, offset),
                param: component,
                position: consumed
            });
            consumed += decodedChild.consumed;
            value[hasUnnamedChild ? i : component?.name] = decodedChild.value;
        }
        return {
            consumed: 32,
            value
        };
    }
    for(let i = 0; i < param.components.length; ++i){
        const component = param.components[i];
        const decodedChild = decodeParam({
            data,
            param: component,
            position: position + consumed
        });
        consumed += decodedChild.consumed;
        value[hasUnnamedChild ? i : component?.name] = decodedChild.value;
    }
    return {
        consumed,
        value
    };
}
function hasDynamicChild(param) {
    const { type  } = param;
    if (type === "string") return true;
    if (type === "bytes") return true;
    if (type.endsWith("[]")) return true;
    if (type === "tuple") return param.components?.some(hasDynamicChild);
    const arrayComponents = getArrayComponents(param.type);
    if (arrayComponents && hasDynamicChild({
        ...param,
        type: arrayComponents[1]
    })) return true;
    return false;
}
// src/utils/abi/formatAbiItem.ts
function formatAbiItem(abiItem, { includeName =false  } = {}) {
    if (abiItem.type !== "function" && abiItem.type !== "event" && abiItem.type !== "error") throw new InvalidDefinitionTypeError(abiItem.type);
    return `${abiItem.name}(${getParams(abiItem.inputs, {
        includeName
    })})`;
}
function getParams(params, { includeName  }) {
    if (!params) return "";
    return params.map((param)=>getParam(param, {
            includeName
        })).join(includeName ? ", " : ",");
}
function getParam(param, { includeName  }) {
    if (param.type.startsWith("tuple")) return `(${getParams(param.components, {
        includeName
    })})${param.type.slice(5)}`;
    return param.type + (includeName && param.name ? ` ${param.name}` : "");
}
// src/utils/abi/decodeErrorResult.ts
function decodeErrorResult({ abi , data  }) {
    const signature = slice(data, 0, 4);
    if (signature === "0x") throw new AbiDecodingZeroDataError();
    const abi_ = [
        ...abi || [],
        solidityError,
        solidityPanic
    ];
    const abiItem = abi_.find((x)=>x.type === "error" && signature === getFunctionSelector(formatAbiItem(x)));
    if (!abiItem) throw new AbiErrorSignatureNotFoundError(signature, {
        docsPath: "/docs/contract/decodeErrorResult"
    });
    return {
        abiItem,
        args: "inputs" in abiItem && abiItem.inputs && abiItem.inputs.length > 0 ? decodeAbiParameters(abiItem.inputs, slice(data, 4)) : void 0,
        errorName: abiItem.name
    };
}
// src/utils/abi/decodeEventLog.ts
function decodeEventLog({ abi , data , topics  }) {
    const [signature, ...argTopics] = topics;
    const abiItem = abi.find((x)=>signature === getEventSelector(formatAbiItem(x)));
    if (!(abiItem && "name" in abiItem)) throw new AbiEventSignatureNotFoundError(signature, {
        docsPath: "/docs/contract/decodeEventLog"
    });
    const { name , inputs  } = abiItem;
    const isUnnamed = inputs?.some((x)=>!("name" in x && x.name));
    let args = isUnnamed ? [] : {};
    for(let i = 0; i < inputs.length; i++){
        const param = inputs[i];
        const topic = argTopics[i];
        if (topic === null) args[param.name || i] = null;
        if (!topic) continue;
        if (Array.isArray(topic)) args[param.name || i] = topic.map((t)=>decodeTopic({
                param,
                value: t
            }));
        else args[param.name || i] = decodeTopic({
            param,
            value: topic
        });
    }
    if (data && data !== "0x") {
        const params = inputs.filter((x)=>!("indexed" in x && x.indexed));
        const decodedData = decodeAbiParameters(params, data);
        if (decodedData) {
            if (isUnnamed) args = [
                ...args,
                ...decodedData
            ];
            else for(let i = 0; i < params.length; i++)args[params[i].name] = decodedData[i];
        }
    }
    return {
        eventName: name,
        args: Object.values(args).length > 0 ? args : void 0
    };
}
function decodeTopic({ param , value  }) {
    if (param.type === "string" || param.type === "bytes" || param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/)) return value;
    const decodedArg = decodeAbiParameters([
        param
    ], value) || [];
    return decodedArg[0];
}
// src/utils/abi/decodeFunctionData.ts
function decodeFunctionData({ abi , data  }) {
    const signature = slice(data, 0, 4);
    const description = abi.find((x)=>signature === getFunctionSelector(formatAbiItem(x)));
    if (!description) throw new AbiFunctionSignatureNotFoundError(signature, {
        docsPath: "/docs/contract/decodeFunctionData"
    });
    return {
        functionName: description.name,
        args: "inputs" in description && description.inputs && description.inputs.length > 0 ? decodeAbiParameters(description.inputs, slice(data, 4)) : void 0
    };
}
// src/utils/abi/getAbiItem.ts
function getAbiItem({ abi , args =[] , name  }) {
    const abiItems = abi.filter((x)=>"name" in x && x.name === name);
    if (abiItems.length === 0) return void 0;
    if (abiItems.length === 1) return abiItems[0];
    for (const abiItem of abiItems){
        if (!("inputs" in abiItem)) continue;
        if (!args || args.length === 0) {
            if (!abiItem.inputs || abiItem.inputs.length === 0) return abiItem;
            continue;
        }
        if (!abiItem.inputs) continue;
        if (abiItem.inputs.length === 0) continue;
        const matched = args.every((arg, index)=>{
            const abiParameter = "inputs" in abiItem && abiItem.inputs[index];
            if (!abiParameter) return false;
            return isArgOfType(arg, abiParameter);
        });
        if (matched) return abiItem;
    }
    return abiItems[0];
}
function isArgOfType(arg, abiParameter) {
    const argType = typeof arg;
    const abiParameterType = abiParameter.type;
    switch(abiParameterType){
        case "address":
            return isAddress(arg);
        case "bool":
            return argType === "boolean";
        case "function":
            return argType === "string";
        case "string":
            return argType === "string";
        default:
            if (abiParameterType === "tuple" && "components" in abiParameter) return Object.values(abiParameter.components).every((component, index)=>{
                return isArgOfType(Object.values(arg)[index], component);
            });
            if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType)) return argType === "number" || argType === "bigint";
            if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType)) return argType === "string" || arg instanceof Uint8Array;
            if (/[a-z]+[1-9]{0,3}(\[[0-9]{0,}\])+$/.test(abiParameterType)) return Array.isArray(arg) && arg.every((x)=>isArgOfType(x, {
                    ...abiParameter,
                    // Pop off `[]` or `[M]` from end of type
                    type: abiParameterType.replace(/(\[[0-9]{0,}\])$/, "")
                }));
            return false;
    }
}
// src/utils/abi/decodeFunctionResult.ts
var docsPath = "/docs/contract/decodeFunctionResult";
function decodeFunctionResult({ abi , args , functionName , data  }) {
    const description = getAbiItem({
        abi,
        args,
        name: functionName
    });
    if (!description) throw new AbiFunctionNotFoundError(functionName, {
        docsPath
    });
    if (!("outputs" in description)) throw new AbiFunctionOutputsNotFoundError(functionName, {
        docsPath
    });
    const values = decodeAbiParameters(description.outputs, data);
    if (values && values.length > 1) return values;
    if (values && values.length === 1) return values[0];
    return void 0;
}
// src/utils/abi/encodeDeployData.ts
var docsPath2 = "/docs/contract/encodeDeployData";
function encodeDeployData({ abi , args , bytecode  }) {
    if (!args || args.length === 0) return bytecode;
    const description = abi.find((x)=>"type" in x && x.type === "constructor");
    if (!description) throw new AbiConstructorNotFoundError({
        docsPath: docsPath2
    });
    if (!("inputs" in description)) throw new AbiConstructorParamsNotFoundError({
        docsPath: docsPath2
    });
    if (!description.inputs || description.inputs.length === 0) throw new AbiConstructorParamsNotFoundError({
        docsPath: docsPath2
    });
    const data = encodeAbiParameters(description.inputs, args);
    return concatHex([
        bytecode,
        data
    ]);
}
// src/utils/abi/encodeErrorResult.ts
var docsPath3 = "/docs/contract/encodeErrorResult";
function encodeErrorResult({ abi , errorName , args  }) {
    const description = getAbiItem({
        abi,
        args,
        name: errorName
    });
    if (!description) throw new AbiErrorNotFoundError(errorName, {
        docsPath: docsPath3
    });
    const definition = formatAbiItem(description);
    const signature = getFunctionSelector(definition);
    let data = "0x";
    if (args && args.length > 0) {
        if (!("inputs" in description && description.inputs)) throw new AbiErrorInputsNotFoundError(errorName, {
            docsPath: docsPath3
        });
        data = encodeAbiParameters(description.inputs, args);
    }
    return concatHex([
        signature,
        data
    ]);
}
// src/utils/abi/encodeEventTopics.ts
function encodeEventTopics({ abi , eventName , args  }) {
    const abiItem = getAbiItem({
        abi,
        args,
        name: eventName
    });
    if (!abiItem) throw new AbiEventNotFoundError(eventName, {
        docsPath: "/docs/contract/encodeEventTopics"
    });
    const definition = formatAbiItem(abiItem);
    const signature = getEventSelector(definition);
    let topics = [];
    if (args && "inputs" in abiItem) {
        const args_ = Array.isArray(args) ? args : abiItem.inputs?.map((x)=>args[x.name]) ?? [];
        topics = abiItem.inputs?.filter((param)=>"indexed" in param && param.indexed).map((param, i)=>Array.isArray(args_[i]) ? args_[i].map((_, j)=>encodeArg({
                    param,
                    value: args_[i][j]
                })) : args_[i] ? encodeArg({
                param,
                value: args_[i]
            }) : null) ?? [];
    }
    return [
        signature,
        ...topics
    ];
}
function encodeArg({ param , value  }) {
    if (param.type === "string" || param.type === "bytes") return keccak256(toBytes(value));
    if (param.type === "tuple" || param.type.match(/^(.*)\[(\d+)?\]$/)) throw new FilterTypeNotSupportedError(param.type);
    return encodeAbiParameters([
        param
    ], [
        value
    ]);
}
// src/utils/abi/encodeFunctionData.ts
function encodeFunctionData({ abi , args , functionName  }) {
    const description = getAbiItem({
        abi,
        args,
        name: functionName
    });
    if (!description) throw new AbiFunctionNotFoundError(functionName, {
        docsPath: "/docs/contract/encodeFunctionData"
    });
    const definition = formatAbiItem(description);
    const signature = getFunctionSelector(definition);
    const data = "inputs" in description && description.inputs ? encodeAbiParameters(description.inputs, args ?? []) : void 0;
    return concatHex([
        signature,
        data ?? "0x"
    ]);
}
// src/utils/abi/encodeFunctionResult.ts
var docsPath4 = "/docs/contract/encodeFunctionResult";
function encodeFunctionResult({ abi , functionName , result  }) {
    const description = abi.find((x)=>"name" in x && x.name === functionName);
    if (!description) throw new AbiFunctionNotFoundError(functionName, {
        docsPath: docsPath4
    });
    if (!("outputs" in description)) throw new AbiFunctionOutputsNotFoundError(functionName, {
        docsPath: docsPath4
    });
    let values = Array.isArray(result) ? result : [
        result
    ];
    if (description.outputs.length === 0 && !values[0]) values = [];
    return encodeAbiParameters(description.outputs, values);
}
// src/utils/regex.ts
var arrayRegex = /^(.*)\[([0-9]*)\]$/;
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
// src/utils/abi/encodePacked.ts
function encodePacked(types, values) {
    if (types.length !== values.length) throw new AbiEncodingLengthMismatchError({
        expectedLength: types.length,
        givenLength: values.length
    });
    let data = [];
    for(let i = 0; i < types.length; i++){
        const type = types[i];
        const value = values[i];
        data.push(encode(type, value));
    }
    return concat(data);
}
function encode(type, value, isArray = false) {
    if (type === "address") {
        let address = value;
        if (!isAddress(address)) throw new InvalidAddressError({
            address
        });
        return pad(address.toLowerCase(), {
            size: isArray ? 32 : null
        });
    }
    if (type === "string") return stringToHex(value);
    if (type === "bytes") return value;
    if (type === "bool") return pad(boolToHex(value), {
        size: isArray ? 32 : 1
    });
    const intMatch = type.match(integerRegex);
    if (intMatch) {
        const [_type, baseType, bits = "256"] = intMatch;
        const size2 = parseInt(bits) / 8;
        return numberToHex(value, {
            size: isArray ? 32 : size2,
            signed: baseType === "int"
        });
    }
    const bytesMatch = type.match(bytesRegex);
    if (bytesMatch) {
        const [_type, size2] = bytesMatch;
        if (parseInt(size2) !== (value.length - 2) / 2) throw new BytesSizeMismatchError({
            expectedSize: parseInt(size2),
            givenSize: (value.length - 2) / 2
        });
        return pad(value, {
            dir: "right",
            size: isArray ? 32 : null
        });
    }
    const arrayMatch = type.match(arrayRegex);
    if (arrayMatch && Array.isArray(value)) {
        const [_type, childType] = arrayMatch;
        let data = [];
        for(let i = 0; i < value.length; i++)data.push(encode(childType, value[i], true));
        return concat(data);
    }
    throw new UnsupportedPackedAbiType(type);
}
// src/utils/abi/formatAbiItemWithArgs.ts
function formatAbiItemWithArgs({ abiItem , args , includeFunctionName =true , includeName =false  }) {
    if (!("name" in abiItem)) return;
    if (!("inputs" in abiItem)) return;
    if (!abiItem.inputs) return;
    return `${includeFunctionName ? abiItem.name : ""}(${abiItem.inputs.map((input, i)=>`${includeName && input.name ? `${input.name}: ` : ""}${typeof args[i] === "object" ? stringify(args[i]) : args[i]}`).join(", ")})`;
}
// src/utils/account.ts
function getAccount(account) {
    if (typeof account === "string") {
        if (!isAddress(account)) throw new InvalidAddressError({
            address: account
        });
        return {
            address: account,
            type: "json-rpc"
        };
    }
    if (!isAddress(account.address)) throw new InvalidAddressError({
        address: account.address
    });
    return {
        ...account,
        type: "local"
    };
}
// src/utils/promise/withCache.ts
var promiseCache = /* @__PURE__ */ new Map();
var responseCache = /* @__PURE__ */ new Map();
function getCache(cacheKey2) {
    const buildCache = (cacheKey3, cache)=>({
            clear: ()=>cache.delete(cacheKey3),
            get: ()=>cache.get(cacheKey3),
            set: (data)=>cache.set(cacheKey3, data)
        });
    const promise = buildCache(cacheKey2, promiseCache);
    const response = buildCache(cacheKey2, responseCache);
    return {
        clear: ()=>{
            promise.clear();
            response.clear();
        },
        promise,
        response
    };
}
async function withCache(fn, { cacheKey: cacheKey2 , maxAge =Infinity  }) {
    const cache = getCache(cacheKey2);
    const response = cache.response.get();
    if (response && maxAge > 0) {
        const age = /* @__PURE__ */ new Date().getTime() - response.created.getTime();
        if (age < maxAge) return response.data;
    }
    let promise = cache.promise.get();
    if (!promise) {
        promise = fn();
        cache.promise.set(promise);
    }
    const data = await promise;
    cache.promise.clear();
    cache.response.set({
        created: /* @__PURE__ */ new Date(),
        data
    });
    return data;
}
// src/utils/wait.ts
async function wait(time) {
    return new Promise((res)=>setTimeout(res, time));
}
// src/utils/promise/withRetry.ts
function withRetry(fn, { delay: delay_ = 100 , retryCount =2 , shouldRetry =()=>true  } = {}) {
    return new Promise((resolve, reject)=>{
        const attemptRetry = async ({ count =0  } = {})=>{
            const retry = async ({ error  })=>{
                const delay = typeof delay_ === "function" ? delay_({
                    count,
                    error
                }) : delay_;
                if (delay) await wait(delay);
                attemptRetry({
                    count: count + 1
                });
            };
            try {
                const data = await fn();
                resolve(data);
            } catch (err) {
                if (count < retryCount && await shouldRetry({
                    count,
                    error: err
                })) return retry({
                    error: err
                });
                reject(err);
            }
        };
        attemptRetry();
    });
}
// src/utils/promise/withTimeout.ts
function withTimeout(fn, { errorInstance , timeout , signal  }) {
    return new Promise((resolve, reject)=>{
        (async ()=>{
            let timeoutId;
            try {
                const controller = new AbortController();
                if (timeout > 0) timeoutId = setTimeout(()=>{
                    if (signal) controller.abort();
                    else reject(errorInstance);
                }, timeout);
                resolve(await fn({
                    signal: controller?.signal
                }));
            } catch (err) {
                if (err.name === "AbortError") reject(errorInstance);
                reject(err);
            } finally{
                clearTimeout(timeoutId);
            }
        })();
    });
}
// src/utils/buildRequest.ts
var isDeterministicError = (error)=>{
    if ("code" in error) return error.code !== -32603 && error.code !== -32005;
    if (error instanceof HttpRequestError && error.status) return error.status !== 408 && error.status !== 413 && error.status !== 429 && error.status !== 500 && error.status !== 502 && error.status !== 503 && error.status !== 504;
    return false;
};
function buildRequest(request, { retryDelay =150 , retryCount =3  } = {}) {
    return async (args)=>withRetry(async ()=>{
            try {
                return await request(args);
            } catch (err_) {
                const err = err_;
                if (err.code === -32700) throw new ParseRpcError(err);
                if (err.code === -32600) throw new InvalidRequestRpcError(err);
                if (err.code === -32601) throw new MethodNotFoundRpcError(err);
                if (err.code === -32602) throw new InvalidParamsRpcError(err);
                if (err.code === -32603) throw new InternalRpcError(err);
                if (err.code === -32000) throw new InvalidInputRpcError(err);
                if (err.code === -32001) throw new ResourceNotFoundRpcError(err);
                if (err.code === -32002) throw new ResourceUnavailableRpcError(err);
                if (err.code === -32003) throw new TransactionRejectedRpcError(err);
                if (err.code === -32004) throw new MethodNotSupportedRpcError(err);
                if (err.code === -32005) throw new LimitExceededRpcError(err);
                if (err.code === -32006) throw new JsonRpcVersionUnsupportedError(err);
                if (err.code === 4001) throw new UserRejectedRequestError(err);
                if (err.code === 4902) throw new SwitchChainError(err);
                if (err_ instanceof BaseError) throw err_;
                throw new UnknownRpcError(err);
            }
        }, {
            delay: ({ count , error  })=>{
                if (error && error instanceof HttpRequestError) {
                    const retryAfter = error?.headers?.get("Retry-After");
                    if (retryAfter?.match(/\d/)) return parseInt(retryAfter) * 1e3;
                }
                return ~~(1 << count) * retryDelay;
            },
            retryCount,
            shouldRetry: ({ error  })=>!isDeterministicError(error)
        });
}
// src/utils/chain.ts
function defineChain(chain) {
    return chain;
}
// src/utils/formatters/format.ts
function format3(data, { formatter  }) {
    return formatter(data);
}
function defineFormatter({ format: format4  }) {
    return ({ exclude , format: formatOverride  })=>(data)=>{
            const formatted = format4(data);
            if (exclude) for (const key of exclude)delete formatted[key];
            return {
                ...formatted,
                ...formatOverride?.(data)
            };
        };
}
// src/utils/formatters/transaction.ts
var transactionType = {
    "0x0": "legacy",
    "0x1": "eip2930",
    "0x2": "eip1559"
};
function formatTransaction(transaction) {
    const transaction_ = {
        ...transaction,
        blockHash: transaction.blockHash ? transaction.blockHash : null,
        blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
        chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
        gas: transaction.gas ? BigInt(transaction.gas) : void 0,
        gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
        maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
        nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
        to: transaction.to ? transaction.to : null,
        transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
        type: transaction.type ? transactionType[transaction.type] : void 0,
        value: transaction.value ? BigInt(transaction.value) : void 0,
        v: transaction.v ? BigInt(transaction.v) : void 0
    };
    if (transaction_.type === "legacy") {
        delete transaction_["accessList"];
        delete transaction_["maxFeePerGas"];
        delete transaction_["maxPriorityFeePerGas"];
    }
    if (transaction_.type === "eip2930") {
        delete transaction_["maxFeePerGas"];
        delete transaction_["maxPriorityFeePerGas"];
    }
    return transaction_;
}
var defineTransaction = defineFormatter({
    format: formatTransaction
});
// src/utils/formatters/block.ts
function formatBlock(block) {
    const transactions = block.transactions?.map((transaction)=>{
        if (typeof transaction === "string") return transaction;
        return formatTransaction(transaction);
    });
    return {
        ...block,
        baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
        difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
        gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
        gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
        hash: block.hash ? block.hash : null,
        logsBloom: block.logsBloom ? block.logsBloom : null,
        nonce: block.nonce ? block.nonce : null,
        number: block.number ? BigInt(block.number) : null,
        size: block.size ? BigInt(block.size) : void 0,
        timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
        transactions,
        totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
    };
}
var defineBlock = defineFormatter({
    format: formatBlock
});
// src/utils/formatters/extract.ts
function extract(value, { formatter  }) {
    if (!formatter) return {};
    const keys = Object.keys(formatter({}));
    return keys.reduce((data, key)=>{
        if (value?.hasOwnProperty(key)) data[key] = value[key];
        return data;
    }, {});
}
// src/utils/formatters/feeHistory.ts
function formatFeeHistory(feeHistory) {
    return {
        baseFeePerGas: feeHistory.baseFeePerGas.map((value)=>BigInt(value)),
        gasUsedRatio: feeHistory.gasUsedRatio,
        oldestBlock: BigInt(feeHistory.oldestBlock),
        reward: feeHistory.reward?.map((reward)=>reward.map((value)=>BigInt(value)))
    };
}
// src/utils/formatters/log.ts
function formatLog(log, { args , eventName  } = {}) {
    return {
        ...log,
        blockHash: log.blockHash ? log.blockHash : null,
        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
        logIndex: log.logIndex ? BigInt(log.logIndex) : null,
        transactionHash: log.transactionHash ? log.transactionHash : null,
        transactionIndex: log.transactionIndex ? BigInt(log.transactionIndex) : null,
        ...eventName ? {
            args,
            eventName
        } : {}
    };
}
// src/utils/formatters/transactionReceipt.ts
var statuses = {
    "0x0": "reverted",
    "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
    return {
        ...transactionReceipt,
        blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
        contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
        cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
        effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
        gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
        logs: transactionReceipt.logs ? transactionReceipt.logs.map((log)=>formatLog(log)) : null,
        to: transactionReceipt.to ? transactionReceipt.to : null,
        transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
        status: transactionReceipt.status ? statuses[transactionReceipt.status] : null,
        type: transactionReceipt.type ? transactionType[transactionReceipt.type] : null
    };
}
var defineTransactionReceipt = defineFormatter({
    format: formatTransactionReceipt
});
// src/utils/formatters/transactionRequest.ts
function formatTransactionRequest(transactionRequest) {
    return {
        ...transactionRequest,
        gas: typeof transactionRequest.gas !== "undefined" ? numberToHex(transactionRequest.gas) : void 0,
        gasPrice: typeof transactionRequest.gasPrice !== "undefined" ? numberToHex(transactionRequest.gasPrice) : void 0,
        maxFeePerGas: typeof transactionRequest.maxFeePerGas !== "undefined" ? numberToHex(transactionRequest.maxFeePerGas) : void 0,
        maxPriorityFeePerGas: typeof transactionRequest.maxPriorityFeePerGas !== "undefined" ? numberToHex(transactionRequest.maxPriorityFeePerGas) : void 0,
        nonce: typeof transactionRequest.nonce !== "undefined" ? numberToHex(transactionRequest.nonce) : void 0,
        value: typeof transactionRequest.value !== "undefined" ? numberToHex(transactionRequest.value) : void 0
    };
}
var defineTransactionRequest = defineFormatter({
    format: formatTransactionRequest
});
// src/utils/errors/getNodeError.ts
function containsNodeError(err) {
    return err instanceof TransactionRejectedRpcError || err instanceof InvalidInputRpcError || err instanceof RpcError && err.code === ExecutionRevertedError.code;
}
function getNodeError(err, args) {
    const message = err.details.toLowerCase();
    if (FeeCapTooHighError.nodeMessage.test(message)) return new FeeCapTooHighError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
    });
    else if (FeeCapTooLowError.nodeMessage.test(message)) return new FeeCapTooLowError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas
    });
    else if (NonceTooHighError.nodeMessage.test(message)) return new NonceTooHighError({
        cause: err,
        nonce: args?.nonce
    });
    else if (NonceTooLowError.nodeMessage.test(message)) return new NonceTooLowError({
        cause: err,
        nonce: args?.nonce
    });
    else if (NonceMaxValueError.nodeMessage.test(message)) return new NonceMaxValueError({
        cause: err,
        nonce: args?.nonce
    });
    else if (InsufficientFundsError.nodeMessage.test(message)) return new InsufficientFundsError({
        cause: err
    });
    else if (IntrinsicGasTooHighError.nodeMessage.test(message)) return new IntrinsicGasTooHighError({
        cause: err,
        gas: args?.gas
    });
    else if (IntrinsicGasTooLowError.nodeMessage.test(message)) return new IntrinsicGasTooLowError({
        cause: err,
        gas: args?.gas
    });
    else if (TransactionTypeNotSupportedError.nodeMessage.test(message)) return new TransactionTypeNotSupportedError({
        cause: err
    });
    else if (TipAboveFeeCapError.nodeMessage.test(message)) return new TipAboveFeeCapError({
        cause: err,
        maxFeePerGas: args?.maxFeePerGas,
        maxPriorityFeePerGas: args?.maxPriorityFeePerGas
    });
    else if (message.match(ExecutionRevertedError.nodeMessage) || "code" in err.cause && err.cause?.code === ExecutionRevertedError.code) return new ExecutionRevertedError({
        cause: err,
        message: err.cause.details
    });
    return new UnknownNodeError({
        cause: err.cause.cause
    });
}
// src/utils/errors/getCallError.ts
function getCallError(err, { docsPath: docsPath5 , ...args }) {
    let cause = err;
    if (containsNodeError(err)) cause = getNodeError(err, args);
    return new CallExecutionError(cause, {
        docsPath: docsPath5,
        ...args
    });
}
// src/utils/errors/getContractError.ts
var EXECUTION_REVERTED_ERROR_CODE = 3;
function getContractError(err, { abi , address , args , docsPath: docsPath5 , functionName , sender  }) {
    const { code , data , message  } = err instanceof RawContractError ? err : err instanceof CallExecutionError || err instanceof EstimateGasExecutionError ? err.cause?.cause?.cause || {} : err.cause || {};
    let cause = err;
    if (err instanceof AbiDecodingZeroDataError) cause = new ContractFunctionZeroDataError({
        functionName
    });
    else if (code === EXECUTION_REVERTED_ERROR_CODE && (data || message)) cause = new ContractFunctionRevertedError({
        abi,
        data,
        functionName,
        message
    });
    return new ContractFunctionExecutionError(cause, {
        abi,
        args,
        contractAddress: address,
        docsPath: docsPath5,
        functionName,
        sender
    });
}
// src/utils/errors/getEstimateGasError.ts
function getEstimateGasError(err, { docsPath: docsPath5 , ...args }) {
    let cause = err;
    if (containsNodeError(err)) cause = getNodeError(err, args);
    return new EstimateGasExecutionError(cause, {
        docsPath: docsPath5,
        ...args
    });
}
// src/utils/errors/getTransactionError.ts
function getTransactionError(err, { docsPath: docsPath5 , ...args }) {
    let cause = err;
    if (containsNodeError(err)) cause = getNodeError(err, args);
    return new TransactionExecutionError(cause, {
        docsPath: docsPath5,
        ...args
    });
}
// src/utils/stringify.ts
var stringify = (value, replacer, space)=>JSON.stringify(value, (key, value_)=>{
        const value2 = typeof value_ === "bigint" ? value_.toString() : value_;
        return typeof replacer === "function" ? replacer(key, value2) : value2;
    }, space);
// src/utils/rpc.ts
var id = 0;
async function http(url, { body , fetchOptions ={} , timeout =1e4  }) {
    const { headers , method , signal: signal_  } = fetchOptions;
    try {
        const response = await withTimeout(async ({ signal  })=>{
            const response2 = await fetch(url, {
                ...fetchOptions,
                body: stringify({
                    jsonrpc: "2.0",
                    id: id++,
                    ...body
                }),
                headers: {
                    ...headers,
                    "Content-Type": "application/json"
                },
                method: method || "POST",
                signal: signal_ || (timeout > 0 ? signal : void 0)
            });
            return response2;
        }, {
            errorInstance: new TimeoutError({
                body,
                url
            }),
            timeout,
            signal: true
        });
        let data;
        if (response.headers.get("Content-Type")?.startsWith("application/json")) data = await response.json();
        else data = await response.text();
        if (!response.ok) throw new HttpRequestError({
            body,
            details: stringify(data.error) || response.statusText,
            headers: response.headers,
            status: response.status,
            url
        });
        if (data.error) throw new RpcError({
            body,
            error: data.error,
            url
        });
        return data;
    } catch (err) {
        if (err instanceof HttpRequestError) throw err;
        if (err instanceof RpcError) throw err;
        if (err instanceof TimeoutError) throw err;
        throw new HttpRequestError({
            body,
            details: err.message,
            url
        });
    }
}
var sockets = /* @__PURE__ */ new Map();
async function getSocket(url_) {
    const url = new URL(url_);
    const urlKey = url.toString();
    let socket = sockets.get(urlKey);
    if (socket) return socket;
    const webSocket2 = new (0, _isomorphicWsDefault.default)(url);
    const requests = /* @__PURE__ */ new Map();
    const subscriptions = /* @__PURE__ */ new Map();
    const onMessage = ({ data  })=>{
        const message = JSON.parse(data);
        const isSubscription = message.method === "eth_subscription";
        const id2 = isSubscription ? message.params.subscription : message.id;
        const cache = isSubscription ? subscriptions : requests;
        const callback = cache.get(id2);
        if (callback) callback({
            data
        });
        if (!isSubscription) cache.delete(id2);
    };
    const onClose = ()=>{
        sockets.delete(urlKey);
        webSocket2.removeEventListener("close", onClose);
        webSocket2.removeEventListener("message", onMessage);
    };
    webSocket2.addEventListener("close", onClose);
    webSocket2.addEventListener("message", onMessage);
    if (webSocket2.readyState === (0, _isomorphicWsDefault.default).CONNECTING) await new Promise((resolve, reject)=>{
        if (!webSocket2) return;
        webSocket2.onopen = resolve;
        webSocket2.onerror = reject;
    });
    socket = Object.assign(webSocket2, {
        requests,
        subscriptions
    });
    sockets.set(urlKey, socket);
    return socket;
}
function webSocket(socket, { body , onData , onError  }) {
    if (socket.readyState === socket.CLOSED || socket.readyState === socket.CLOSING) throw new WebSocketRequestError({
        body,
        url: socket.url,
        details: "Socket is closed."
    });
    const id_ = id++;
    const callback = ({ data  })=>{
        const message = JSON.parse(data);
        if (typeof message.id === "number" && id_ !== message.id) return;
        if (message.error) onError?.(new RpcError({
            body,
            error: message.error,
            url: socket.url
        }));
        else onData?.(message);
        if (body.method === "eth_subscribe" && typeof message.result === "string") socket.subscriptions.set(message.result, callback);
        if (body.method === "eth_unsubscribe") socket.subscriptions.delete(body.params?.[0]);
    };
    socket.requests.set(id_, callback);
    socket.send(JSON.stringify({
        jsonrpc: "2.0",
        ...body,
        id: id_
    }));
    return socket;
}
async function webSocketAsync(socket, { body , timeout =1e4  }) {
    return withTimeout(()=>new Promise((onData, onError)=>rpc.webSocket(socket, {
                body,
                onData,
                onError
            })), {
        errorInstance: new TimeoutError({
            body,
            url: socket.url
        }),
        timeout
    });
}
var rpc = {
    http,
    webSocket,
    webSocketAsync
};
// src/utils/transaction/assertRequest.ts
function assertRequest(args) {
    const { account , gasPrice , maxFeePerGas , maxPriorityFeePerGas , to  } = args;
    if (account && !isAddress(account.address)) throw new InvalidAddressError({
        address: account.address
    });
    if (to && !isAddress(to)) throw new InvalidAddressError({
        address: to
    });
    if (typeof gasPrice !== "undefined" && (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined")) throw new FeeConflictError();
    if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n) throw new FeeCapTooHighError({
        maxFeePerGas
    });
    if (maxPriorityFeePerGas && maxFeePerGas && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({
        maxFeePerGas,
        maxPriorityFeePerGas
    });
}
// src/actions/public/call.ts
async function call(client, args) {
    const { account , blockNumber , blockTag ="latest" , accessList , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value , ...rest } = args;
    try {
        assertRequest(args);
        const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
        const formatter = client.chain?.formatters?.transactionRequest;
        const request_ = format3({
            from: account?.address,
            accessList,
            data,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            // Pick out extra data that might exist on the chain's transaction request type.
            ...extract(rest, {
                formatter
            })
        }, {
            formatter: formatter || formatTransactionRequest
        });
        const response = await client.request({
            method: "eth_call",
            params: [
                request_,
                blockNumberHex || blockTag
            ]
        });
        if (response === "0x") return {
            data: void 0
        };
        return {
            data: response
        };
    } catch (err) {
        throw getCallError(err, {
            ...args,
            chain: client.chain
        });
    }
}
// src/actions/public/simulateContract.ts
async function simulateContract(client, { abi , address , args , functionName , ...callRequest }) {
    const calldata = encodeFunctionData({
        abi,
        args,
        functionName
    });
    try {
        const { data  } = await call(client, {
            data: calldata,
            to: address,
            ...callRequest
        });
        const result = decodeFunctionResult({
            abi,
            args,
            functionName,
            data: data || "0x"
        });
        return {
            result,
            request: {
                abi,
                address,
                args,
                functionName,
                ...callRequest
            }
        };
    } catch (err) {
        throw getContractError(err, {
            abi,
            address,
            args,
            docsPath: "/docs/contract/simulateContract",
            functionName,
            sender: callRequest.account?.address
        });
    }
}
// src/actions/public/createPendingTransactionFilter.ts
async function createPendingTransactionFilter(client) {
    const id2 = await client.request({
        method: "eth_newPendingTransactionFilter"
    });
    return {
        id: id2,
        type: "transaction"
    };
}
// src/actions/public/createBlockFilter.ts
async function createBlockFilter(client) {
    const id2 = await client.request({
        method: "eth_newBlockFilter"
    });
    return {
        id: id2,
        type: "block"
    };
}
// src/actions/public/createEventFilter.ts
async function createEventFilter(client, { address , args , event , fromBlock , toBlock  } = {}) {
    let topics = [];
    if (event) topics = encodeEventTopics({
        abi: [
            event
        ],
        eventName: event.name,
        args
    });
    const id2 = await client.request({
        method: "eth_newFilter",
        params: [
            {
                address,
                fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
                toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock,
                ...topics.length ? {
                    topics
                } : {}
            }
        ]
    });
    return {
        abi: event ? [
            event
        ] : void 0,
        args,
        eventName: event ? event.name : void 0,
        id: id2,
        type: "event"
    };
}
// src/actions/public/createContractEventFilter.ts
async function createContractEventFilter(client, { address , abi , args , eventName , fromBlock , toBlock  }) {
    const topics = eventName ? encodeEventTopics({
        abi,
        args,
        eventName
    }) : void 0;
    const id2 = await client.request({
        method: "eth_newFilter",
        params: [
            {
                address,
                fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
                toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock,
                topics
            }
        ]
    });
    return {
        abi,
        args,
        eventName,
        id: id2,
        type: "event"
    };
}
// src/actions/public/estimateGas.ts
async function estimateGas(client, args) {
    try {
        const { account , accessList , blockNumber , blockTag ="latest" , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value , ...rest } = args.account.type === "local" ? await prepareRequest(client, args) : args;
        const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
        assertRequest(args);
        const formatter = client.chain?.formatters?.transactionRequest;
        const request = format3({
            from: account.address,
            accessList,
            data,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            // Pick out extra data that might exist on the chain's transaction request type.
            ...extract(rest, {
                formatter
            })
        }, {
            formatter: formatter || formatTransactionRequest
        });
        const balance = await client.request({
            method: "eth_estimateGas",
            params: [
                request,
                blockNumberHex || blockTag
            ]
        });
        return BigInt(balance);
    } catch (err) {
        throw getEstimateGasError(err, {
            ...args,
            chain: client.chain
        });
    }
}
// src/actions/public/estimateContractGas.ts
async function estimateContractGas(client, { abi , address , args , functionName , ...request }) {
    const data = encodeFunctionData({
        abi,
        args,
        functionName
    });
    try {
        const gas = await estimateGas(client, {
            data,
            to: address,
            ...request
        });
        return gas;
    } catch (err) {
        throw getContractError(err, {
            abi,
            address,
            args,
            docsPath: "/docs/contract/simulateContract",
            functionName,
            sender: request.account?.address
        });
    }
}
// src/actions/public/getBalance.ts
async function getBalance(client, { address , blockNumber , blockTag ="latest"  }) {
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const balance = await client.request({
        method: "eth_getBalance",
        params: [
            address,
            blockNumberHex || blockTag
        ]
    });
    return BigInt(balance);
}
// src/actions/public/getBlock.ts
async function getBlock(client, { blockHash , blockNumber , blockTag ="latest" , includeTransactions =false  } = {}) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let block = null;
    if (blockHash) block = await client.request({
        method: "eth_getBlockByHash",
        params: [
            blockHash,
            includeTransactions
        ]
    });
    else block = await client.request({
        method: "eth_getBlockByNumber",
        params: [
            blockNumberHex || blockTag,
            includeTransactions
        ]
    });
    if (!block) throw new BlockNotFoundError({
        blockHash,
        blockNumber
    });
    return format3(block, {
        formatter: client.chain?.formatters?.block || formatBlock
    });
}
// src/actions/public/getBlockNumber.ts
var cacheKey = (id2)=>`blockNumber.${id2}`;
function getBlockNumberCache(id2) {
    return getCache(cacheKey(id2));
}
async function getBlockNumber(client, { maxAge =client.pollingInterval  } = {}) {
    const blockNumberHex = await withCache(()=>client.request({
            method: "eth_blockNumber"
        }), {
        cacheKey: cacheKey(client.uid),
        maxAge
    });
    return BigInt(blockNumberHex);
}
// src/actions/public/getBlockTransactionCount.ts
async function getBlockTransactionCount(client, { blockHash , blockNumber , blockTag ="latest"  } = {}) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let count = null;
    if (blockHash) count = await client.request({
        method: "eth_getBlockTransactionCountByHash",
        params: [
            blockHash
        ]
    });
    else count = await client.request({
        method: "eth_getBlockTransactionCountByNumber",
        params: [
            blockNumberHex || blockTag
        ]
    });
    return hexToNumber(count);
}
// src/actions/public/getBytecode.ts
async function getBytecode(client, { address , blockNumber , blockTag ="latest"  }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const hex = await client.request({
        method: "eth_getCode",
        params: [
            address,
            blockNumberHex || blockTag
        ]
    });
    if (hex === "0x") return void 0;
    return hex;
}
// src/actions/public/getChainId.ts
async function getChainId(client) {
    const chainIdHex = await client.request({
        method: "eth_chainId"
    });
    return hexToNumber(chainIdHex);
}
// src/actions/public/getFeeHistory.ts
async function getFeeHistory(client, { blockCount , blockNumber , blockTag ="latest" , rewardPercentiles  }) {
    const blockNumberHex = blockNumber ? numberToHex(blockNumber) : void 0;
    const feeHistory = await client.request({
        method: "eth_feeHistory",
        params: [
            numberToHex(blockCount),
            blockNumberHex || blockTag,
            rewardPercentiles
        ]
    });
    return formatFeeHistory(feeHistory);
}
// src/actions/public/getFilterChanges.ts
async function getFilterChanges(client, { filter  }) {
    const logs = await client.request({
        method: "eth_getFilterChanges",
        params: [
            filter.id
        ]
    });
    return logs.map((log)=>{
        if (typeof log === "string") return log;
        const { eventName , args  } = "abi" in filter && filter.abi ? decodeEventLog({
            abi: filter.abi,
            data: log.data,
            topics: log.topics
        }) : {
            eventName: void 0,
            args: void 0
        };
        return formatLog(log, {
            args,
            eventName
        });
    });
}
// src/actions/public/getFilterLogs.ts
async function getFilterLogs(client, { filter  }) {
    const logs = await client.request({
        method: "eth_getFilterLogs",
        params: [
            filter.id
        ]
    });
    return logs.map((log)=>{
        const { eventName , args  } = "abi" in filter && filter.abi ? decodeEventLog({
            abi: filter.abi,
            data: log.data,
            topics: log.topics
        }) : {
            eventName: void 0,
            args: void 0
        };
        return formatLog(log, {
            args,
            eventName
        });
    });
}
// src/actions/public/getGasPrice.ts
async function getGasPrice(client) {
    const gasPrice = await client.request({
        method: "eth_gasPrice"
    });
    return BigInt(gasPrice);
}
// src/actions/public/getLogs.ts
async function getLogs(client, { address , blockHash , fromBlock , toBlock , event , args  } = {}) {
    let topics = [];
    if (event) topics = encodeEventTopics({
        abi: [
            event
        ],
        eventName: event.name,
        args
    });
    let logs;
    if (blockHash) logs = await client.request({
        method: "eth_getLogs",
        params: [
            {
                address,
                topics,
                blockHash
            }
        ]
    });
    else logs = await client.request({
        method: "eth_getLogs",
        params: [
            {
                address,
                topics,
                fromBlock: typeof fromBlock === "bigint" ? numberToHex(fromBlock) : fromBlock,
                toBlock: typeof toBlock === "bigint" ? numberToHex(toBlock) : toBlock
            }
        ]
    });
    return logs.map((log)=>{
        const { eventName , args: args2  } = event ? decodeEventLog({
            abi: [
                event
            ],
            data: log.data,
            topics: log.topics
        }) : {
            eventName: void 0,
            args: void 0
        };
        return formatLog(log, {
            args: args2,
            eventName
        });
    });
}
// src/actions/public/getStorageAt.ts
async function getStorageAt(client, { address , blockNumber , blockTag ="latest" , slot  }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    const data = await client.request({
        method: "eth_getStorageAt",
        params: [
            address,
            slot,
            blockNumberHex || blockTag
        ]
    });
    return data;
}
// src/actions/public/getTransaction.ts
async function getTransaction(client, { blockHash , blockNumber , blockTag ="latest" , hash: hash2 , index  }) {
    const blockNumberHex = blockNumber !== void 0 ? numberToHex(blockNumber) : void 0;
    let transaction = null;
    if (hash2) transaction = await client.request({
        method: "eth_getTransactionByHash",
        params: [
            hash2
        ]
    });
    else if (blockHash) transaction = await client.request({
        method: "eth_getTransactionByBlockHashAndIndex",
        params: [
            blockHash,
            numberToHex(index)
        ]
    });
    else if (blockNumberHex || blockTag) transaction = await client.request({
        method: "eth_getTransactionByBlockNumberAndIndex",
        params: [
            blockNumberHex || blockTag,
            numberToHex(index)
        ]
    });
    if (!transaction) throw new TransactionNotFoundError({
        blockHash,
        blockNumber,
        blockTag,
        hash: hash2,
        index
    });
    return format3(transaction, {
        formatter: client.chain?.formatters?.transaction || formatTransaction
    });
}
// src/actions/public/getTransactionConfirmations.ts
async function getTransactionConfirmations(client, { hash: hash2 , transactionReceipt  }) {
    const [blockNumber, transaction] = await Promise.all([
        getBlockNumber(client),
        hash2 ? getTransaction(client, {
            hash: hash2
        }) : void 0
    ]);
    const transactionBlockNumber = transactionReceipt?.blockNumber || transaction?.blockNumber;
    if (!transactionBlockNumber) return 0n;
    return blockNumber - transactionBlockNumber + 1n;
}
// src/actions/public/getTransactionCount.ts
async function getTransactionCount(client, { address , blockTag ="latest" , blockNumber  }) {
    const count = await client.request({
        method: "eth_getTransactionCount",
        params: [
            address,
            blockNumber ? numberToHex(blockNumber) : blockTag
        ]
    });
    return hexToNumber(count);
}
// src/actions/public/getTransactionReceipt.ts
async function getTransactionReceipt(client, { hash: hash2  }) {
    const receipt = await client.request({
        method: "eth_getTransactionReceipt",
        params: [
            hash2
        ]
    });
    if (!receipt) throw new TransactionReceiptNotFoundError({
        hash: hash2
    });
    return format3(receipt, {
        formatter: client.chain?.formatters?.transactionReceipt || formatTransactionReceipt
    });
}
// src/actions/public/readContract.ts
async function readContract(client, { abi , address , args , functionName , ...callRequest }) {
    const calldata = encodeFunctionData({
        abi,
        args,
        functionName
    });
    try {
        const { data  } = await call(client, {
            data: calldata,
            to: address,
            ...callRequest
        });
        return decodeFunctionResult({
            abi,
            args,
            functionName,
            data: data || "0x"
        });
    } catch (err) {
        throw getContractError(err, {
            abi,
            address,
            args,
            docsPath: "/docs/contract/readContract",
            functionName
        });
    }
}
// src/actions/public/multicall.ts
async function multicall(client, args) {
    const { allowFailure =true , blockNumber , blockTag , contracts , multicallAddress  } = args;
    const calls = contracts.map(({ abi , address , args: args2 , functionName  })=>{
        try {
            const callData = encodeFunctionData({
                abi,
                args: args2,
                functionName
            });
            return {
                allowFailure: true,
                callData,
                target: address
            };
        } catch (err) {
            const error = getContractError(err, {
                abi,
                address,
                args: args2,
                docsPath: "/docs/contract/multicall",
                functionName
            });
            if (!allowFailure) throw error;
            return {
                allowFailure: true,
                callData: "0x",
                target: address
            };
        }
    });
    const results = await readContract(client, {
        abi: multicall3Abi,
        address: multicallAddress,
        args: [
            calls
        ],
        blockNumber,
        blockTag,
        functionName: "aggregate3"
    });
    return results.map(({ returnData , success  }, i)=>{
        const { callData  } = calls[i];
        const { abi , address , functionName , args: args2  } = contracts[i];
        try {
            if (callData === "0x") throw new AbiDecodingZeroDataError();
            if (!success) throw new RawContractError({
                data: returnData
            });
            const result = decodeFunctionResult({
                abi,
                data: returnData,
                functionName
            });
            return {
                result,
                status: "success"
            };
        } catch (err) {
            const error = getContractError(err, {
                abi,
                address,
                args: args2,
                docsPath: "/docs/contract/multicall",
                functionName
            });
            if (!allowFailure) throw error;
            return {
                error,
                result: void 0,
                status: "failure"
            };
        }
    });
}
// src/actions/public/uninstallFilter.ts
async function uninstallFilter(client, { filter  }) {
    return client.request({
        method: "eth_uninstallFilter",
        params: [
            filter.id
        ]
    });
}
// src/utils/observe.ts
var listenersCache = /* @__PURE__ */ new Map();
var cleanupCache = /* @__PURE__ */ new Map();
var callbackCount = 0;
function observe(observerId, callbacks, fn) {
    const callbackId = ++callbackCount;
    const getListeners = ()=>listenersCache.get(observerId) || [];
    const unsubscribe = ()=>{
        const listeners2 = getListeners();
        listenersCache.set(observerId, listeners2.filter((cb)=>cb.id !== callbackId));
    };
    const unwatch = ()=>{
        const cleanup2 = cleanupCache.get(observerId);
        if (getListeners().length === 1 && cleanup2) cleanup2();
        unsubscribe();
    };
    const listeners = getListeners();
    listenersCache.set(observerId, [
        ...listeners,
        {
            id: callbackId,
            fns: callbacks
        }
    ]);
    if (listeners && listeners.length > 0) return unwatch;
    let emit = {};
    for(const key in callbacks)emit[key] = (...args)=>{
        const listeners2 = getListeners();
        if (listeners2.length === 0) return;
        listeners2.forEach((listener)=>listener.fns[key]?.(...args));
    };
    const cleanup = fn(emit);
    if (typeof cleanup === "function") cleanupCache.set(observerId, cleanup);
    return unwatch;
}
// src/actions/public/waitForTransactionReceipt.ts
async function waitForTransactionReceipt(client, { confirmations =1 , hash: hash2 , onReplaced , pollingInterval =client.pollingInterval , timeout  }) {
    const observerId = JSON.stringify([
        "waitForTransactionReceipt",
        client.uid,
        hash2
    ]);
    let transaction;
    let replacedTransaction;
    let receipt;
    return new Promise((resolve, reject)=>{
        if (timeout) setTimeout(()=>reject(new WaitForTransactionReceiptTimeoutError({
                hash: hash2
            })), timeout);
        const _unobserve = observe(observerId, {
            onReplaced,
            resolve,
            reject
        }, (emit)=>{
            const unwatch = watchBlockNumber(client, {
                emitMissed: true,
                emitOnBegin: true,
                pollingInterval,
                async onBlockNumber (blockNumber) {
                    const done = async (fn)=>{
                        unwatch();
                        fn();
                        _unobserve();
                    };
                    try {
                        if (receipt) {
                            if (blockNumber - receipt.blockNumber + 1n < confirmations) return;
                            done(()=>emit.resolve(receipt));
                            return;
                        }
                        transaction = await getTransaction(client, {
                            hash: hash2
                        });
                        receipt = await getTransactionReceipt(client, {
                            hash: hash2
                        });
                        if (blockNumber - receipt.blockNumber + 1n < confirmations) return;
                        done(()=>emit.resolve(receipt));
                    } catch (err) {
                        if (transaction && (err instanceof TransactionNotFoundError || err instanceof TransactionReceiptNotFoundError)) {
                            replacedTransaction = transaction;
                            const block = await getBlock(client, {
                                blockNumber,
                                includeTransactions: true
                            });
                            const replacementTransaction = block.transactions.find(({ from , nonce  })=>from === replacedTransaction.from && nonce === replacedTransaction.nonce);
                            if (!replacementTransaction) return;
                            receipt = await getTransactionReceipt(client, {
                                hash: replacementTransaction.hash
                            });
                            if (blockNumber - receipt.blockNumber + 1n < confirmations) return;
                            let reason = "replaced";
                            if (replacementTransaction.to === replacedTransaction.to && replacementTransaction.value === replacedTransaction.value) reason = "repriced";
                            else if (replacementTransaction.from === replacementTransaction.to && replacementTransaction.value === 0n) reason = "cancelled";
                            done(()=>{
                                emit.onReplaced?.({
                                    reason,
                                    replacedTransaction,
                                    transaction: replacementTransaction,
                                    transactionReceipt: receipt
                                });
                                emit.resolve(receipt);
                            });
                        } else done(()=>emit.reject(err));
                    }
                }
            });
            return unwatch;
        });
    });
}
// src/utils/poll.ts
function poll(fn, { emitOnBegin , initialWaitTime , interval  }) {
    let active = true;
    const unwatch = ()=>active = false;
    const watch = async ()=>{
        let data;
        if (emitOnBegin) data = await fn({
            unpoll: unwatch
        });
        const initialWait = await initialWaitTime?.(data) ?? interval;
        await wait(initialWait);
        const poll2 = async ()=>{
            if (!active) return;
            await fn({
                unpoll: unwatch
            });
            await wait(interval);
            poll2();
        };
        poll2();
    };
    watch();
    return unwatch;
}
// src/actions/public/watchBlockNumber.ts
function watchBlockNumber(client, { emitOnBegin =false , emitMissed =false , onBlockNumber , onError , pollingInterval =client.pollingInterval  }) {
    const observerId = JSON.stringify([
        "watchBlockNumber",
        client.uid,
        emitOnBegin,
        emitMissed,
        pollingInterval
    ]);
    let prevBlockNumber;
    return observe(observerId, {
        onBlockNumber,
        onError
    }, (emit)=>poll(async ()=>{
            try {
                const blockNumber = await getBlockNumber(client, {
                    maxAge: 0
                });
                if (prevBlockNumber) {
                    if (blockNumber === prevBlockNumber) return;
                    if (blockNumber - prevBlockNumber > 1 && emitMissed) for(let i = prevBlockNumber + 1n; i < blockNumber; i++){
                        emit.onBlockNumber(i, prevBlockNumber);
                        prevBlockNumber = i;
                    }
                }
                prevBlockNumber = blockNumber;
                emit.onBlockNumber(blockNumber, prevBlockNumber);
            } catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin,
            interval: pollingInterval
        }));
}
// src/actions/public/watchBlocks.ts
function watchBlocks(client, { blockTag ="latest" , emitMissed =false , emitOnBegin =false , onBlock , onError , includeTransactions =false , pollingInterval =client.pollingInterval  }) {
    const observerId = JSON.stringify([
        "watchBlocks",
        client.uid,
        emitMissed,
        emitOnBegin,
        includeTransactions,
        pollingInterval
    ]);
    let prevBlock;
    return observe(observerId, {
        onBlock,
        onError
    }, (emit)=>poll(async ()=>{
            try {
                const block = await getBlock(client, {
                    blockTag,
                    includeTransactions
                });
                if (block.number && prevBlock?.number) {
                    if (block.number === prevBlock.number) return;
                    if (block.number - prevBlock.number > 1 && emitMissed) for(let i = prevBlock?.number + 1n; i < block.number; i++){
                        const block2 = await getBlock(client, {
                            blockNumber: i,
                            includeTransactions
                        });
                        emit.onBlock(block2, prevBlock);
                        prevBlock = block2;
                    }
                }
                emit.onBlock(block, prevBlock);
                prevBlock = block;
            } catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin,
            interval: pollingInterval
        }));
}
// src/actions/public/watchContractEvent.ts
function watchContractEvent(client, { abi , address , args , batch =true , eventName , onError , onLogs , pollingInterval =client.pollingInterval  }) {
    const observerId = JSON.stringify([
        "watchContractEvent",
        address,
        args,
        batch,
        client.uid,
        eventName,
        pollingInterval
    ]);
    return observe(observerId, {
        onLogs,
        onError
    }, (emit)=>{
        let currentBlockNumber;
        let filter;
        let initialized = false;
        const unwatch = poll(async ()=>{
            if (!initialized) {
                try {
                    filter = await createContractEventFilter(client, {
                        abi,
                        address,
                        args,
                        eventName
                    });
                } catch  {}
                initialized = true;
                return;
            }
            try {
                let logs;
                if (filter) logs = await getFilterChanges(client, {
                    filter
                });
                else {
                    const blockNumber = await getBlockNumber(client);
                    if (currentBlockNumber && currentBlockNumber !== blockNumber) logs = await getLogs(client, {
                        address,
                        args,
                        fromBlock: blockNumber,
                        toBlock: blockNumber,
                        event: getAbiItem({
                            abi,
                            name: eventName
                        })
                    });
                    else logs = [];
                    currentBlockNumber = blockNumber;
                }
                if (logs.length === 0) return;
                if (batch) emit.onLogs(logs);
                else logs.forEach((log)=>emit.onLogs([
                        log
                    ]));
            } catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin: true,
            interval: pollingInterval
        });
        return async ()=>{
            if (filter) await uninstallFilter(client, {
                filter
            });
            unwatch();
        };
    });
}
// src/actions/public/watchEvent.ts
function watchEvent(client, { address , args , batch =true , event , onError , onLogs , pollingInterval =client.pollingInterval  }) {
    const observerId = JSON.stringify([
        "watchEvent",
        address,
        args,
        batch,
        client.uid,
        event,
        pollingInterval
    ]);
    return observe(observerId, {
        onLogs,
        onError
    }, (emit)=>{
        let currentBlockNumber;
        let filter;
        let initialized = false;
        const unwatch = poll(async ()=>{
            if (!initialized) {
                try {
                    filter = await createEventFilter(client, {
                        address,
                        args,
                        event
                    });
                } catch  {}
                initialized = true;
                return;
            }
            try {
                let logs;
                if (filter) logs = await getFilterChanges(client, {
                    filter
                });
                else {
                    const blockNumber = await getBlockNumber(client);
                    if (currentBlockNumber && currentBlockNumber !== blockNumber) logs = await getLogs(client, {
                        address,
                        args,
                        fromBlock: blockNumber,
                        toBlock: blockNumber,
                        event
                    });
                    else logs = [];
                    currentBlockNumber = blockNumber;
                }
                if (logs.length === 0) return;
                if (batch) emit.onLogs(logs);
                else logs.forEach((log)=>emit.onLogs([
                        log
                    ]));
            } catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin: true,
            interval: pollingInterval
        });
        return async ()=>{
            if (filter) await uninstallFilter(client, {
                filter
            });
            unwatch();
        };
    });
}
// src/actions/public/watchPendingTransactions.ts
function watchPendingTransactions(client, { batch =true , onError , onTransactions , pollingInterval =client.pollingInterval  }) {
    const observerId = JSON.stringify([
        "watchPendingTransactions",
        client.uid,
        batch,
        pollingInterval
    ]);
    return observe(observerId, {
        onTransactions,
        onError
    }, (emit)=>{
        let filter;
        const unwatch = poll(async ()=>{
            try {
                if (!filter) try {
                    filter = await createPendingTransactionFilter(client);
                    return;
                } catch (err) {
                    unwatch();
                    throw err;
                }
                const hashes = await getFilterChanges(client, {
                    filter
                });
                if (hashes.length === 0) return;
                if (batch) emit.onTransactions(hashes);
                else hashes.forEach((hash2)=>emit.onTransactions([
                        hash2
                    ]));
            } catch (err) {
                emit.onError?.(err);
            }
        }, {
            emitOnBegin: true,
            interval: pollingInterval
        });
        return async ()=>{
            if (filter) await uninstallFilter(client, {
                filter
            });
            unwatch();
        };
    });
}
// src/actions/test/dropTransaction.ts
async function dropTransaction(client, { hash: hash2  }) {
    return await client.request({
        method: `${client.mode}_dropTransaction`,
        params: [
            hash2
        ]
    });
}
// src/actions/test/getAutomine.ts
async function getAutomine(client) {
    return await client.request({
        method: `${client.mode}_getAutomine`
    });
}
// src/actions/test/getTxpoolContent.ts
async function getTxpoolContent(client) {
    return await client.request({
        method: "txpool_content"
    });
}
// src/actions/test/getTxpoolStatus.ts
async function getTxpoolStatus(client) {
    const { pending , queued  } = await client.request({
        method: "txpool_status"
    });
    return {
        pending: hexToNumber(pending),
        queued: hexToNumber(queued)
    };
}
// src/actions/test/impersonateAccount.ts
async function impersonateAccount(client, { address  }) {
    return await client.request({
        method: `${client.mode}_impersonateAccount`,
        params: [
            address
        ]
    });
}
// src/actions/test/increaseTime.ts
async function increaseTime(client, { seconds  }) {
    return await client.request({
        method: "evm_increaseTime",
        params: [
            numberToHex(seconds)
        ]
    });
}
// src/actions/test/inspectTxpool.ts
async function inspectTxpool(client) {
    return await client.request({
        method: "txpool_inspect"
    });
}
// src/actions/test/mine.ts
async function mine(client, { blocks , interval  }) {
    return await client.request({
        method: `${client.mode}_mine`,
        params: [
            numberToHex(blocks),
            numberToHex(interval || 0)
        ]
    });
}
// src/actions/test/removeBlockTimestampInterval.ts
async function removeBlockTimestampInterval(client) {
    return await client.request({
        method: `${client.mode}_removeBlockTimestampInterval`
    });
}
// src/actions/test/reset.ts
async function reset(client, { blockNumber , jsonRpcUrl  } = {}) {
    return await client.request({
        method: `${client.mode}_reset`,
        params: [
            {
                forking: {
                    blockNumber: Number(blockNumber),
                    jsonRpcUrl
                }
            }
        ]
    });
}
// src/actions/test/revert.ts
async function revert(client, { id: id2  }) {
    return await client.request({
        method: "evm_revert",
        params: [
            id2
        ]
    });
}
// src/actions/test/sendUnsignedTransaction.ts
async function sendUnsignedTransaction(client, request) {
    const request_ = formatTransactionRequest(request);
    const hash2 = await client.request({
        method: "eth_sendUnsignedTransaction",
        params: [
            request_
        ]
    });
    return hash2;
}
// src/actions/test/setAutomine.ts
async function setAutomine(client, enabled) {
    return await client.request({
        method: "evm_setAutomine",
        params: [
            enabled
        ]
    });
}
// src/actions/test/setBalance.ts
async function setBalance(client, { address , value  }) {
    return await client.request({
        method: `${client.mode}_setBalance`,
        params: [
            address,
            numberToHex(value)
        ]
    });
}
// src/actions/test/setBlockGasLimit.ts
async function setBlockGasLimit(client, { gasLimit  }) {
    return await client.request({
        method: "evm_setBlockGasLimit",
        params: [
            numberToHex(gasLimit)
        ]
    });
}
// src/actions/test/setBlockTimestampInterval.ts
async function setBlockTimestampInterval(client, { interval  }) {
    return await client.request({
        method: `${client.mode}_setBlockTimestampInterval`,
        params: [
            interval
        ]
    });
}
// src/actions/test/setCode.ts
async function setCode(client, { address , bytecode  }) {
    return await client.request({
        method: `${client.mode}_setCode`,
        params: [
            address,
            bytecode
        ]
    });
}
// src/actions/test/setCoinbase.ts
async function setCoinbase(client, { address  }) {
    return await client.request({
        method: `${client.mode}_setCoinbase`,
        params: [
            address
        ]
    });
}
// src/actions/test/setIntervalMining.ts
async function setIntervalMining(client, { interval  }) {
    return await client.request({
        method: "evm_setIntervalMining",
        params: [
            interval
        ]
    });
}
// src/actions/test/setLoggingEnabled.ts
async function setLoggingEnabled(client, enabled) {
    return await client.request({
        method: `${client.mode}_setLoggingEnabled`,
        params: [
            enabled
        ]
    });
}
// src/actions/test/setMinGasPrice.ts
async function setMinGasPrice(client, { gasPrice  }) {
    return await client.request({
        method: `${client.mode}_setMinGasPrice`,
        params: [
            numberToHex(gasPrice)
        ]
    });
}
// src/actions/test/setNextBlockBaseFeePerGas.ts
async function setNextBlockBaseFeePerGas(client, { baseFeePerGas  }) {
    return await client.request({
        method: `${client.mode}_setNextBlockBaseFeePerGas`,
        params: [
            numberToHex(baseFeePerGas)
        ]
    });
}
// src/actions/test/setNextBlockTimestamp.ts
async function setNextBlockTimestamp(client, { timestamp  }) {
    return await client.request({
        method: "evm_setNextBlockTimestamp",
        params: [
            numberToHex(timestamp)
        ]
    });
}
// src/actions/test/setNonce.ts
async function setNonce(client, { address , nonce  }) {
    return await client.request({
        method: `${client.mode}_setNonce`,
        params: [
            address,
            numberToHex(nonce)
        ]
    });
}
// src/actions/test/setRpcUrl.ts
async function setRpcUrl(client, jsonRpcUrl) {
    return await client.request({
        method: `${client.mode}_setRpcUrl`,
        params: [
            jsonRpcUrl
        ]
    });
}
// src/actions/test/setStorageAt.ts
async function setStorageAt(client, { address , index , value  }) {
    return await client.request({
        method: `${client.mode}_setStorageAt`,
        params: [
            address,
            typeof index === "number" ? numberToHex(index) : index,
            value
        ]
    });
}
// src/actions/test/snapshot.ts
async function snapshot(client) {
    return await client.request({
        method: "evm_snapshot"
    });
}
// src/actions/test/stopImpersonatingAccount.ts
async function stopImpersonatingAccount(client, { address  }) {
    return await client.request({
        method: `${client.mode}_stopImpersonatingAccount`,
        params: [
            address
        ]
    });
}
// src/actions/wallet/addChain.ts
async function addChain(client, { chain  }) {
    const { id: id2 , name , nativeCurrency , rpcUrls , blockExplorers  } = chain;
    await client.request({
        method: "wallet_addEthereumChain",
        params: [
            {
                chainId: numberToHex(id2),
                chainName: name,
                nativeCurrency,
                rpcUrls: rpcUrls.default.http,
                blockExplorerUrls: blockExplorers ? Object.values(blockExplorers).map(({ url  })=>url) : void 0
            }
        ]
    });
}
// src/actions/wallet/deployContract.ts
function deployContract(walletClient, { abi , args , bytecode , ...request }) {
    const calldata = encodeDeployData({
        abi,
        args,
        bytecode
    });
    return sendTransaction(walletClient, {
        ...request,
        data: calldata
    });
}
// src/actions/wallet/getAddresses.ts
async function getAddresses(client) {
    const addresses = await client.request({
        method: "eth_accounts"
    });
    return addresses.map((address)=>checksumAddress(address));
}
// src/actions/wallet/getPermissions.ts
async function getPermissions(client) {
    const permissions = await client.request({
        method: "wallet_getPermissions"
    });
    return permissions;
}
// src/actions/wallet/requestAddresses.ts
async function requestAddresses(client) {
    const addresses = await client.request({
        method: "eth_requestAccounts"
    });
    return addresses.map((address)=>getAddress(address));
}
// src/actions/wallet/requestPermissions.ts
async function requestPermissions(client, permissions) {
    return client.request({
        method: "wallet_requestPermissions",
        params: [
            permissions
        ]
    });
}
// src/actions/wallet/sendTransaction.ts
async function sendTransaction(client, args) {
    const { account , chain , accessList , assertChain =true , data , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce , to , value , ...rest } = args;
    try {
        assertRequest(args);
        const currentChainId = await getChainId(client);
        if (assertChain && chain && currentChainId !== chain?.id) throw new ChainMismatchError({
            chain,
            currentChainId
        });
        if (account.type === "local") {
            const chainId = chain?.id ?? currentChainId;
            const request2 = await prepareRequest(client, {
                account,
                accessList,
                chain,
                data,
                gas,
                gasPrice,
                maxFeePerGas,
                maxPriorityFeePerGas,
                nonce,
                to,
                value,
                ...rest
            });
            const signedRequest = await account.signTransaction({
                chainId,
                ...request2
            });
            return await client.request({
                method: "eth_sendRawTransaction",
                params: [
                    signedRequest
                ]
            });
        }
        const formatter = chain?.formatters?.transactionRequest;
        const request = format3({
            accessList,
            data,
            from: account.address,
            gas,
            gasPrice,
            maxFeePerGas,
            maxPriorityFeePerGas,
            nonce,
            to,
            value,
            // Pick out extra data that might exist on the chain's transaction request type.
            ...extract(rest, {
                formatter
            })
        }, {
            formatter: formatter || formatTransactionRequest
        });
        return await client.request({
            method: "eth_sendTransaction",
            params: [
                request
            ]
        });
    } catch (err) {
        throw getTransactionError(err, args);
    }
}
// src/actions/wallet/signMessage.ts
async function signMessage(client, { account , data  }) {
    if (account.type === "local") return account.signMessage(data);
    return client.request({
        method: "personal_sign",
        params: [
            toHex(data),
            account.address
        ]
    });
}
// src/actions/wallet/switchChain.ts
async function switchChain(client, { id: id2  }) {
    await client.request({
        method: "wallet_switchEthereumChain",
        params: [
            {
                chainId: numberToHex(id2)
            }
        ]
    });
}
// src/actions/wallet/watchAsset.ts
async function watchAsset(client, params) {
    const added = await client.request({
        method: "wallet_watchAsset",
        params: [
            params
        ]
    });
    return added;
}
// src/actions/wallet/writeContract.ts
async function writeContract(client, { abi , address , args , functionName , ...request }) {
    const data = encodeFunctionData({
        abi,
        args,
        functionName
    });
    const hash2 = await sendTransaction(client, {
        data,
        to: address,
        ...request
    });
    return hash2;
}
// src/utils/unit/parseUnits.ts
function parseUnits(value, decimals) {
    let [integer, fraction = "0"] = value.split(".");
    const negative = integer.startsWith("-");
    if (negative) integer = integer.slice(1);
    fraction = fraction.replace(/(0+)$/, "");
    if (decimals === 0) {
        integer = `${Math.round(Number(`${integer}.${fraction}`))}`;
        fraction = "";
    } else if (fraction.length > decimals) {
        const [before, after] = [
            fraction.slice(0, decimals),
            fraction.slice(decimals)
        ];
        fraction = `${/^0+$/.test(before) ? before.slice(0, before.length - 1) : ""}${Math.round(Number(`${before}.${after}`))}`;
    } else fraction = fraction.padEnd(decimals, "0");
    return BigInt(`${negative ? "-" : ""}${integer}${fraction}`);
}
// src/utils/unit/parseGwei.ts
function parseGwei(ether, unit = "wei") {
    return parseUnits(ether, gweiUnits[unit]);
}
// src/utils/transaction/prepareRequest.ts
var defaultTip = parseGwei("1.5");
async function prepareRequest(client, args) {
    const { account , gas , gasPrice , maxFeePerGas , maxPriorityFeePerGas , nonce  } = args;
    const block = await getBlock(client, {
        blockTag: "latest"
    });
    const request = {
        ...args,
        from: account.address
    };
    if (typeof nonce === "undefined") request.nonce = await getTransactionCount(client, {
        address: account.address,
        blockTag: "pending"
    });
    if (block.baseFeePerGas) {
        if (typeof gasPrice !== "undefined") throw new BaseError("Chain does not support legacy `gasPrice`.");
        if (typeof maxFeePerGas === "undefined") {
            request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip;
            request.maxFeePerGas = block.baseFeePerGas * 120n / 100n + request.maxPriorityFeePerGas;
        } else {
            if (typeof maxPriorityFeePerGas === "undefined" && maxFeePerGas < defaultTip) throw new BaseError("`maxFeePerGas` cannot be less than the default `maxPriorityFeePerGas` (1.5 gwei).");
            request.maxFeePerGas = maxFeePerGas;
            request.maxPriorityFeePerGas = maxPriorityFeePerGas ?? defaultTip;
        }
    } else {
        if (typeof maxFeePerGas !== "undefined" || typeof maxPriorityFeePerGas !== "undefined") throw new BaseError("Chain does not support EIP-1559 fees.");
        if (typeof gasPrice === "undefined") request.gasPrice = await getGasPrice(client) * 120n / 100n;
    }
    if (typeof gas === "undefined") request.gas = await estimateGas(client, {
        ...request,
        account: {
            address: account.address,
            type: "json-rpc"
        }
    });
    assertRequest(request);
    return request;
}
// src/utils/unit/formatUnits.ts
function formatUnits(value, decimals) {
    let display = value.toString();
    const negative = display.startsWith("-");
    if (negative) display = display.slice(1);
    display = display.padStart(decimals, "0");
    let [integer, fraction] = [
        display.slice(0, display.length - decimals),
        display.slice(display.length - decimals)
    ];
    fraction = fraction.replace(/(0+)$/, "");
    return `${negative ? "-" : ""}${integer || "0"}${fraction ? `.${fraction}` : ""}`;
}
// src/utils/unit/formatEther.ts
function formatEther(wei, unit = "wei") {
    return formatUnits(wei, etherUnits[unit]);
}
// src/utils/unit/formatGwei.ts
function formatGwei(wei, unit = "wei") {
    return formatUnits(wei, gweiUnits[unit]);
}
// src/utils/unit/parseEther.ts
function parseEther(ether, unit = "wei") {
    return parseUnits(ether, etherUnits[unit]);
}

},{"abitype":"1XjQl","@noble/hashes/sha3":"eSDgY","isomorphic-ws":"6s703","@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"1XjQl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BaseError", ()=>BaseError);
parcelHelpers.export(exports, "narrow", ()=>narrow);
parcelHelpers.export(exports, "parseAbi", ()=>parseAbi);
parcelHelpers.export(exports, "parseAbiItem", ()=>parseAbiItem);
parcelHelpers.export(exports, "parseAbiParameter", ()=>parseAbiParameter2);
parcelHelpers.export(exports, "parseAbiParameters", ()=>parseAbiParameters);
var _chunkWP7KDV47Mjs = require("./chunk-WP7KDV47.mjs");
var _chunkNHABU752Mjs = require("./chunk-NHABU752.mjs");
// package.json
var name = "abitype";
var version = "0.6.8";
// src/errors.ts
var BaseError = class extends Error {
    constructor(shortMessage, args = {}){
        const details = args.cause instanceof BaseError ? args.cause.details : args.cause?.message ? args.cause.message : args.details;
        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
            shortMessage || "An error occurred.",
            "",
            ...args.metaMessages ? [
                ...args.metaMessages,
                ""
            ] : [],
            ...docsPath ? [
                `Docs: https://abitype.dev${docsPath}`
            ] : [],
            ...details ? [
                `Details: ${details}`
            ] : [],
            `Version: ${name}@${version}`
        ].join("\n");
        super(message);
        (0, _chunkNHABU752Mjs.__publicField)(this, "details");
        (0, _chunkNHABU752Mjs.__publicField)(this, "docsPath");
        (0, _chunkNHABU752Mjs.__publicField)(this, "metaMessages");
        (0, _chunkNHABU752Mjs.__publicField)(this, "shortMessage");
        (0, _chunkNHABU752Mjs.__publicField)(this, "name", "AbiTypeError");
        if (args.cause) this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
    }
};
// src/narrow.ts
function narrow(value) {
    return value;
}
// src/human-readable/runtime/signatures.ts
var errorSignatureRegex = /^error (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)$/;
function isErrorSignature(signature) {
    return errorSignatureRegex.test(signature);
}
function execErrorSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(errorSignatureRegex, signature);
}
var eventSignatureRegex = /^event (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)$/;
function isEventSignature(signature) {
    return eventSignatureRegex.test(signature);
}
function execEventSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(eventSignatureRegex, signature);
}
var functionSignatureRegex = /^function (?<name>[a-zA-Z0-9_]+)\((?<parameters>.*?)\)(?: (?<scope>external|public{1}))?(?: (?<stateMutability>pure|view|nonpayable|payable{1}))?(?: returns \((?<returns>.*?)\))?$/;
function isFunctionSignature(signature) {
    return functionSignatureRegex.test(signature);
}
function execFunctionSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(functionSignatureRegex, signature);
}
var structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
function isStructSignature(signature) {
    return structSignatureRegex.test(signature);
}
function execStructSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(structSignatureRegex, signature);
}
var constructorSignatureRegex = /^constructor\((?<parameters>.*?)\)(?:\s(?<stateMutability>payable{1}))?$/;
function isConstructorSignature(signature) {
    return constructorSignatureRegex.test(signature);
}
function execConstructorSignature(signature) {
    return (0, _chunkWP7KDV47Mjs.execTyped)(constructorSignatureRegex, signature);
}
var fallbackSignatureRegex = /^fallback\(\)$/;
function isFallbackSignature(signature) {
    return fallbackSignatureRegex.test(signature);
}
var receiveSignatureRegex = /^receive\(\) external payable$/;
function isReceiveSignature(signature) {
    return receiveSignatureRegex.test(signature);
}
var modifiers = /* @__PURE__ */ new Set([
    "memory",
    "indexed",
    "storage",
    "calldata"
]);
var eventModifiers = /* @__PURE__ */ new Set([
    "indexed"
]);
var functionModifiers = /* @__PURE__ */ new Set([
    "calldata",
    "memory",
    "storage"
]);
// src/human-readable/runtime/cache.ts
function getParameterCacheKey(param, type) {
    if (type) return `${type}:${param}`;
    return param;
}
var parameterCache = /* @__PURE__ */ new Map([
    // Unnamed
    [
        "address",
        {
            type: "address"
        }
    ],
    [
        "bool",
        {
            type: "bool"
        }
    ],
    [
        "bytes",
        {
            type: "bytes"
        }
    ],
    [
        "bytes32",
        {
            type: "bytes32"
        }
    ],
    [
        "int",
        {
            type: "int256"
        }
    ],
    [
        "int256",
        {
            type: "int256"
        }
    ],
    [
        "string",
        {
            type: "string"
        }
    ],
    [
        "uint",
        {
            type: "uint256"
        }
    ],
    [
        "uint8",
        {
            type: "uint8"
        }
    ],
    [
        "uint16",
        {
            type: "uint16"
        }
    ],
    [
        "uint24",
        {
            type: "uint24"
        }
    ],
    [
        "uint32",
        {
            type: "uint32"
        }
    ],
    [
        "uint64",
        {
            type: "uint64"
        }
    ],
    [
        "uint96",
        {
            type: "uint96"
        }
    ],
    [
        "uint112",
        {
            type: "uint112"
        }
    ],
    [
        "uint160",
        {
            type: "uint160"
        }
    ],
    [
        "uint192",
        {
            type: "uint192"
        }
    ],
    [
        "uint256",
        {
            type: "uint256"
        }
    ],
    // Named
    [
        "address owner",
        {
            type: "address",
            name: "owner"
        }
    ],
    [
        "address to",
        {
            type: "address",
            name: "to"
        }
    ],
    [
        "bool approved",
        {
            type: "bool",
            name: "approved"
        }
    ],
    [
        "bytes _data",
        {
            type: "bytes",
            name: "_data"
        }
    ],
    [
        "bytes data",
        {
            type: "bytes",
            name: "data"
        }
    ],
    [
        "bytes signature",
        {
            type: "bytes",
            name: "signature"
        }
    ],
    [
        "bytes32 hash",
        {
            type: "bytes32",
            name: "hash"
        }
    ],
    [
        "bytes32 r",
        {
            type: "bytes32",
            name: "r"
        }
    ],
    [
        "bytes32 root",
        {
            type: "bytes32",
            name: "root"
        }
    ],
    [
        "bytes32 s",
        {
            type: "bytes32",
            name: "s"
        }
    ],
    [
        "string name",
        {
            type: "string",
            name: "name"
        }
    ],
    [
        "string symbol",
        {
            type: "string",
            name: "symbol"
        }
    ],
    [
        "string tokenURI",
        {
            type: "string",
            name: "tokenURI"
        }
    ],
    [
        "uint tokenId",
        {
            type: "uint256",
            name: "tokenId"
        }
    ],
    [
        "uint8 v",
        {
            type: "uint8",
            name: "v"
        }
    ],
    [
        "uint256 balance",
        {
            type: "uint256",
            name: "balance"
        }
    ],
    [
        "uint256 tokenId",
        {
            type: "uint256",
            name: "tokenId"
        }
    ],
    [
        "uint256 value",
        {
            type: "uint256",
            name: "value"
        }
    ],
    // Indexed
    [
        "event:address indexed from",
        {
            type: "address",
            name: "from",
            indexed: true
        }
    ],
    [
        "event:address indexed to",
        {
            type: "address",
            name: "to",
            indexed: true
        }
    ],
    [
        "event:uint indexed tokenId",
        {
            type: "uint256",
            name: "tokenId",
            indexed: true
        }
    ],
    [
        "event:uint256 indexed tokenId",
        {
            type: "uint256",
            name: "tokenId",
            indexed: true
        }
    ]
]);
// src/human-readable/runtime/utils.ts
function parseSignature(signature, structs = {}) {
    if (isFunctionSignature(signature)) {
        const match = execFunctionSignature(signature);
        if (!match) throw new BaseError("Invalid function signature.", {
            details: signature
        });
        const inputParams = splitParameters(match.parameters);
        const inputs = [];
        const inputLength = inputParams.length;
        for(let i = 0; i < inputLength; i++)inputs.push(parseAbiParameter(inputParams[i], {
            modifiers: functionModifiers,
            structs,
            type: "function"
        }));
        const outputs = [];
        if (match.returns) {
            const outputParams = splitParameters(match.returns);
            const outputLength = outputParams.length;
            for(let i = 0; i < outputLength; i++)outputs.push(parseAbiParameter(outputParams[i], {
                modifiers: functionModifiers,
                structs,
                type: "function"
            }));
        }
        return {
            name: match.name,
            type: "function",
            stateMutability: match.stateMutability ?? "nonpayable",
            inputs,
            outputs
        };
    }
    if (isEventSignature(signature)) {
        const match = execEventSignature(signature);
        if (!match) throw new BaseError("Invalid event signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            modifiers: eventModifiers,
            structs,
            type: "event"
        }));
        return {
            name: match.name,
            type: "event",
            inputs: abiParameters
        };
    }
    if (isErrorSignature(signature)) {
        const match = execErrorSignature(signature);
        if (!match) throw new BaseError("Invalid error signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            structs,
            type: "error"
        }));
        return {
            name: match.name,
            type: "error",
            inputs: abiParameters
        };
    }
    if (isConstructorSignature(signature)) {
        const match = execConstructorSignature(signature);
        if (!match) throw new BaseError("Invalid constructor signature.", {
            details: signature
        });
        const params = splitParameters(match.parameters);
        const abiParameters = [];
        const length = params.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(params[i], {
            structs,
            type: "constructor"
        }));
        return {
            type: "constructor",
            stateMutability: match.stateMutability ?? "nonpayable",
            inputs: abiParameters
        };
    }
    if (isFallbackSignature(signature)) return {
        type: "fallback"
    };
    if (isReceiveSignature(signature)) return {
        type: "receive",
        stateMutability: "payable"
    };
    throw new BaseError("Unknown signature.", {
        details: signature
    });
}
var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
function parseAbiParameter(param, options) {
    const parameterCacheKey = getParameterCacheKey(param, options?.type);
    if (parameterCache.has(parameterCacheKey)) return parameterCache.get(parameterCacheKey);
    const isTuple = (0, _chunkWP7KDV47Mjs.isTupleRegex).test(param);
    const match = (0, _chunkWP7KDV47Mjs.execTyped)(isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex, param);
    if (!match) throw new BaseError("Invalid ABI parameter.", {
        details: param
    });
    if (match.name && isProtectedSolidityKeyword(match.name)) throw new BaseError("Invalid ABI parameter.", {
        details: param,
        metaMessages: [
            `"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
        ]
    });
    const name2 = match.name ? {
        name: match.name
    } : {};
    const indexed = match.modifier === "indexed" ? {
        indexed: true
    } : {};
    const structs = options?.structs ?? {};
    let type;
    let components = {};
    if (isTuple) {
        type = "tuple";
        const params = splitParameters(match.type);
        const components_ = [];
        const length = params.length;
        for(let i = 0; i < length; i++)components_.push(parseAbiParameter(params[i], {
            structs
        }));
        components = {
            components: components_
        };
    } else if (match.type in structs) {
        type = "tuple";
        components = {
            components: structs[match.type]
        };
    } else {
        type = match.type;
        if (!(options?.type === "struct") && !isSolidityType(type)) throw new BaseError("Unknown type.", {
            metaMessages: [
                `Type "${type}" is not a valid ABI type.`
            ]
        });
    }
    if (match.modifier) {
        if (!options?.modifiers?.has?.(match.modifier)) throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
                `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`
            ]
        });
        if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array)) throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
                `Modifier "${match.modifier}" not allowed${options?.type ? ` in "${options.type}" type` : ""}.`,
                `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`
            ]
        });
    }
    const abiParameter = {
        type: `${type}${match.array ?? ""}`,
        ...name2,
        ...indexed,
        ...components
    };
    parameterCache.set(parameterCacheKey, abiParameter);
    return abiParameter;
}
function splitParameters(params, result = [], current = "", depth = 0) {
    if (params === "") {
        if (current === "") return result;
        if (depth !== 0) throw new BaseError("Unbalanced parentheses.", {
            metaMessages: [
                `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
            ],
            details: `Depth "${depth}"`
        });
        return [
            ...result,
            current.trim()
        ];
    }
    const length = params.length;
    for(let i = 0; i < length; i++){
        const char = params[i];
        const tail = params.slice(i + 1);
        switch(char){
            case ",":
                return depth === 0 ? splitParameters(tail, [
                    ...result,
                    current.trim()
                ]) : splitParameters(tail, result, `${current}${char}`, depth);
            case "(":
                return splitParameters(tail, result, `${current}${char}`, depth + 1);
            case ")":
                return splitParameters(tail, result, `${current}${char}`, depth - 1);
            default:
                return splitParameters(tail, result, `${current}${char}`, depth);
        }
    }
    return [];
}
function isSolidityType(type) {
    return type === "address" || type === "bool" || type === "function" || type === "string" || (0, _chunkWP7KDV47Mjs.bytesRegex).test(type) || (0, _chunkWP7KDV47Mjs.integerRegex).test(type);
}
var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
function isProtectedSolidityKeyword(name2) {
    return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || (0, _chunkWP7KDV47Mjs.bytesRegex).test(name2) || (0, _chunkWP7KDV47Mjs.integerRegex).test(name2) || protectedKeywordsRegex.test(name2);
}
function isValidDataLocation(type, isArray) {
    return isArray || type === "bytes" || type === "string" || type === "tuple";
}
// src/human-readable/runtime/structs.ts
function parseStructs(signatures) {
    const shallowStructs = {};
    const signaturesLength = signatures.length;
    for(let i = 0; i < signaturesLength; i++){
        const signature = signatures[i];
        if (!isStructSignature(signature)) continue;
        const match = execStructSignature(signature);
        if (!match) throw new BaseError("Invalid struct signature.", {
            details: signature
        });
        const properties = match.properties.split(";");
        const components = [];
        const propertiesLength = properties.length;
        for(let k = 0; k < propertiesLength; k++){
            const property = properties[k];
            const trimmed = property.trim();
            if (!trimmed) continue;
            const abiParameter = parseAbiParameter(trimmed, {
                type: "struct"
            });
            components.push(abiParameter);
        }
        if (!components.length) throw new BaseError("Invalid struct signature.", {
            details: signature,
            metaMessages: [
                "No properties exist."
            ]
        });
        shallowStructs[match.name] = components;
    }
    const resolvedStructs = {};
    const entries = Object.entries(shallowStructs);
    const entriesLength = entries.length;
    for(let i = 0; i < entriesLength; i++){
        const [name2, parameters] = entries[i];
        resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
    }
    return resolvedStructs;
}
var typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
    const components = [];
    const length = abiParameters.length;
    for(let i = 0; i < length; i++){
        const abiParameter = abiParameters[i];
        const isTuple = (0, _chunkWP7KDV47Mjs.isTupleRegex).test(abiParameter.type);
        if (isTuple) components.push(abiParameter);
        else {
            const match = (0, _chunkWP7KDV47Mjs.execTyped)(typeWithoutTupleRegex, abiParameter.type);
            if (!match?.type) throw new BaseError("Invalid ABI parameter.", {
                details: JSON.stringify(abiParameter, null, 2),
                metaMessages: [
                    "ABI parameter type is invalid."
                ]
            });
            const { array , type  } = match;
            if (type in structs) {
                if (ancestors.has(type)) throw new BaseError("Circular reference detected.", {
                    metaMessages: [
                        `Struct "${type}" is a circular reference.`
                    ]
                });
                components.push({
                    ...abiParameter,
                    type: `tuple${array ?? ""}`,
                    components: resolveStructs(structs[type] ?? [], structs, /* @__PURE__ */ new Set([
                        ...ancestors,
                        type
                    ]))
                });
            } else {
                if (isSolidityType(type)) components.push(abiParameter);
                else throw new BaseError("Unknown type.", {
                    metaMessages: [
                        `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
                    ]
                });
            }
        }
    }
    return components;
}
// src/human-readable/parseAbi.ts
function parseAbi(signatures) {
    const structs = parseStructs(signatures);
    const abi = [];
    const length = signatures.length;
    for(let i = 0; i < length; i++){
        const signature = signatures[i];
        if (isStructSignature(signature)) continue;
        abi.push(parseSignature(signature, structs));
    }
    return abi;
}
// src/human-readable/parseAbiItem.ts
function parseAbiItem(signature) {
    let abiItem;
    if (typeof signature === "string") abiItem = parseSignature(signature);
    else {
        const structs = parseStructs(signature);
        const length = signature.length;
        for(let i = 0; i < length; i++){
            const signature_ = signature[i];
            if (isStructSignature(signature_)) continue;
            abiItem = parseSignature(signature_, structs);
            break;
        }
    }
    if (!abiItem) throw new BaseError("Failed to parse ABI item.", {
        details: `parseAbiItem(${JSON.stringify(signature, null, 2)})`,
        docsPath: "/api/human.html#parseabiitem-1"
    });
    return abiItem;
}
// src/human-readable/parseAbiParameter.ts
function parseAbiParameter2(param) {
    let abiParameter;
    if (typeof param === "string") abiParameter = parseAbiParameter(param, {
        modifiers
    });
    else {
        const structs = parseStructs(param);
        const length = param.length;
        for(let i = 0; i < length; i++){
            const signature = param[i];
            if (isStructSignature(signature)) continue;
            abiParameter = parseAbiParameter(signature, {
                modifiers,
                structs
            });
            break;
        }
    }
    if (!abiParameter) throw new BaseError("Failed to parse ABI parameter.", {
        details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameter-1"
    });
    return abiParameter;
}
// src/human-readable/parseAbiParameters.ts
function parseAbiParameters(params) {
    const abiParameters = [];
    if (typeof params === "string") {
        const parameters = splitParameters(params);
        const length = parameters.length;
        for(let i = 0; i < length; i++)abiParameters.push(parseAbiParameter(parameters[i], {
            modifiers
        }));
    } else {
        const structs = parseStructs(params);
        const length = params.length;
        for(let i = 0; i < length; i++){
            const signature = params[i];
            if (isStructSignature(signature)) continue;
            const parameters = splitParameters(signature);
            const length2 = parameters.length;
            for(let k = 0; k < length2; k++)abiParameters.push(parseAbiParameter(parameters[k], {
                modifiers,
                structs
            }));
        }
    }
    if (abiParameters.length === 0) throw new BaseError("Failed to parse ABI parameters.", {
        details: `parseAbiParameters(${JSON.stringify(params, null, 2)})`,
        docsPath: "/api/human.html#parseabiparameters-1"
    });
    return abiParameters;
}

},{"./chunk-WP7KDV47.mjs":"aGXu6","./chunk-NHABU752.mjs":"5LGWN","@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"aGXu6":[function(require,module,exports) {
// src/regex.ts
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "execTyped", ()=>execTyped);
parcelHelpers.export(exports, "bytesRegex", ()=>bytesRegex);
parcelHelpers.export(exports, "integerRegex", ()=>integerRegex);
parcelHelpers.export(exports, "isTupleRegex", ()=>isTupleRegex);
function execTyped(regex, string) {
    const match = regex.exec(string);
    return match?.groups;
}
var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var isTupleRegex = /^\(.+?\).*?$/;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"5LGWN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__publicField", ()=>__publicField);
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {
        enumerable: true,
        configurable: true,
        writable: true,
        value
    }) : obj[key] = value;
var __publicField = (obj, key, value)=>{
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}],"eSDgY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
const _assert_js_1 = require("d69f5193865f1d13");
const _u64_js_1 = require("518844b03197ee9c");
const utils_js_1 = require("75de87cacfd1aef5");
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [
    [],
    [],
    []
];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for(let round = 0, R = _1n, x = 1, y = 0; round < 24; round++){
    // Pi
    [x, y] = [
        y,
        (2 * x + 3 * y) % 5
    ];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    // Iota
    let t = _0n;
    for(let j = 0; j < 7; j++){
        R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
        if (R & _2n) t ^= _1n << (_1n << BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = _u64_js_1.default.split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBH(h, l, s) : _u64_js_1.default.rotlSH(h, l, s);
const rotlL = (h, l, s)=>s > 32 ? _u64_js_1.default.rotlBL(h, l, s) : _u64_js_1.default.rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(10);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for(let round = 24 - rounds; round < 24; round++){
        // Theta \u03b8
        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(let x = 0; x < 10; x += 2){
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(let y = 0; y < 50; y += 10){
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (\u03c1) and Pi (\u03c0)
        let curH = s[2];
        let curL = s[3];
        for(let t = 0; t < 24; t++){
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (\u03c7)
        for(let y = 0; y < 50; y += 10){
            for(let x = 0; x < 10; x++)B[x] = s[y + x];
            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (\u03b9)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
exports.keccakP = keccakP;
class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        _assert_js_1.default.number(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        _assert_js_1.default.exists(this);
        const { blockLen , state  } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen) this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished) return;
        this.finished = true;
        const { state , suffix , pos , blockLen  } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        _assert_js_1.default.exists(this, false);
        _assert_js_1.default.bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen  } = this;
        for(let pos = 0, len = out.length; pos < len;){
            if (this.posOut >= blockLen) this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
    }
    xof(bytes) {
        _assert_js_1.default.number(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        _assert_js_1.default.output(out, this);
        if (this.finished) throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen , suffix , outputLen , rounds , enableXOF  } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
exports.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructor)(()=>new Keccak(blockLen, suffix, outputLen));
exports.sha3_224 = gen(0x06, 144, 28);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */ exports.sha3_256 = gen(0x06, 136, 32);
exports.sha3_384 = gen(0x06, 104, 48);
exports.sha3_512 = gen(0x06, 72, 64);
exports.keccak_224 = gen(0x01, 144, 28);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */ exports.keccak_256 = gen(0x01, 136, 32);
exports.keccak_384 = gen(0x01, 104, 48);
exports.keccak_512 = gen(0x01, 72, 64);
const genShake = (suffix, blockLen, outputLen)=>(0, utils_js_1.wrapConstructorWithOpts)((opts = {})=>new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
exports.shake128 = genShake(0x1f, 168, 16);
exports.shake256 = genShake(0x1f, 136, 32);

},{"d69f5193865f1d13":"6PyIj","518844b03197ee9c":"6UeSh","75de87cacfd1aef5":"4wPdS"}],"6PyIj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
exports.number = number;
function bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
exports.bool = bool;
function bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
exports.bytes = bytes;
function hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(hash.outputLen);
    number(hash.blockLen);
}
exports.hash = hash;
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
exports.exists = exists;
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
exports.output = output;
const assert = {
    number,
    bool,
    bytes,
    hash,
    exists,
    output
};
exports.default = assert;

},{}],"6UeSh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.add = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function fromBig(n, le = false) {
    if (le) return {
        h: Number(n & U32_MASK64),
        l: Number(n >> _32n & U32_MASK64)
    };
    return {
        h: Number(n >> _32n & U32_MASK64) | 0,
        l: Number(n & U32_MASK64) | 0
    };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h , l  } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
exports.split = split;
const toBig = (h, l)=>BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, l, s)=>h >>> s;
const shrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
const rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
const rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l)=>l;
const rotr32L = (h, l)=>h;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
const rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
const rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
// Removing "export" has 5% perf penalty -_-
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
const add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
const add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
const add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
const add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
const add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
// prettier-ignore
const u64 = {
    fromBig,
    split,
    toBig: exports.toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L
};
exports.default = u64;

},{}],"4wPdS":[function(require,module,exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
// The import here is via the package name. This is to ensure
// that exports mapping/resolution does fall into place.
const crypto_1 = require("3146b2d00c6452e0");
// Cast array to different type
const u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
exports.u8 = u8;
const u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
exports.u32 = u32;
// Cast array to view
const createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
exports.createView = createView;
// The rotate right (circular right shift) operation for uint32
const rotr = (word, shift)=>word << 32 - shift | word >>> shift;
exports.rotr = rotr;
exports.isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
// So, just to be sure not to corrupt anything.
if (!exports.isLE) throw new Error("Non little-endian hardware is not supported");
const hexes = Array.from({
    length: 256
}, (v, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))
 */ function bytesToHex(uint8a) {
    // pre-caching improves the speed 6x
    if (!(uint8a instanceof Uint8Array)) throw new Error("Uint8Array expected");
    let hex = "";
    for(let i = 0; i < uint8a.length; i++)hex += hexes[uint8a[i]];
    return hex;
}
exports.bytesToHex = bytesToHex;
/**
 * @example hexToBytes('deadbeef')
 */ function hexToBytes(hex) {
    if (typeof hex !== "string") throw new TypeError("hexToBytes: expected string, got " + typeof hex);
    if (hex.length % 2) throw new Error("hexToBytes: received invalid unpadded hex");
    const array = new Uint8Array(hex.length / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
exports.hexToBytes = hexToBytes;
// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise
// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.
const nextTick = async ()=>{};
exports.nextTick = nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await (0, exports.nextTick)();
        ts += diff;
    }
}
exports.asyncLoop = asyncLoop;
function utf8ToBytes(str) {
    if (typeof str !== "string") throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
    return new TextEncoder().encode(str);
}
exports.utf8ToBytes = utf8ToBytes;
function toBytes(data) {
    if (typeof data === "string") data = utf8ToBytes(data);
    if (!(data instanceof Uint8Array)) throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
    return data;
}
exports.toBytes = toBytes;
/**
 * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`
 * @example concatBytes(buf1, buf2)
 */ function concatBytes(...arrays) {
    if (!arrays.every((a)=>a instanceof Uint8Array)) throw new Error("Uint8Array list expected");
    if (arrays.length === 1) return arrays[0];
    const length = arrays.reduce((a, arr)=>a + arr.length, 0);
    const result = new Uint8Array(length);
    for(let i = 0, pad = 0; i < arrays.length; i++){
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
exports.concatBytes = concatBytes;
// For runtime check if class implements interface
class Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
exports.Hash = Hash;
// Check if object doens't have custom constructor (like Uint8Array/Array)
const isPlainObject = (obj)=>Object.prototype.toString.call(obj) === "[object Object]" && obj.constructor === Object;
function checkOpts(defaults, opts) {
    if (opts !== undefined && (typeof opts !== "object" || !isPlainObject(opts))) throw new TypeError("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
exports.checkOpts = checkOpts;
function wrapConstructor(hashConstructor) {
    const hashC = (message)=>hashConstructor().update(toBytes(message)).digest();
    const tmp = hashConstructor();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashConstructor();
    return hashC;
}
exports.wrapConstructor = wrapConstructor;
function wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update(toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
/**
 * Secure PRNG
 */ function randomBytes(bytesLength = 32) {
    if (crypto_1.crypto.web) return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));
    else if (crypto_1.crypto.node) return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);
    else throw new Error("The environment doesn't have randomBytes function");
}
exports.randomBytes = randomBytes;

},{"3146b2d00c6452e0":"5oIyK"}],"5oIyK":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.crypto = void 0;
const nodeCrypto = require("c6057942cd8547b9");
exports.crypto = {
    node: nodeCrypto,
    web: undefined
};

},{"c6057942cd8547b9":"ejjDo"}],"ejjDo":[function(require,module,exports) {
var global = arguments[3];
var process = require("5bbaa25c67b48a86");
var Buffer = require("47560951658fc921").Buffer;
var Np = Object.create;
var bf = Object.defineProperty;
var Op = Object.getOwnPropertyDescriptor;
var Fp = Object.getOwnPropertyNames;
var Up = Object.getPrototypeOf, zp = Object.prototype.hasOwnProperty;
var q = (t, e)=>()=>(e || t((e = {
            exports: {}
        }).exports, e), e.exports), Hp = (t, e)=>{
    for(var r in e)bf(t, r, {
        get: e[r],
        enumerable: !0
    });
}, pf = (t, e, r, i)=>{
    if (e && typeof e == "object" || typeof e == "function") for (let n of Fp(e))!zp.call(t, n) && n !== r && bf(t, n, {
        get: ()=>e[n],
        enumerable: !(i = Op(e, n)) || i.enumerable
    });
    return t;
}, Sn = (t, e, r)=>(pf(t, e, "default"), r && pf(r, e, "default")), ks = (t, e, r)=>(r = t != null ? Np(Up(t)) : {}, pf(e || !t || !t.__esModule ? bf(r, "default", {
        value: t,
        enumerable: !0
    }) : r, t)), jp = (t)=>pf(bf({}, "__esModule", {
        value: !0
    }), t);
var Ps = q((vf)=>{
    "use strict";
    vf.byteLength = Wp;
    vf.toByteArray = Gp;
    vf.fromByteArray = Yp;
    var jt = [], pt = [], Kp = typeof Uint8Array < "u" ? Uint8Array : Array, Qa = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(Gr = 0, Cs = Qa.length; Gr < Cs; ++Gr)jt[Gr] = Qa[Gr], pt[Qa.charCodeAt(Gr)] = Gr;
    var Gr, Cs;
    pt["-".charCodeAt(0)] = 62;
    pt["_".charCodeAt(0)] = 63;
    function Ts(t) {
        var e = t.length;
        if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var r = t.indexOf("=");
        r === -1 && (r = e);
        var i = r === e ? 0 : 4 - r % 4;
        return [
            r,
            i
        ];
    }
    function Wp(t) {
        var e = Ts(t), r = e[0], i = e[1];
        return (r + i) * 3 / 4 - i;
    }
    function Vp(t, e, r) {
        return (e + r) * 3 / 4 - r;
    }
    function Gp(t) {
        var e, r = Ts(t), i = r[0], n = r[1], f = new Kp(Vp(t, i, n)), o = 0, u = n > 0 ? i - 4 : i, v;
        for(v = 0; v < u; v += 4)e = pt[t.charCodeAt(v)] << 18 | pt[t.charCodeAt(v + 1)] << 12 | pt[t.charCodeAt(v + 2)] << 6 | pt[t.charCodeAt(v + 3)], f[o++] = e >> 16 & 255, f[o++] = e >> 8 & 255, f[o++] = e & 255;
        return n === 2 && (e = pt[t.charCodeAt(v)] << 2 | pt[t.charCodeAt(v + 1)] >> 4, f[o++] = e & 255), n === 1 && (e = pt[t.charCodeAt(v)] << 10 | pt[t.charCodeAt(v + 1)] << 4 | pt[t.charCodeAt(v + 2)] >> 2, f[o++] = e >> 8 & 255, f[o++] = e & 255), f;
    }
    function Zp(t) {
        return jt[t >> 18 & 63] + jt[t >> 12 & 63] + jt[t >> 6 & 63] + jt[t & 63];
    }
    function Xp(t, e, r) {
        for(var i, n = [], f = e; f < r; f += 3)i = (t[f] << 16 & 16711680) + (t[f + 1] << 8 & 65280) + (t[f + 2] & 255), n.push(Zp(i));
        return n.join("");
    }
    function Yp(t) {
        for(var e, r = t.length, i = r % 3, n = [], f = 16383, o = 0, u = r - i; o < u; o += f)n.push(Xp(t, o, o + f > u ? u : o + f));
        return i === 1 ? (e = t[r - 1], n.push(jt[e >> 2] + jt[e << 4 & 63] + "==")) : i === 2 && (e = (t[r - 2] << 8) + t[r - 1], n.push(jt[e >> 10] + jt[e >> 4 & 63] + jt[e << 2 & 63] + "=")), n.join("");
    }
});
var Ds = q((e0)=>{
    e0.read = function(t, e, r, i, n) {
        var f, o, u = n * 8 - i - 1, v = (1 << u) - 1, _ = v >> 1, x = -7, E = r ? n - 1 : 0, A = r ? -1 : 1, B = t[e + E];
        for(E += A, f = B & (1 << -x) - 1, B >>= -x, x += u; x > 0; f = f * 256 + t[e + E], E += A, x -= 8);
        for(o = f & (1 << -x) - 1, f >>= -x, x += i; x > 0; o = o * 256 + t[e + E], E += A, x -= 8);
        if (f === 0) f = 1 - _;
        else {
            if (f === v) return o ? NaN : (B ? -1 : 1) * (1 / 0);
            o = o + Math.pow(2, i), f = f - _;
        }
        return (B ? -1 : 1) * o * Math.pow(2, f - i);
    };
    e0.write = function(t, e, r, i, n, f) {
        var o, u, v, _ = f * 8 - n - 1, x = (1 << _) - 1, E = x >> 1, A = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, B = i ? 0 : f - 1, I = i ? 1 : -1, P = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
        for(e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (u = isNaN(e) ? 1 : 0, o = x) : (o = Math.floor(Math.log(e) / Math.LN2), e * (v = Math.pow(2, -o)) < 1 && (o--, v *= 2), o + E >= 1 ? e += A / v : e += A * Math.pow(2, 1 - E), e * v >= 2 && (o++, v /= 2), o + E >= x ? (u = 0, o = x) : o + E >= 1 ? (u = (e * v - 1) * Math.pow(2, n), o = o + E) : (u = e * Math.pow(2, E - 1) * Math.pow(2, n), o = 0)); n >= 8; t[r + B] = u & 255, B += I, u /= 256, n -= 8);
        for(o = o << n | u, _ += n; _ > 0; t[r + B] = o & 255, B += I, o /= 256, _ -= 8);
        t[r + B - I] |= P * 128;
    };
});
var Xr = q((qi)=>{
    "use strict";
    var t0 = Ps(), Ai = Ds(), Ls = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    qi.Buffer = R;
    qi.SlowBuffer = r2;
    qi.INSPECT_MAX_BYTES = 50;
    var yf = 2147483647;
    qi.kMaxLength = yf;
    R.TYPED_ARRAY_SUPPORT = Jp();
    !R.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function Jp() {
        try {
            let t = new Uint8Array(1), e = {
                foo: function() {
                    return 42;
                }
            };
            return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(t, e), t.foo() === 42;
        } catch (t) {
            return !1;
        }
    }
    Object.defineProperty(R.prototype, "parent", {
        enumerable: !0,
        get: function() {
            if (R.isBuffer(this)) return this.buffer;
        }
    });
    Object.defineProperty(R.prototype, "offset", {
        enumerable: !0,
        get: function() {
            if (R.isBuffer(this)) return this.byteOffset;
        }
    });
    function rr(t) {
        if (t > yf) throw new RangeError('The value "' + t + '" is invalid for option "size"');
        let e = new Uint8Array(t);
        return Object.setPrototypeOf(e, R.prototype), e;
    }
    function R(t, e, r) {
        if (typeof t == "number") {
            if (typeof e == "string") throw new TypeError('The "string" argument must be of type string. Received type number');
            return f0(t);
        }
        return Us(t, e, r);
    }
    R.poolSize = 8192;
    function Us(t, e, r) {
        if (typeof t == "string") return Qp(t, e);
        if (ArrayBuffer.isView(t)) return e2(t);
        if (t == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
        if (Kt(t, ArrayBuffer) || t && Kt(t.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (Kt(t, SharedArrayBuffer) || t && Kt(t.buffer, SharedArrayBuffer))) return i0(t, e, r);
        if (typeof t == "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
        let i = t.valueOf && t.valueOf();
        if (i != null && i !== t) return R.from(i, e, r);
        let n = t2(t);
        if (n) return n;
        if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof t[Symbol.toPrimitive] == "function") return R.from(t[Symbol.toPrimitive]("string"), e, r);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
    }
    R.from = function(t, e, r) {
        return Us(t, e, r);
    };
    Object.setPrototypeOf(R.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(R, Uint8Array);
    function zs(t) {
        if (typeof t != "number") throw new TypeError('"size" argument must be of type number');
        if (t < 0) throw new RangeError('The value "' + t + '" is invalid for option "size"');
    }
    function $p(t, e, r) {
        return zs(t), t <= 0 ? rr(t) : e !== void 0 ? typeof r == "string" ? rr(t).fill(e, r) : rr(t).fill(e) : rr(t);
    }
    R.alloc = function(t, e, r) {
        return $p(t, e, r);
    };
    function f0(t) {
        return zs(t), rr(t < 0 ? 0 : a0(t) | 0);
    }
    R.allocUnsafe = function(t) {
        return f0(t);
    };
    R.allocUnsafeSlow = function(t) {
        return f0(t);
    };
    function Qp(t, e) {
        if ((typeof e != "string" || e === "") && (e = "utf8"), !R.isEncoding(e)) throw new TypeError("Unknown encoding: " + e);
        let r = Hs(t, e) | 0, i = rr(r), n = i.write(t, e);
        return n !== r && (i = i.slice(0, n)), i;
    }
    function r0(t) {
        let e = t.length < 0 ? 0 : a0(t.length) | 0, r = rr(e);
        for(let i = 0; i < e; i += 1)r[i] = t[i] & 255;
        return r;
    }
    function e2(t) {
        if (Kt(t, Uint8Array)) {
            let e = new Uint8Array(t);
            return i0(e.buffer, e.byteOffset, e.byteLength);
        }
        return r0(t);
    }
    function i0(t, e, r) {
        if (e < 0 || t.byteLength < e) throw new RangeError('"offset" is outside of buffer bounds');
        if (t.byteLength < e + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
        let i;
        return e === void 0 && r === void 0 ? i = new Uint8Array(t) : r === void 0 ? i = new Uint8Array(t, e) : i = new Uint8Array(t, e, r), Object.setPrototypeOf(i, R.prototype), i;
    }
    function t2(t) {
        if (R.isBuffer(t)) {
            let e = a0(t.length) | 0, r = rr(e);
            return r.length === 0 || t.copy(r, 0, 0, e), r;
        }
        if (t.length !== void 0) return typeof t.length != "number" || s0(t.length) ? rr(0) : r0(t);
        if (t.type === "Buffer" && Array.isArray(t.data)) return r0(t.data);
    }
    function a0(t) {
        if (t >= yf) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + yf.toString(16) + " bytes");
        return t | 0;
    }
    function r2(t) {
        return +t != t && (t = 0), R.alloc(+t);
    }
    R.isBuffer = function(e) {
        return e != null && e._isBuffer === !0 && e !== R.prototype;
    };
    R.compare = function(e, r) {
        if (Kt(e, Uint8Array) && (e = R.from(e, e.offset, e.byteLength)), Kt(r, Uint8Array) && (r = R.from(r, r.offset, r.byteLength)), !R.isBuffer(e) || !R.isBuffer(r)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (e === r) return 0;
        let i = e.length, n = r.length;
        for(let f = 0, o = Math.min(i, n); f < o; ++f)if (e[f] !== r[f]) {
            i = e[f], n = r[f];
            break;
        }
        return i < n ? -1 : n < i ? 1 : 0;
    };
    R.isEncoding = function(e) {
        switch(String(e).toLowerCase()){
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return !0;
            default:
                return !1;
        }
    };
    R.concat = function(e, r) {
        if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (e.length === 0) return R.alloc(0);
        let i;
        if (r === void 0) for(r = 0, i = 0; i < e.length; ++i)r += e[i].length;
        let n = R.allocUnsafe(r), f = 0;
        for(i = 0; i < e.length; ++i){
            let o = e[i];
            if (Kt(o, Uint8Array)) f + o.length > n.length ? (R.isBuffer(o) || (o = R.from(o)), o.copy(n, f)) : Uint8Array.prototype.set.call(n, o, f);
            else if (R.isBuffer(o)) o.copy(n, f);
            else throw new TypeError('"list" argument must be an Array of Buffers');
            f += o.length;
        }
        return n;
    };
    function Hs(t, e) {
        if (R.isBuffer(t)) return t.length;
        if (ArrayBuffer.isView(t) || Kt(t, ArrayBuffer)) return t.byteLength;
        if (typeof t != "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t);
        let r = t.length, i = arguments.length > 2 && arguments[2] === !0;
        if (!i && r === 0) return 0;
        let n = !1;
        for(;;)switch(e){
            case "ascii":
            case "latin1":
            case "binary":
                return r;
            case "utf8":
            case "utf-8":
                return n0(t).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return r * 2;
            case "hex":
                return r >>> 1;
            case "base64":
                return Js(t).length;
            default:
                if (n) return i ? -1 : n0(t).length;
                e = ("" + e).toLowerCase(), n = !0;
        }
    }
    R.byteLength = Hs;
    function i2(t, e, r) {
        let i = !1;
        if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, e >>>= 0, r <= e)) return "";
        for(t || (t = "utf8");;)switch(t){
            case "hex":
                return l2(this, e, r);
            case "utf8":
            case "utf-8":
                return Ks(this, e, r);
            case "ascii":
                return u2(this, e, r);
            case "latin1":
            case "binary":
                return d2(this, e, r);
            case "base64":
                return h2(this, e, r);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return p2(this, e, r);
            default:
                if (i) throw new TypeError("Unknown encoding: " + t);
                t = (t + "").toLowerCase(), i = !0;
        }
    }
    R.prototype._isBuffer = !0;
    function Zr(t, e, r) {
        let i = t[e];
        t[e] = t[r], t[r] = i;
    }
    R.prototype.swap16 = function() {
        let e = this.length;
        if (e % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for(let r = 0; r < e; r += 2)Zr(this, r, r + 1);
        return this;
    };
    R.prototype.swap32 = function() {
        let e = this.length;
        if (e % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for(let r = 0; r < e; r += 4)Zr(this, r, r + 3), Zr(this, r + 1, r + 2);
        return this;
    };
    R.prototype.swap64 = function() {
        let e = this.length;
        if (e % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for(let r = 0; r < e; r += 8)Zr(this, r, r + 7), Zr(this, r + 1, r + 6), Zr(this, r + 2, r + 5), Zr(this, r + 3, r + 4);
        return this;
    };
    R.prototype.toString = function() {
        let e = this.length;
        return e === 0 ? "" : arguments.length === 0 ? Ks(this, 0, e) : i2.apply(this, arguments);
    };
    R.prototype.toLocaleString = R.prototype.toString;
    R.prototype.equals = function(e) {
        if (!R.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
        return this === e ? !0 : R.compare(this, e) === 0;
    };
    R.prototype.inspect = function() {
        let e = "", r = qi.INSPECT_MAX_BYTES;
        return e = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(), this.length > r && (e += " ... "), "<Buffer " + e + ">";
    };
    Ls && (R.prototype[Ls] = R.prototype.inspect);
    R.prototype.compare = function(e, r, i, n, f) {
        if (Kt(e, Uint8Array) && (e = R.from(e, e.offset, e.byteLength)), !R.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
        if (r === void 0 && (r = 0), i === void 0 && (i = e ? e.length : 0), n === void 0 && (n = 0), f === void 0 && (f = this.length), r < 0 || i > e.length || n < 0 || f > this.length) throw new RangeError("out of range index");
        if (n >= f && r >= i) return 0;
        if (n >= f) return -1;
        if (r >= i) return 1;
        if (r >>>= 0, i >>>= 0, n >>>= 0, f >>>= 0, this === e) return 0;
        let o = f - n, u = i - r, v = Math.min(o, u), _ = this.slice(n, f), x = e.slice(r, i);
        for(let E = 0; E < v; ++E)if (_[E] !== x[E]) {
            o = _[E], u = x[E];
            break;
        }
        return o < u ? -1 : u < o ? 1 : 0;
    };
    function js(t, e, r, i, n) {
        if (t.length === 0) return -1;
        if (typeof r == "string" ? (i = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, s0(r) && (r = n ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
            if (n) return -1;
            r = t.length - 1;
        } else if (r < 0) {
            if (n) r = 0;
            else return -1;
        }
        if (typeof e == "string" && (e = R.from(e, i)), R.isBuffer(e)) return e.length === 0 ? -1 : Ns(t, e, r, i, n);
        if (typeof e == "number") return e = e & 255, typeof Uint8Array.prototype.indexOf == "function" ? n ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : Ns(t, [
            e
        ], r, i, n);
        throw new TypeError("val must be string, number or Buffer");
    }
    function Ns(t, e, r, i, n) {
        let f = 1, o = t.length, u = e.length;
        if (i !== void 0 && (i = String(i).toLowerCase(), i === "ucs2" || i === "ucs-2" || i === "utf16le" || i === "utf-16le")) {
            if (t.length < 2 || e.length < 2) return -1;
            f = 2, o /= 2, u /= 2, r /= 2;
        }
        function v(x, E) {
            return f === 1 ? x[E] : x.readUInt16BE(E * f);
        }
        let _;
        if (n) {
            let x = -1;
            for(_ = r; _ < o; _++)if (v(t, _) === v(e, x === -1 ? 0 : _ - x)) {
                if (x === -1 && (x = _), _ - x + 1 === u) return x * f;
            } else x !== -1 && (_ -= _ - x), x = -1;
        } else for(r + u > o && (r = o - u), _ = r; _ >= 0; _--){
            let x = !0;
            for(let E = 0; E < u; E++)if (v(t, _ + E) !== v(e, E)) {
                x = !1;
                break;
            }
            if (x) return _;
        }
        return -1;
    }
    R.prototype.includes = function(e, r, i) {
        return this.indexOf(e, r, i) !== -1;
    };
    R.prototype.indexOf = function(e, r, i) {
        return js(this, e, r, i, !0);
    };
    R.prototype.lastIndexOf = function(e, r, i) {
        return js(this, e, r, i, !1);
    };
    function n2(t, e, r, i) {
        r = Number(r) || 0;
        let n = t.length - r;
        i ? (i = Number(i), i > n && (i = n)) : i = n;
        let f = e.length;
        i > f / 2 && (i = f / 2);
        let o;
        for(o = 0; o < i; ++o){
            let u = parseInt(e.substr(o * 2, 2), 16);
            if (s0(u)) return o;
            t[r + o] = u;
        }
        return o;
    }
    function f2(t, e, r, i) {
        return mf(n0(e, t.length - r), t, r, i);
    }
    function a2(t, e, r, i) {
        return mf(m2(e), t, r, i);
    }
    function o2(t, e, r, i) {
        return mf(Js(e), t, r, i);
    }
    function s2(t, e, r, i) {
        return mf(g2(e, t.length - r), t, r, i);
    }
    R.prototype.write = function(e, r, i, n) {
        if (r === void 0) n = "utf8", i = this.length, r = 0;
        else if (i === void 0 && typeof r == "string") n = r, i = this.length, r = 0;
        else if (isFinite(r)) r = r >>> 0, isFinite(i) ? (i = i >>> 0, n === void 0 && (n = "utf8")) : (n = i, i = void 0);
        else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        let f = this.length - r;
        if ((i === void 0 || i > f) && (i = f), e.length > 0 && (i < 0 || r < 0) || r > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        n || (n = "utf8");
        let o = !1;
        for(;;)switch(n){
            case "hex":
                return n2(this, e, r, i);
            case "utf8":
            case "utf-8":
                return f2(this, e, r, i);
            case "ascii":
            case "latin1":
            case "binary":
                return a2(this, e, r, i);
            case "base64":
                return o2(this, e, r, i);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return s2(this, e, r, i);
            default:
                if (o) throw new TypeError("Unknown encoding: " + n);
                n = ("" + n).toLowerCase(), o = !0;
        }
    };
    R.prototype.toJSON = function() {
        return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
        };
    };
    function h2(t, e, r) {
        return e === 0 && r === t.length ? t0.fromByteArray(t) : t0.fromByteArray(t.slice(e, r));
    }
    function Ks(t, e, r) {
        r = Math.min(t.length, r);
        let i = [], n = e;
        for(; n < r;){
            let f = t[n], o = null, u = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
            if (n + u <= r) {
                let v, _, x, E;
                switch(u){
                    case 1:
                        f < 128 && (o = f);
                        break;
                    case 2:
                        v = t[n + 1], (v & 192) === 128 && (E = (f & 31) << 6 | v & 63, E > 127 && (o = E));
                        break;
                    case 3:
                        v = t[n + 1], _ = t[n + 2], (v & 192) === 128 && (_ & 192) === 128 && (E = (f & 15) << 12 | (v & 63) << 6 | _ & 63, E > 2047 && (E < 55296 || E > 57343) && (o = E));
                        break;
                    case 4:
                        v = t[n + 1], _ = t[n + 2], x = t[n + 3], (v & 192) === 128 && (_ & 192) === 128 && (x & 192) === 128 && (E = (f & 15) << 18 | (v & 63) << 12 | (_ & 63) << 6 | x & 63, E > 65535 && E < 1114112 && (o = E));
                }
            }
            o === null ? (o = 65533, u = 1) : o > 65535 && (o -= 65536, i.push(o >>> 10 & 1023 | 55296), o = 56320 | o & 1023), i.push(o), n += u;
        }
        return c2(i);
    }
    var Os = 4096;
    function c2(t) {
        let e = t.length;
        if (e <= Os) return String.fromCharCode.apply(String, t);
        let r = "", i = 0;
        for(; i < e;)r += String.fromCharCode.apply(String, t.slice(i, i += Os));
        return r;
    }
    function u2(t, e, r) {
        let i = "";
        r = Math.min(t.length, r);
        for(let n = e; n < r; ++n)i += String.fromCharCode(t[n] & 127);
        return i;
    }
    function d2(t, e, r) {
        let i = "";
        r = Math.min(t.length, r);
        for(let n = e; n < r; ++n)i += String.fromCharCode(t[n]);
        return i;
    }
    function l2(t, e, r) {
        let i = t.length;
        (!e || e < 0) && (e = 0), (!r || r < 0 || r > i) && (r = i);
        let n = "";
        for(let f = e; f < r; ++f)n += _2[t[f]];
        return n;
    }
    function p2(t, e, r) {
        let i = t.slice(e, r), n = "";
        for(let f = 0; f < i.length - 1; f += 2)n += String.fromCharCode(i[f] + i[f + 1] * 256);
        return n;
    }
    R.prototype.slice = function(e, r) {
        let i = this.length;
        e = ~~e, r = r === void 0 ? i : ~~r, e < 0 ? (e += i, e < 0 && (e = 0)) : e > i && (e = i), r < 0 ? (r += i, r < 0 && (r = 0)) : r > i && (r = i), r < e && (r = e);
        let n = this.subarray(e, r);
        return Object.setPrototypeOf(n, R.prototype), n;
    };
    function Ke(t, e, r) {
        if (t % 1 !== 0 || t < 0) throw new RangeError("offset is not uint");
        if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
    }
    R.prototype.readUintLE = R.prototype.readUIntLE = function(e, r, i) {
        e = e >>> 0, r = r >>> 0, i || Ke(e, r, this.length);
        let n = this[e], f = 1, o = 0;
        for(; ++o < r && (f *= 256);)n += this[e + o] * f;
        return n;
    };
    R.prototype.readUintBE = R.prototype.readUIntBE = function(e, r, i) {
        e = e >>> 0, r = r >>> 0, i || Ke(e, r, this.length);
        let n = this[e + --r], f = 1;
        for(; r > 0 && (f *= 256);)n += this[e + --r] * f;
        return n;
    };
    R.prototype.readUint8 = R.prototype.readUInt8 = function(e, r) {
        return e = e >>> 0, r || Ke(e, 1, this.length), this[e];
    };
    R.prototype.readUint16LE = R.prototype.readUInt16LE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 2, this.length), this[e] | this[e + 1] << 8;
    };
    R.prototype.readUint16BE = R.prototype.readUInt16BE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 2, this.length), this[e] << 8 | this[e + 1];
    };
    R.prototype.readUint32LE = R.prototype.readUInt32LE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
    };
    R.prototype.readUint32BE = R.prototype.readUInt32BE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
    };
    R.prototype.readBigUInt64LE = vr(function(e) {
        e = e >>> 0, Bi(e, "offset");
        let r = this[e], i = this[e + 7];
        (r === void 0 || i === void 0) && An(e, this.length - 8);
        let n = r + this[++e] * 256 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24, f = this[++e] + this[++e] * 256 + this[++e] * 2 ** 16 + i * 2 ** 24;
        return BigInt(n) + (BigInt(f) << BigInt(32));
    });
    R.prototype.readBigUInt64BE = vr(function(e) {
        e = e >>> 0, Bi(e, "offset");
        let r = this[e], i = this[e + 7];
        (r === void 0 || i === void 0) && An(e, this.length - 8);
        let n = r * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 256 + this[++e], f = this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 256 + i;
        return (BigInt(n) << BigInt(32)) + BigInt(f);
    });
    R.prototype.readIntLE = function(e, r, i) {
        e = e >>> 0, r = r >>> 0, i || Ke(e, r, this.length);
        let n = this[e], f = 1, o = 0;
        for(; ++o < r && (f *= 256);)n += this[e + o] * f;
        return f *= 128, n >= f && (n -= Math.pow(2, 8 * r)), n;
    };
    R.prototype.readIntBE = function(e, r, i) {
        e = e >>> 0, r = r >>> 0, i || Ke(e, r, this.length);
        let n = r, f = 1, o = this[e + --n];
        for(; n > 0 && (f *= 256);)o += this[e + --n] * f;
        return f *= 128, o >= f && (o -= Math.pow(2, 8 * r)), o;
    };
    R.prototype.readInt8 = function(e, r) {
        return e = e >>> 0, r || Ke(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];
    };
    R.prototype.readInt16LE = function(e, r) {
        e = e >>> 0, r || Ke(e, 2, this.length);
        let i = this[e] | this[e + 1] << 8;
        return i & 32768 ? i | 4294901760 : i;
    };
    R.prototype.readInt16BE = function(e, r) {
        e = e >>> 0, r || Ke(e, 2, this.length);
        let i = this[e + 1] | this[e] << 8;
        return i & 32768 ? i | 4294901760 : i;
    };
    R.prototype.readInt32LE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
    };
    R.prototype.readInt32BE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
    };
    R.prototype.readBigInt64LE = vr(function(e) {
        e = e >>> 0, Bi(e, "offset");
        let r = this[e], i = this[e + 7];
        (r === void 0 || i === void 0) && An(e, this.length - 8);
        let n = this[e + 4] + this[e + 5] * 256 + this[e + 6] * 2 ** 16 + (i << 24);
        return (BigInt(n) << BigInt(32)) + BigInt(r + this[++e] * 256 + this[++e] * 2 ** 16 + this[++e] * 2 ** 24);
    });
    R.prototype.readBigInt64BE = vr(function(e) {
        e = e >>> 0, Bi(e, "offset");
        let r = this[e], i = this[e + 7];
        (r === void 0 || i === void 0) && An(e, this.length - 8);
        let n = (r << 24) + this[++e] * 2 ** 16 + this[++e] * 256 + this[++e];
        return (BigInt(n) << BigInt(32)) + BigInt(this[++e] * 2 ** 24 + this[++e] * 2 ** 16 + this[++e] * 256 + i);
    });
    R.prototype.readFloatLE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), Ai.read(this, e, !0, 23, 4);
    };
    R.prototype.readFloatBE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 4, this.length), Ai.read(this, e, !1, 23, 4);
    };
    R.prototype.readDoubleLE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 8, this.length), Ai.read(this, e, !0, 52, 8);
    };
    R.prototype.readDoubleBE = function(e, r) {
        return e = e >>> 0, r || Ke(e, 8, this.length), Ai.read(this, e, !1, 52, 8);
    };
    function ft(t, e, r, i, n, f) {
        if (!R.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (e > n || e < f) throw new RangeError('"value" argument is out of bounds');
        if (r + i > t.length) throw new RangeError("Index out of range");
    }
    R.prototype.writeUintLE = R.prototype.writeUIntLE = function(e, r, i, n) {
        if (e = +e, r = r >>> 0, i = i >>> 0, !n) {
            let u = Math.pow(2, 8 * i) - 1;
            ft(this, e, r, i, u, 0);
        }
        let f = 1, o = 0;
        for(this[r] = e & 255; ++o < i && (f *= 256);)this[r + o] = e / f & 255;
        return r + i;
    };
    R.prototype.writeUintBE = R.prototype.writeUIntBE = function(e, r, i, n) {
        if (e = +e, r = r >>> 0, i = i >>> 0, !n) {
            let u = Math.pow(2, 8 * i) - 1;
            ft(this, e, r, i, u, 0);
        }
        let f = i - 1, o = 1;
        for(this[r + f] = e & 255; --f >= 0 && (o *= 256);)this[r + f] = e / o & 255;
        return r + i;
    };
    R.prototype.writeUint8 = R.prototype.writeUInt8 = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 1, 255, 0), this[r] = e & 255, r + 1;
    };
    R.prototype.writeUint16LE = R.prototype.writeUInt16LE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 2, 65535, 0), this[r] = e & 255, this[r + 1] = e >>> 8, r + 2;
    };
    R.prototype.writeUint16BE = R.prototype.writeUInt16BE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 2, 65535, 0), this[r] = e >>> 8, this[r + 1] = e & 255, r + 2;
    };
    R.prototype.writeUint32LE = R.prototype.writeUInt32LE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 4, 4294967295, 0), this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = e & 255, r + 4;
    };
    R.prototype.writeUint32BE = R.prototype.writeUInt32BE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 4, 4294967295, 0), this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255, r + 4;
    };
    function Ws(t, e, r, i, n) {
        Ys(e, i, n, t, r, 7);
        let f = Number(e & BigInt(4294967295));
        t[r++] = f, f = f >> 8, t[r++] = f, f = f >> 8, t[r++] = f, f = f >> 8, t[r++] = f;
        let o = Number(e >> BigInt(32) & BigInt(4294967295));
        return t[r++] = o, o = o >> 8, t[r++] = o, o = o >> 8, t[r++] = o, o = o >> 8, t[r++] = o, r;
    }
    function Vs(t, e, r, i, n) {
        Ys(e, i, n, t, r, 7);
        let f = Number(e & BigInt(4294967295));
        t[r + 7] = f, f = f >> 8, t[r + 6] = f, f = f >> 8, t[r + 5] = f, f = f >> 8, t[r + 4] = f;
        let o = Number(e >> BigInt(32) & BigInt(4294967295));
        return t[r + 3] = o, o = o >> 8, t[r + 2] = o, o = o >> 8, t[r + 1] = o, o = o >> 8, t[r] = o, r + 8;
    }
    R.prototype.writeBigUInt64LE = vr(function(e, r = 0) {
        return Ws(this, e, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    R.prototype.writeBigUInt64BE = vr(function(e, r = 0) {
        return Vs(this, e, r, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    R.prototype.writeIntLE = function(e, r, i, n) {
        if (e = +e, r = r >>> 0, !n) {
            let v = Math.pow(2, 8 * i - 1);
            ft(this, e, r, i, v - 1, -v);
        }
        let f = 0, o = 1, u = 0;
        for(this[r] = e & 255; ++f < i && (o *= 256);)e < 0 && u === 0 && this[r + f - 1] !== 0 && (u = 1), this[r + f] = (e / o >> 0) - u & 255;
        return r + i;
    };
    R.prototype.writeIntBE = function(e, r, i, n) {
        if (e = +e, r = r >>> 0, !n) {
            let v = Math.pow(2, 8 * i - 1);
            ft(this, e, r, i, v - 1, -v);
        }
        let f = i - 1, o = 1, u = 0;
        for(this[r + f] = e & 255; --f >= 0 && (o *= 256);)e < 0 && u === 0 && this[r + f + 1] !== 0 && (u = 1), this[r + f] = (e / o >> 0) - u & 255;
        return r + i;
    };
    R.prototype.writeInt8 = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[r] = e & 255, r + 1;
    };
    R.prototype.writeInt16LE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 2, 32767, -32768), this[r] = e & 255, this[r + 1] = e >>> 8, r + 2;
    };
    R.prototype.writeInt16BE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 2, 32767, -32768), this[r] = e >>> 8, this[r + 1] = e & 255, r + 2;
    };
    R.prototype.writeInt32LE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 4, 2147483647, -2147483648), this[r] = e & 255, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24, r + 4;
    };
    R.prototype.writeInt32BE = function(e, r, i) {
        return e = +e, r = r >>> 0, i || ft(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255, r + 4;
    };
    R.prototype.writeBigInt64LE = vr(function(e, r = 0) {
        return Ws(this, e, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    R.prototype.writeBigInt64BE = vr(function(e, r = 0) {
        return Vs(this, e, r, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function Gs(t, e, r, i, n, f) {
        if (r + i > t.length) throw new RangeError("Index out of range");
        if (r < 0) throw new RangeError("Index out of range");
    }
    function Zs(t, e, r, i, n) {
        return e = +e, r = r >>> 0, n || Gs(t, e, r, 4, 34028234663852886e22, -340282346638528860000000000000000000000), Ai.write(t, e, r, i, 23, 4), r + 4;
    }
    R.prototype.writeFloatLE = function(e, r, i) {
        return Zs(this, e, r, !0, i);
    };
    R.prototype.writeFloatBE = function(e, r, i) {
        return Zs(this, e, r, !1, i);
    };
    function Xs(t, e, r, i, n) {
        return e = +e, r = r >>> 0, n || Gs(t, e, r, 8, 17976931348623157e292, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), Ai.write(t, e, r, i, 52, 8), r + 8;
    }
    R.prototype.writeDoubleLE = function(e, r, i) {
        return Xs(this, e, r, !0, i);
    };
    R.prototype.writeDoubleBE = function(e, r, i) {
        return Xs(this, e, r, !1, i);
    };
    R.prototype.copy = function(e, r, i, n) {
        if (!R.isBuffer(e)) throw new TypeError("argument should be a Buffer");
        if (i || (i = 0), !n && n !== 0 && (n = this.length), r >= e.length && (r = e.length), r || (r = 0), n > 0 && n < i && (n = i), n === i || e.length === 0 || this.length === 0) return 0;
        if (r < 0) throw new RangeError("targetStart out of bounds");
        if (i < 0 || i >= this.length) throw new RangeError("Index out of range");
        if (n < 0) throw new RangeError("sourceEnd out of bounds");
        n > this.length && (n = this.length), e.length - r < n - i && (n = e.length - r + i);
        let f = n - i;
        return this === e && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(r, i, n) : Uint8Array.prototype.set.call(e, this.subarray(i, n), r), f;
    };
    R.prototype.fill = function(e, r, i, n) {
        if (typeof e == "string") {
            if (typeof r == "string" ? (n = r, r = 0, i = this.length) : typeof i == "string" && (n = i, i = this.length), n !== void 0 && typeof n != "string") throw new TypeError("encoding must be a string");
            if (typeof n == "string" && !R.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
            if (e.length === 1) {
                let o = e.charCodeAt(0);
                (n === "utf8" && o < 128 || n === "latin1") && (e = o);
            }
        } else typeof e == "number" ? e = e & 255 : typeof e == "boolean" && (e = Number(e));
        if (r < 0 || this.length < r || this.length < i) throw new RangeError("Out of range index");
        if (i <= r) return this;
        r = r >>> 0, i = i === void 0 ? this.length : i >>> 0, e || (e = 0);
        let f;
        if (typeof e == "number") for(f = r; f < i; ++f)this[f] = e;
        else {
            let o = R.isBuffer(e) ? e : R.from(e, n), u = o.length;
            if (u === 0) throw new TypeError('The value "' + e + '" is invalid for argument "value"');
            for(f = 0; f < i - r; ++f)this[f + r] = o[f % u];
        }
        return this;
    };
    var Si = {};
    function o0(t, e, r) {
        Si[t] = class extends r {
            constructor(){
                super(), Object.defineProperty(this, "message", {
                    value: e.apply(this, arguments),
                    writable: !0,
                    configurable: !0
                }), this.name = `${this.name} [${t}]`, this.stack, delete this.name;
            }
            get code() {
                return t;
            }
            set code(n) {
                Object.defineProperty(this, "code", {
                    configurable: !0,
                    enumerable: !0,
                    value: n,
                    writable: !0
                });
            }
            toString() {
                return `${this.name} [${t}]: ${this.message}`;
            }
        };
    }
    o0("ERR_BUFFER_OUT_OF_BOUNDS", function(t) {
        return t ? `${t} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    o0("ERR_INVALID_ARG_TYPE", function(t, e) {
        return `The "${t}" argument must be of type number. Received type ${typeof e}`;
    }, TypeError);
    o0("ERR_OUT_OF_RANGE", function(t, e, r) {
        let i = `The value of "${t}" is out of range.`, n = r;
        return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? n = Fs(String(r)) : typeof r == "bigint" && (n = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (n = Fs(n)), n += "n"), i += ` It must be ${e}. Received ${n}`, i;
    }, RangeError);
    function Fs(t) {
        let e = "", r = t.length, i = t[0] === "-" ? 1 : 0;
        for(; r >= i + 4; r -= 3)e = `_${t.slice(r - 3, r)}${e}`;
        return `${t.slice(0, r)}${e}`;
    }
    function b2(t, e, r) {
        Bi(e, "offset"), (t[e] === void 0 || t[e + r] === void 0) && An(e, t.length - (r + 1));
    }
    function Ys(t, e, r, i, n, f) {
        if (t > r || t < e) {
            let o = typeof e == "bigint" ? "n" : "", u;
            throw f > 3 ? e === 0 || e === BigInt(0) ? u = `>= 0${o} and < 2${o} ** ${(f + 1) * 8}${o}` : u = `>= -(2${o} ** ${(f + 1) * 8 - 1}${o}) and < 2 ** ${(f + 1) * 8 - 1}${o}` : u = `>= ${e}${o} and <= ${r}${o}`, new Si.ERR_OUT_OF_RANGE("value", u, t);
        }
        b2(i, n, f);
    }
    function Bi(t, e) {
        if (typeof t != "number") throw new Si.ERR_INVALID_ARG_TYPE(e, "number", t);
    }
    function An(t, e, r) {
        throw Math.floor(t) !== t ? (Bi(t, r), new Si.ERR_OUT_OF_RANGE(r || "offset", "an integer", t)) : e < 0 ? new Si.ERR_BUFFER_OUT_OF_BOUNDS : new Si.ERR_OUT_OF_RANGE(r || "offset", `>= ${r ? 1 : 0} and <= ${e}`, t);
    }
    var v2 = /[^+/0-9A-Za-z-_]/g;
    function y2(t) {
        if (t = t.split("=")[0], t = t.trim().replace(v2, ""), t.length < 2) return "";
        for(; t.length % 4 !== 0;)t = t + "=";
        return t;
    }
    function n0(t, e) {
        e = e || 1 / 0;
        let r, i = t.length, n = null, f = [];
        for(let o = 0; o < i; ++o){
            if (r = t.charCodeAt(o), r > 55295 && r < 57344) {
                if (!n) {
                    if (r > 56319) {
                        (e -= 3) > -1 && f.push(239, 191, 189);
                        continue;
                    } else if (o + 1 === i) {
                        (e -= 3) > -1 && f.push(239, 191, 189);
                        continue;
                    }
                    n = r;
                    continue;
                }
                if (r < 56320) {
                    (e -= 3) > -1 && f.push(239, 191, 189), n = r;
                    continue;
                }
                r = (n - 55296 << 10 | r - 56320) + 65536;
            } else n && (e -= 3) > -1 && f.push(239, 191, 189);
            if (n = null, r < 128) {
                if ((e -= 1) < 0) break;
                f.push(r);
            } else if (r < 2048) {
                if ((e -= 2) < 0) break;
                f.push(r >> 6 | 192, r & 63 | 128);
            } else if (r < 65536) {
                if ((e -= 3) < 0) break;
                f.push(r >> 12 | 224, r >> 6 & 63 | 128, r & 63 | 128);
            } else if (r < 1114112) {
                if ((e -= 4) < 0) break;
                f.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, r & 63 | 128);
            } else throw new Error("Invalid code point");
        }
        return f;
    }
    function m2(t) {
        let e = [];
        for(let r = 0; r < t.length; ++r)e.push(t.charCodeAt(r) & 255);
        return e;
    }
    function g2(t, e) {
        let r, i, n, f = [];
        for(let o = 0; o < t.length && !((e -= 2) < 0); ++o)r = t.charCodeAt(o), i = r >> 8, n = r % 256, f.push(n), f.push(i);
        return f;
    }
    function Js(t) {
        return t0.toByteArray(y2(t));
    }
    function mf(t, e, r, i) {
        let n;
        for(n = 0; n < i && !(n + r >= e.length || n >= t.length); ++n)e[n + r] = t[n];
        return n;
    }
    function Kt(t, e) {
        return t instanceof e || t != null && t.constructor != null && t.constructor.name != null && t.constructor.name === e.name;
    }
    function s0(t) {
        return t !== t;
    }
    var _2 = function() {
        let t = "0123456789abcdef", e = new Array(256);
        for(let r = 0; r < 16; ++r){
            let i = r * 16;
            for(let n = 0; n < 16; ++n)e[i + n] = t[r] + t[n];
        }
        return e;
    }();
    function vr(t) {
        return typeof BigInt > "u" ? w2 : t;
    }
    function w2() {
        throw new Error("BigInt not supported");
    }
});
var we = q((h0, Qs)=>{
    var gf = Xr(), Wt = gf.Buffer;
    function $s(t, e) {
        for(var r in t)e[r] = t[r];
    }
    Wt.from && Wt.alloc && Wt.allocUnsafe && Wt.allocUnsafeSlow ? Qs.exports = gf : ($s(gf, h0), h0.Buffer = Yr);
    function Yr(t, e, r) {
        return Wt(t, e, r);
    }
    Yr.prototype = Object.create(Wt.prototype);
    $s(Wt, Yr);
    Yr.from = function(t, e, r) {
        if (typeof t == "number") throw new TypeError("Argument must not be a number");
        return Wt(t, e, r);
    };
    Yr.alloc = function(t, e, r) {
        if (typeof t != "number") throw new TypeError("Argument must be a number");
        var i = Wt(t);
        return e !== void 0 ? typeof r == "string" ? i.fill(e, r) : i.fill(e) : i.fill(0), i;
    };
    Yr.allocUnsafe = function(t) {
        if (typeof t != "number") throw new TypeError("Argument must be a number");
        return Wt(t);
    };
    Yr.allocUnsafeSlow = function(t) {
        if (typeof t != "number") throw new TypeError("Argument must be a number");
        return gf.SlowBuffer(t);
    };
});
var Jr = q((c9, u0)=>{
    "use strict";
    var c0 = 65536, x2 = 4294967295;
    function M2() {
        throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
    }
    var E2 = we().Buffer, _f = global.crypto || global.msCrypto;
    _f && _f.getRandomValues ? u0.exports = S2 : u0.exports = M2;
    function S2(t, e) {
        if (t > x2) throw new RangeError("requested too many random bytes");
        var r = E2.allocUnsafe(t);
        if (t > 0) {
            if (t > c0) for(var i = 0; i < t; i += c0)_f.getRandomValues(r.slice(i, i + c0));
            else _f.getRandomValues(r);
        }
        return typeof e == "function" ? process.nextTick(function() {
            e(null, r);
        }) : r;
    }
});
var xe = q((u9, d0)=>{
    typeof Object.create == "function" ? d0.exports = function(e, r) {
        r && (e.super_ = r, e.prototype = Object.create(r.prototype, {
            constructor: {
                value: e,
                enumerable: !1,
                writable: !0,
                configurable: !0
            }
        }));
    } : d0.exports = function(e, r) {
        if (r) {
            e.super_ = r;
            var i = function() {};
            i.prototype = r.prototype, e.prototype = new i, e.prototype.constructor = e;
        }
    };
});
var Mf = q((d9, l0)=>{
    "use strict";
    var Ri = typeof Reflect == "object" ? Reflect : null, eh = Ri && typeof Ri.apply == "function" ? Ri.apply : function(e, r, i) {
        return Function.prototype.apply.call(e, r, i);
    }, wf;
    Ri && typeof Ri.ownKeys == "function" ? wf = Ri.ownKeys : Object.getOwnPropertySymbols ? wf = function(e) {
        return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
    } : wf = function(e) {
        return Object.getOwnPropertyNames(e);
    };
    function A2(t) {
        console && console.warn && console.warn(t);
    }
    var rh = Number.isNaN || function(e) {
        return e !== e;
    };
    function Ie() {
        Ie.init.call(this);
    }
    l0.exports = Ie;
    l0.exports.once = I2;
    Ie.EventEmitter = Ie;
    Ie.prototype._events = void 0;
    Ie.prototype._eventsCount = 0;
    Ie.prototype._maxListeners = void 0;
    var th = 10;
    function xf(t) {
        if (typeof t != "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof t);
    }
    Object.defineProperty(Ie, "defaultMaxListeners", {
        enumerable: !0,
        get: function() {
            return th;
        },
        set: function(t) {
            if (typeof t != "number" || t < 0 || rh(t)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + t + ".");
            th = t;
        }
    });
    Ie.init = function() {
        (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
    };
    Ie.prototype.setMaxListeners = function(e) {
        if (typeof e != "number" || e < 0 || rh(e)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
        return this._maxListeners = e, this;
    };
    function ih(t) {
        return t._maxListeners === void 0 ? Ie.defaultMaxListeners : t._maxListeners;
    }
    Ie.prototype.getMaxListeners = function() {
        return ih(this);
    };
    Ie.prototype.emit = function(e) {
        for(var r = [], i = 1; i < arguments.length; i++)r.push(arguments[i]);
        var n = e === "error", f = this._events;
        if (f !== void 0) n = n && f.error === void 0;
        else if (!n) return !1;
        if (n) {
            var o;
            if (r.length > 0 && (o = r[0]), o instanceof Error) throw o;
            var u = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
            throw u.context = o, u;
        }
        var v = f[e];
        if (v === void 0) return !1;
        if (typeof v == "function") eh(v, this, r);
        else for(var _ = v.length, x = sh(v, _), i = 0; i < _; ++i)eh(x[i], this, r);
        return !0;
    };
    function nh(t, e, r, i) {
        var n, f, o;
        if (xf(r), f = t._events, f === void 0 ? (f = t._events = Object.create(null), t._eventsCount = 0) : (f.newListener !== void 0 && (t.emit("newListener", e, r.listener ? r.listener : r), f = t._events), o = f[e]), o === void 0) o = f[e] = r, ++t._eventsCount;
        else if (typeof o == "function" ? o = f[e] = i ? [
            r,
            o
        ] : [
            o,
            r
        ] : i ? o.unshift(r) : o.push(r), n = ih(t), n > 0 && o.length > n && !o.warned) {
            o.warned = !0;
            var u = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            u.name = "MaxListenersExceededWarning", u.emitter = t, u.type = e, u.count = o.length, A2(u);
        }
        return t;
    }
    Ie.prototype.addListener = function(e, r) {
        return nh(this, e, r, !1);
    };
    Ie.prototype.on = Ie.prototype.addListener;
    Ie.prototype.prependListener = function(e, r) {
        return nh(this, e, r, !0);
    };
    function B2() {
        if (!this.fired) return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
    }
    function fh(t, e, r) {
        var i = {
            fired: !1,
            wrapFn: void 0,
            target: t,
            type: e,
            listener: r
        }, n = B2.bind(i);
        return n.listener = r, i.wrapFn = n, n;
    }
    Ie.prototype.once = function(e, r) {
        return xf(r), this.on(e, fh(this, e, r)), this;
    };
    Ie.prototype.prependOnceListener = function(e, r) {
        return xf(r), this.prependListener(e, fh(this, e, r)), this;
    };
    Ie.prototype.removeListener = function(e, r) {
        var i, n, f, o, u;
        if (xf(r), n = this._events, n === void 0) return this;
        if (i = n[e], i === void 0) return this;
        if (i === r || i.listener === r) --this._eventsCount === 0 ? this._events = Object.create(null) : (delete n[e], n.removeListener && this.emit("removeListener", e, i.listener || r));
        else if (typeof i != "function") {
            for(f = -1, o = i.length - 1; o >= 0; o--)if (i[o] === r || i[o].listener === r) {
                u = i[o].listener, f = o;
                break;
            }
            if (f < 0) return this;
            f === 0 ? i.shift() : q2(i, f), i.length === 1 && (n[e] = i[0]), n.removeListener !== void 0 && this.emit("removeListener", e, u || r);
        }
        return this;
    };
    Ie.prototype.off = Ie.prototype.removeListener;
    Ie.prototype.removeAllListeners = function(e) {
        var r, i, n;
        if (i = this._events, i === void 0) return this;
        if (i.removeListener === void 0) return arguments.length === 0 ? (this._events = Object.create(null), this._eventsCount = 0) : i[e] !== void 0 && (--this._eventsCount === 0 ? this._events = Object.create(null) : delete i[e]), this;
        if (arguments.length === 0) {
            var f = Object.keys(i), o;
            for(n = 0; n < f.length; ++n)o = f[n], o !== "removeListener" && this.removeAllListeners(o);
            return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
        }
        if (r = i[e], typeof r == "function") this.removeListener(e, r);
        else if (r !== void 0) for(n = r.length - 1; n >= 0; n--)this.removeListener(e, r[n]);
        return this;
    };
    function ah(t, e, r) {
        var i = t._events;
        if (i === void 0) return [];
        var n = i[e];
        return n === void 0 ? [] : typeof n == "function" ? r ? [
            n.listener || n
        ] : [
            n
        ] : r ? R2(n) : sh(n, n.length);
    }
    Ie.prototype.listeners = function(e) {
        return ah(this, e, !0);
    };
    Ie.prototype.rawListeners = function(e) {
        return ah(this, e, !1);
    };
    Ie.listenerCount = function(t, e) {
        return typeof t.listenerCount == "function" ? t.listenerCount(e) : oh.call(t, e);
    };
    Ie.prototype.listenerCount = oh;
    function oh(t) {
        var e = this._events;
        if (e !== void 0) {
            var r = e[t];
            if (typeof r == "function") return 1;
            if (r !== void 0) return r.length;
        }
        return 0;
    }
    Ie.prototype.eventNames = function() {
        return this._eventsCount > 0 ? wf(this._events) : [];
    };
    function sh(t, e) {
        for(var r = new Array(e), i = 0; i < e; ++i)r[i] = t[i];
        return r;
    }
    function q2(t, e) {
        for(; e + 1 < t.length; e++)t[e] = t[e + 1];
        t.pop();
    }
    function R2(t) {
        for(var e = new Array(t.length), r = 0; r < e.length; ++r)e[r] = t[r].listener || t[r];
        return e;
    }
    function I2(t, e) {
        return new Promise(function(r, i) {
            function n(o) {
                t.removeListener(e, f), i(o);
            }
            function f() {
                typeof t.removeListener == "function" && t.removeListener("error", n), r([].slice.call(arguments));
            }
            hh(t, e, f, {
                once: !0
            }), e !== "error" && k2(t, n, {
                once: !0
            });
        });
    }
    function k2(t, e, r) {
        typeof t.on == "function" && hh(t, "error", e, r);
    }
    function hh(t, e, r, i) {
        if (typeof t.on == "function") i.once ? t.once(e, r) : t.on(e, r);
        else if (typeof t.addEventListener == "function") t.addEventListener(e, function n(f) {
            i.once && t.removeEventListener(e, n), r(f);
        });
        else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof t);
    }
});
var p0 = q((l9, ch)=>{
    ch.exports = Mf().EventEmitter;
});
var b0 = q(()=>{});
var ph = q((v9, lh)=>{
    "use strict";
    function uh(t, e) {
        var r = Object.keys(t);
        if (Object.getOwnPropertySymbols) {
            var i = Object.getOwnPropertySymbols(t);
            e && (i = i.filter(function(n) {
                return Object.getOwnPropertyDescriptor(t, n).enumerable;
            })), r.push.apply(r, i);
        }
        return r;
    }
    function C2(t) {
        for(var e = 1; e < arguments.length; e++){
            var r = arguments[e] != null ? arguments[e] : {};
            e % 2 ? uh(Object(r), !0).forEach(function(i) {
                T2(t, i, r[i]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : uh(Object(r)).forEach(function(i) {
                Object.defineProperty(t, i, Object.getOwnPropertyDescriptor(r, i));
            });
        }
        return t;
    }
    function T2(t, e, r) {
        return e in t ? Object.defineProperty(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = r, t;
    }
    function P2(t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
    }
    function dh(t, e) {
        for(var r = 0; r < e.length; r++){
            var i = e[r];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
        }
    }
    function D2(t, e, r) {
        return e && dh(t.prototype, e), r && dh(t, r), t;
    }
    var L2 = Xr(), Ef = L2.Buffer, N2 = b0(), v0 = N2.inspect, O2 = v0 && v0.custom || "inspect";
    function F2(t, e, r) {
        Ef.prototype.copy.call(t, e, r);
    }
    lh.exports = function() {
        function t() {
            P2(this, t), this.head = null, this.tail = null, this.length = 0;
        }
        return D2(t, [
            {
                key: "push",
                value: function(r) {
                    var i = {
                        data: r,
                        next: null
                    };
                    this.length > 0 ? this.tail.next = i : this.head = i, this.tail = i, ++this.length;
                }
            },
            {
                key: "unshift",
                value: function(r) {
                    var i = {
                        data: r,
                        next: this.head
                    };
                    this.length === 0 && (this.tail = i), this.head = i, ++this.length;
                }
            },
            {
                key: "shift",
                value: function() {
                    if (this.length !== 0) {
                        var r = this.head.data;
                        return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, r;
                    }
                }
            },
            {
                key: "clear",
                value: function() {
                    this.head = this.tail = null, this.length = 0;
                }
            },
            {
                key: "join",
                value: function(r) {
                    if (this.length === 0) return "";
                    for(var i = this.head, n = "" + i.data; i = i.next;)n += r + i.data;
                    return n;
                }
            },
            {
                key: "concat",
                value: function(r) {
                    if (this.length === 0) return Ef.alloc(0);
                    for(var i = Ef.allocUnsafe(r >>> 0), n = this.head, f = 0; n;)F2(n.data, i, f), f += n.data.length, n = n.next;
                    return i;
                }
            },
            {
                key: "consume",
                value: function(r, i) {
                    var n;
                    return r < this.head.data.length ? (n = this.head.data.slice(0, r), this.head.data = this.head.data.slice(r)) : r === this.head.data.length ? n = this.shift() : n = i ? this._getString(r) : this._getBuffer(r), n;
                }
            },
            {
                key: "first",
                value: function() {
                    return this.head.data;
                }
            },
            {
                key: "_getString",
                value: function(r) {
                    var i = this.head, n = 1, f = i.data;
                    for(r -= f.length; i = i.next;){
                        var o = i.data, u = r > o.length ? o.length : r;
                        if (u === o.length ? f += o : f += o.slice(0, r), r -= u, r === 0) {
                            u === o.length ? (++n, i.next ? this.head = i.next : this.head = this.tail = null) : (this.head = i, i.data = o.slice(u));
                            break;
                        }
                        ++n;
                    }
                    return this.length -= n, f;
                }
            },
            {
                key: "_getBuffer",
                value: function(r) {
                    var i = Ef.allocUnsafe(r), n = this.head, f = 1;
                    for(n.data.copy(i), r -= n.data.length; n = n.next;){
                        var o = n.data, u = r > o.length ? o.length : r;
                        if (o.copy(i, i.length - r, 0, u), r -= u, r === 0) {
                            u === o.length ? (++f, n.next ? this.head = n.next : this.head = this.tail = null) : (this.head = n, n.data = o.slice(u));
                            break;
                        }
                        ++f;
                    }
                    return this.length -= f, i;
                }
            },
            {
                key: O2,
                value: function(r, i) {
                    return v0(this, C2({}, i, {
                        depth: 0,
                        customInspect: !1
                    }));
                }
            }
        ]), t;
    }();
});
var m0 = q((y9, vh)=>{
    "use strict";
    function U2(t, e) {
        var r = this, i = this._readableState && this._readableState.destroyed, n = this._writableState && this._writableState.destroyed;
        return i || n ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, process.nextTick(y0, this, t)) : process.nextTick(y0, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function(f) {
            !e && f ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(Sf, r) : (r._writableState.errorEmitted = !0, process.nextTick(bh, r, f)) : process.nextTick(bh, r, f) : e ? (process.nextTick(Sf, r), e(f)) : process.nextTick(Sf, r);
        }), this);
    }
    function bh(t, e) {
        y0(t, e), Sf(t);
    }
    function Sf(t) {
        t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
    }
    function z2() {
        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
    }
    function y0(t, e) {
        t.emit("error", e);
    }
    function H2(t, e) {
        var r = t._readableState, i = t._writableState;
        r && r.autoDestroy || i && i.autoDestroy ? t.destroy(e) : t.emit("error", e);
    }
    vh.exports = {
        destroy: U2,
        undestroy: z2,
        errorOrDestroy: H2
    };
});
var $r = q((m9, gh)=>{
    "use strict";
    function j2(t, e) {
        t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
    }
    var mh = {};
    function bt(t, e, r) {
        r || (r = Error);
        function i(f, o, u) {
            return typeof e == "string" ? e : e(f, o, u);
        }
        var n = function(f) {
            j2(o, f);
            function o(u, v, _) {
                return f.call(this, i(u, v, _)) || this;
            }
            return o;
        }(r);
        n.prototype.name = r.name, n.prototype.code = t, mh[t] = n;
    }
    function yh(t, e) {
        if (Array.isArray(t)) {
            var r = t.length;
            return t = t.map(function(i) {
                return String(i);
            }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : r === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
        } else return "of ".concat(e, " ").concat(String(t));
    }
    function K2(t, e, r) {
        return t.substr(!r || r < 0 ? 0 : +r, e.length) === e;
    }
    function W2(t, e, r) {
        return (r === void 0 || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
    }
    function V2(t, e, r) {
        return typeof r != "number" && (r = 0), r + e.length > t.length ? !1 : t.indexOf(e, r) !== -1;
    }
    bt("ERR_INVALID_OPT_VALUE", function(t, e) {
        return 'The value "' + e + '" is invalid for option "' + t + '"';
    }, TypeError);
    bt("ERR_INVALID_ARG_TYPE", function(t, e, r) {
        var i;
        typeof e == "string" && K2(e, "not ") ? (i = "must not be", e = e.replace(/^not /, "")) : i = "must be";
        var n;
        if (W2(t, " argument")) n = "The ".concat(t, " ").concat(i, " ").concat(yh(e, "type"));
        else {
            var f = V2(t, ".") ? "property" : "argument";
            n = 'The "'.concat(t, '" ').concat(f, " ").concat(i, " ").concat(yh(e, "type"));
        }
        return n += ". Received type ".concat(typeof r), n;
    }, TypeError);
    bt("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
    bt("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
        return "The " + t + " method is not implemented";
    });
    bt("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
    bt("ERR_STREAM_DESTROYED", function(t) {
        return "Cannot call " + t + " after a stream was destroyed";
    });
    bt("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
    bt("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
    bt("ERR_STREAM_WRITE_AFTER_END", "write after end");
    bt("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
    bt("ERR_UNKNOWN_ENCODING", function(t) {
        return "Unknown encoding: " + t;
    }, TypeError);
    bt("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
    gh.exports.codes = mh;
});
var g0 = q((g9, _h)=>{
    "use strict";
    var G2 = $r().codes.ERR_INVALID_OPT_VALUE;
    function Z2(t, e, r) {
        return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
    }
    function X2(t, e, r, i) {
        var n = Z2(e, i, r);
        if (n != null) {
            if (!(isFinite(n) && Math.floor(n) === n) || n < 0) {
                var f = i ? r : "highWaterMark";
                throw new G2(f, n);
            }
            return Math.floor(n);
        }
        return t.objectMode ? 16 : 16384;
    }
    _h.exports = {
        getHighWaterMark: X2
    };
});
var xh = q((_9, wh)=>{
    wh.exports = Y2;
    function Y2(t, e) {
        if (_0("noDeprecation")) return t;
        var r = !1;
        function i() {
            if (!r) {
                if (_0("throwDeprecation")) throw new Error(e);
                _0("traceDeprecation") ? console.trace(e) : console.warn(e), r = !0;
            }
            return t.apply(this, arguments);
        }
        return i;
    }
    function _0(t) {
        try {
            if (!global.localStorage) return !1;
        } catch (r) {
            return !1;
        }
        var e = global.localStorage[t];
        return e == null ? !1 : String(e).toLowerCase() === "true";
    }
});
var qf = q((w9, qh)=>{
    "use strict";
    qh.exports = Ne;
    function Eh(t) {
        var e = this;
        this.next = null, this.entry = null, this.finish = function() {
            Mb(e, t);
        };
    }
    var Ii;
    Ne.WritableState = qn;
    var J2 = {
        deprecate: xh()
    }, Sh = p0(), Bf = Xr().Buffer, $2 = global.Uint8Array || function() {};
    function Q2(t) {
        return Bf.from(t);
    }
    function eb(t) {
        return Bf.isBuffer(t) || t instanceof $2;
    }
    var x0 = m0(), tb = g0(), rb = tb.getHighWaterMark, yr = $r().codes, ib = yr.ERR_INVALID_ARG_TYPE, nb = yr.ERR_METHOD_NOT_IMPLEMENTED, fb = yr.ERR_MULTIPLE_CALLBACK, ab = yr.ERR_STREAM_CANNOT_PIPE, ob = yr.ERR_STREAM_DESTROYED, sb = yr.ERR_STREAM_NULL_VALUES, hb = yr.ERR_STREAM_WRITE_AFTER_END, cb = yr.ERR_UNKNOWN_ENCODING, ki = x0.errorOrDestroy;
    xe()(Ne, Sh);
    function ub() {}
    function qn(t, e, r) {
        Ii = Ii || mr(), t = t || {}, typeof r != "boolean" && (r = e instanceof Ii), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = rb(this, t, "writableHighWaterMark", r), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
        var i = t.decodeStrings === !1;
        this.decodeStrings = !i, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(n) {
            mb(e, n);
        }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = t.emitClose !== !1, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new Eh(this);
    }
    qn.prototype.getBuffer = function() {
        for(var e = this.bufferedRequest, r = []; e;)r.push(e), e = e.next;
        return r;
    };
    (function() {
        try {
            Object.defineProperty(qn.prototype, "buffer", {
                get: J2.deprecate(function() {
                    return this.getBuffer();
                }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
            });
        } catch (t) {}
    })();
    var Af;
    typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (Af = Function.prototype[Symbol.hasInstance], Object.defineProperty(Ne, Symbol.hasInstance, {
        value: function(e) {
            return Af.call(this, e) ? !0 : this !== Ne ? !1 : e && e._writableState instanceof qn;
        }
    })) : Af = function(e) {
        return e instanceof this;
    };
    function Ne(t) {
        Ii = Ii || mr();
        var e = this instanceof Ii;
        if (!e && !Af.call(Ne, this)) return new Ne(t);
        this._writableState = new qn(t, this, e), this.writable = !0, t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.final == "function" && (this._final = t.final)), Sh.call(this);
    }
    Ne.prototype.pipe = function() {
        ki(this, new ab);
    };
    function db(t, e) {
        var r = new hb;
        ki(t, r), process.nextTick(e, r);
    }
    function lb(t, e, r, i) {
        var n;
        return r === null ? n = new sb : typeof r != "string" && !e.objectMode && (n = new ib("chunk", [
            "string",
            "Buffer"
        ], r)), n ? (ki(t, n), process.nextTick(i, n), !1) : !0;
    }
    Ne.prototype.write = function(t, e, r) {
        var i = this._writableState, n = !1, f = !i.objectMode && eb(t);
        return f && !Bf.isBuffer(t) && (t = Q2(t)), typeof e == "function" && (r = e, e = null), f ? e = "buffer" : e || (e = i.defaultEncoding), typeof r != "function" && (r = ub), i.ending ? db(this, r) : (f || lb(this, i, t, r)) && (i.pendingcb++, n = bb(this, i, f, t, e, r)), n;
    };
    Ne.prototype.cork = function() {
        this._writableState.corked++;
    };
    Ne.prototype.uncork = function() {
        var t = this._writableState;
        t.corked && (t.corked--, !t.writing && !t.corked && !t.bufferProcessing && t.bufferedRequest && Ah(this, t));
    };
    Ne.prototype.setDefaultEncoding = function(e) {
        if (typeof e == "string" && (e = e.toLowerCase()), !([
            "hex",
            "utf8",
            "utf-8",
            "ascii",
            "binary",
            "base64",
            "ucs2",
            "ucs-2",
            "utf16le",
            "utf-16le",
            "raw"
        ].indexOf((e + "").toLowerCase()) > -1)) throw new cb(e);
        return this._writableState.defaultEncoding = e, this;
    };
    Object.defineProperty(Ne.prototype, "writableBuffer", {
        enumerable: !1,
        get: function() {
            return this._writableState && this._writableState.getBuffer();
        }
    });
    function pb(t, e, r) {
        return !t.objectMode && t.decodeStrings !== !1 && typeof e == "string" && (e = Bf.from(e, r)), e;
    }
    Object.defineProperty(Ne.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function() {
            return this._writableState.highWaterMark;
        }
    });
    function bb(t, e, r, i, n, f) {
        if (!r) {
            var o = pb(e, i, n);
            i !== o && (r = !0, n = "buffer", i = o);
        }
        var u = e.objectMode ? 1 : i.length;
        e.length += u;
        var v = e.length < e.highWaterMark;
        if (v || (e.needDrain = !0), e.writing || e.corked) {
            var _ = e.lastBufferedRequest;
            e.lastBufferedRequest = {
                chunk: i,
                encoding: n,
                isBuf: r,
                callback: f,
                next: null
            }, _ ? _.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
        } else w0(t, e, !1, u, i, n, f);
        return v;
    }
    function w0(t, e, r, i, n, f, o) {
        e.writelen = i, e.writecb = o, e.writing = !0, e.sync = !0, e.destroyed ? e.onwrite(new ob("write")) : r ? t._writev(n, e.onwrite) : t._write(n, f, e.onwrite), e.sync = !1;
    }
    function vb(t, e, r, i, n) {
        --e.pendingcb, r ? (process.nextTick(n, i), process.nextTick(Bn, t, e), t._writableState.errorEmitted = !0, ki(t, i)) : (n(i), t._writableState.errorEmitted = !0, ki(t, i), Bn(t, e));
    }
    function yb(t) {
        t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
    }
    function mb(t, e) {
        var r = t._writableState, i = r.sync, n = r.writecb;
        if (typeof n != "function") throw new fb;
        if (yb(r), e) vb(t, r, i, e, n);
        else {
            var f = Bh(r) || t.destroyed;
            !f && !r.corked && !r.bufferProcessing && r.bufferedRequest && Ah(t, r), i ? process.nextTick(Mh, t, r, f, n) : Mh(t, r, f, n);
        }
    }
    function Mh(t, e, r, i) {
        r || gb(t, e), e.pendingcb--, i(), Bn(t, e);
    }
    function gb(t, e) {
        e.length === 0 && e.needDrain && (e.needDrain = !1, t.emit("drain"));
    }
    function Ah(t, e) {
        e.bufferProcessing = !0;
        var r = e.bufferedRequest;
        if (t._writev && r && r.next) {
            var i = e.bufferedRequestCount, n = new Array(i), f = e.corkedRequestsFree;
            f.entry = r;
            for(var o = 0, u = !0; r;)n[o] = r, r.isBuf || (u = !1), r = r.next, o += 1;
            n.allBuffers = u, w0(t, e, !0, e.length, n, "", f.finish), e.pendingcb++, e.lastBufferedRequest = null, f.next ? (e.corkedRequestsFree = f.next, f.next = null) : e.corkedRequestsFree = new Eh(e), e.bufferedRequestCount = 0;
        } else {
            for(; r;){
                var v = r.chunk, _ = r.encoding, x = r.callback, E = e.objectMode ? 1 : v.length;
                if (w0(t, e, !1, E, v, _, x), r = r.next, e.bufferedRequestCount--, e.writing) break;
            }
            r === null && (e.lastBufferedRequest = null);
        }
        e.bufferedRequest = r, e.bufferProcessing = !1;
    }
    Ne.prototype._write = function(t, e, r) {
        r(new nb("_write()"));
    };
    Ne.prototype._writev = null;
    Ne.prototype.end = function(t, e, r) {
        var i = this._writableState;
        return typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null), t != null && this.write(t, e), i.corked && (i.corked = 1, this.uncork()), i.ending || xb(this, i, r), this;
    };
    Object.defineProperty(Ne.prototype, "writableLength", {
        enumerable: !1,
        get: function() {
            return this._writableState.length;
        }
    });
    function Bh(t) {
        return t.ending && t.length === 0 && t.bufferedRequest === null && !t.finished && !t.writing;
    }
    function _b(t, e) {
        t._final(function(r) {
            e.pendingcb--, r && ki(t, r), e.prefinished = !0, t.emit("prefinish"), Bn(t, e);
        });
    }
    function wb(t, e) {
        !e.prefinished && !e.finalCalled && (typeof t._final == "function" && !e.destroyed ? (e.pendingcb++, e.finalCalled = !0, process.nextTick(_b, t, e)) : (e.prefinished = !0, t.emit("prefinish")));
    }
    function Bn(t, e) {
        var r = Bh(e);
        if (r && (wb(t, e), e.pendingcb === 0 && (e.finished = !0, t.emit("finish"), e.autoDestroy))) {
            var i = t._readableState;
            (!i || i.autoDestroy && i.endEmitted) && t.destroy();
        }
        return r;
    }
    function xb(t, e, r) {
        e.ending = !0, Bn(t, e), r && (e.finished ? process.nextTick(r) : t.once("finish", r)), e.ended = !0, t.writable = !1;
    }
    function Mb(t, e, r) {
        var i = t.entry;
        for(t.entry = null; i;){
            var n = i.callback;
            e.pendingcb--, n(r), i = i.next;
        }
        e.corkedRequestsFree.next = t;
    }
    Object.defineProperty(Ne.prototype, "destroyed", {
        enumerable: !1,
        get: function() {
            return this._writableState === void 0 ? !1 : this._writableState.destroyed;
        },
        set: function(e) {
            this._writableState && (this._writableState.destroyed = e);
        }
    });
    Ne.prototype.destroy = x0.destroy;
    Ne.prototype._undestroy = x0.undestroy;
    Ne.prototype._destroy = function(t, e) {
        e(t);
    };
});
var mr = q((x9, Ih)=>{
    "use strict";
    var Eb = Object.keys || function(t) {
        var e = [];
        for(var r in t)e.push(r);
        return e;
    };
    Ih.exports = Vt;
    var Rh = kf(), E0 = qf();
    xe()(Vt, Rh);
    for(M0 = Eb(E0.prototype), Rf = 0; Rf < M0.length; Rf++)If = M0[Rf], Vt.prototype[If] || (Vt.prototype[If] = E0.prototype[If]);
    var M0, If, Rf;
    function Vt(t) {
        if (!(this instanceof Vt)) return new Vt(t);
        Rh.call(this, t), E0.call(this, t), this.allowHalfOpen = !0, t && (t.readable === !1 && (this.readable = !1), t.writable === !1 && (this.writable = !1), t.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", Sb)));
    }
    Object.defineProperty(Vt.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function() {
            return this._writableState.highWaterMark;
        }
    });
    Object.defineProperty(Vt.prototype, "writableBuffer", {
        enumerable: !1,
        get: function() {
            return this._writableState && this._writableState.getBuffer();
        }
    });
    Object.defineProperty(Vt.prototype, "writableLength", {
        enumerable: !1,
        get: function() {
            return this._writableState.length;
        }
    });
    function Sb() {
        this._writableState.ended || process.nextTick(Ab, this);
    }
    function Ab(t) {
        t.end();
    }
    Object.defineProperty(Vt.prototype, "destroyed", {
        enumerable: !1,
        get: function() {
            return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function(e) {
            this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = e, this._writableState.destroyed = e);
        }
    });
});
var Cf = q((Ch)=>{
    "use strict";
    var A0 = we().Buffer, kh = A0.isEncoding || function(t) {
        switch(t = "" + t, t && t.toLowerCase()){
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
                return !0;
            default:
                return !1;
        }
    };
    function Bb(t) {
        if (!t) return "utf8";
        for(var e;;)switch(t){
            case "utf8":
            case "utf-8":
                return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return "utf16le";
            case "latin1":
            case "binary":
                return "latin1";
            case "base64":
            case "ascii":
            case "hex":
                return t;
            default:
                if (e) return;
                t = ("" + t).toLowerCase(), e = !0;
        }
    }
    function qb(t) {
        var e = Bb(t);
        if (typeof e != "string" && (A0.isEncoding === kh || !kh(t))) throw new Error("Unknown encoding: " + t);
        return e || t;
    }
    Ch.StringDecoder = Rn;
    function Rn(t) {
        this.encoding = qb(t);
        var e;
        switch(this.encoding){
            case "utf16le":
                this.text = Pb, this.end = Db, e = 4;
                break;
            case "utf8":
                this.fillLast = kb, e = 4;
                break;
            case "base64":
                this.text = Lb, this.end = Nb, e = 3;
                break;
            default:
                this.write = Ob, this.end = Fb;
                return;
        }
        this.lastNeed = 0, this.lastTotal = 0, this.lastChar = A0.allocUnsafe(e);
    }
    Rn.prototype.write = function(t) {
        if (t.length === 0) return "";
        var e, r;
        if (this.lastNeed) {
            if (e = this.fillLast(t), e === void 0) return "";
            r = this.lastNeed, this.lastNeed = 0;
        } else r = 0;
        return r < t.length ? e ? e + this.text(t, r) : this.text(t, r) : e || "";
    };
    Rn.prototype.end = Tb;
    Rn.prototype.text = Cb;
    Rn.prototype.fillLast = function(t) {
        if (this.lastNeed <= t.length) return t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        t.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, t.length), this.lastNeed -= t.length;
    };
    function S0(t) {
        return t <= 127 ? 0 : t >> 5 === 6 ? 2 : t >> 4 === 14 ? 3 : t >> 3 === 30 ? 4 : t >> 6 === 2 ? -1 : -2;
    }
    function Rb(t, e, r) {
        var i = e.length - 1;
        if (i < r) return 0;
        var n = S0(e[i]);
        return n >= 0 ? (n > 0 && (t.lastNeed = n - 1), n) : --i < r || n === -2 ? 0 : (n = S0(e[i]), n >= 0 ? (n > 0 && (t.lastNeed = n - 2), n) : --i < r || n === -2 ? 0 : (n = S0(e[i]), n >= 0 ? (n > 0 && (n === 2 ? n = 0 : t.lastNeed = n - 3), n) : 0));
    }
    function Ib(t, e, r) {
        if ((e[0] & 192) !== 128) return t.lastNeed = 0, "\ufffd";
        if (t.lastNeed > 1 && e.length > 1) {
            if ((e[1] & 192) !== 128) return t.lastNeed = 1, "\ufffd";
            if (t.lastNeed > 2 && e.length > 2 && (e[2] & 192) !== 128) return t.lastNeed = 2, "\ufffd";
        }
    }
    function kb(t) {
        var e = this.lastTotal - this.lastNeed, r = Ib(this, t, e);
        if (r !== void 0) return r;
        if (this.lastNeed <= t.length) return t.copy(this.lastChar, e, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        t.copy(this.lastChar, e, 0, t.length), this.lastNeed -= t.length;
    }
    function Cb(t, e) {
        var r = Rb(this, t, e);
        if (!this.lastNeed) return t.toString("utf8", e);
        this.lastTotal = r;
        var i = t.length - (r - this.lastNeed);
        return t.copy(this.lastChar, 0, i), t.toString("utf8", e, i);
    }
    function Tb(t) {
        var e = t && t.length ? this.write(t) : "";
        return this.lastNeed ? e + "\ufffd" : e;
    }
    function Pb(t, e) {
        if ((t.length - e) % 2 === 0) {
            var r = t.toString("utf16le", e);
            if (r) {
                var i = r.charCodeAt(r.length - 1);
                if (i >= 55296 && i <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1], r.slice(0, -1);
            }
            return r;
        }
        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = t[t.length - 1], t.toString("utf16le", e, t.length - 1);
    }
    function Db(t) {
        var e = t && t.length ? this.write(t) : "";
        if (this.lastNeed) {
            var r = this.lastTotal - this.lastNeed;
            return e + this.lastChar.toString("utf16le", 0, r);
        }
        return e;
    }
    function Lb(t, e) {
        var r = (t.length - e) % 3;
        return r === 0 ? t.toString("base64", e) : (this.lastNeed = 3 - r, this.lastTotal = 3, r === 1 ? this.lastChar[0] = t[t.length - 1] : (this.lastChar[0] = t[t.length - 2], this.lastChar[1] = t[t.length - 1]), t.toString("base64", e, t.length - r));
    }
    function Nb(t) {
        var e = t && t.length ? this.write(t) : "";
        return this.lastNeed ? e + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : e;
    }
    function Ob(t) {
        return t.toString(this.encoding);
    }
    function Fb(t) {
        return t && t.length ? this.write(t) : "";
    }
});
var In = q((E9, Dh)=>{
    "use strict";
    var Th = $r().codes.ERR_STREAM_PREMATURE_CLOSE;
    function Ub(t) {
        var e = !1;
        return function() {
            if (!e) {
                e = !0;
                for(var r = arguments.length, i = new Array(r), n = 0; n < r; n++)i[n] = arguments[n];
                t.apply(this, i);
            }
        };
    }
    function zb() {}
    function Hb(t) {
        return t.setHeader && typeof t.abort == "function";
    }
    function Ph(t, e, r) {
        if (typeof e == "function") return Ph(t, null, e);
        e || (e = {}), r = Ub(r || zb);
        var i = e.readable || e.readable !== !1 && t.readable, n = e.writable || e.writable !== !1 && t.writable, f = function() {
            t.writable || u();
        }, o = t._writableState && t._writableState.finished, u = function() {
            n = !1, o = !0, i || r.call(t);
        }, v = t._readableState && t._readableState.endEmitted, _ = function() {
            i = !1, v = !0, n || r.call(t);
        }, x = function(I) {
            r.call(t, I);
        }, E = function() {
            var I;
            if (i && !v) return (!t._readableState || !t._readableState.ended) && (I = new Th), r.call(t, I);
            if (n && !o) return (!t._writableState || !t._writableState.ended) && (I = new Th), r.call(t, I);
        }, A = function() {
            t.req.on("finish", u);
        };
        return Hb(t) ? (t.on("complete", u), t.on("abort", E), t.req ? A() : t.on("request", A)) : n && !t._writableState && (t.on("end", f), t.on("close", f)), t.on("end", _), t.on("finish", u), e.error !== !1 && t.on("error", x), t.on("close", E), function() {
            t.removeListener("complete", u), t.removeListener("abort", E), t.removeListener("request", A), t.req && t.req.removeListener("finish", u), t.removeListener("end", f), t.removeListener("close", f), t.removeListener("finish", u), t.removeListener("end", _), t.removeListener("error", x), t.removeListener("close", E);
        };
    }
    Dh.exports = Ph;
});
var Nh = q((S9, Lh)=>{
    "use strict";
    var Tf;
    function gr(t, e, r) {
        return e in t ? Object.defineProperty(t, e, {
            value: r,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : t[e] = r, t;
    }
    var jb = In(), _r = Symbol("lastResolve"), Qr = Symbol("lastReject"), kn = Symbol("error"), Pf = Symbol("ended"), ei = Symbol("lastPromise"), B0 = Symbol("handlePromise"), ti = Symbol("stream");
    function wr(t, e) {
        return {
            value: t,
            done: e
        };
    }
    function Kb(t) {
        var e = t[_r];
        if (e !== null) {
            var r = t[ti].read();
            r !== null && (t[ei] = null, t[_r] = null, t[Qr] = null, e(wr(r, !1)));
        }
    }
    function Wb(t) {
        process.nextTick(Kb, t);
    }
    function Vb(t, e) {
        return function(r, i) {
            t.then(function() {
                if (e[Pf]) {
                    r(wr(void 0, !0));
                    return;
                }
                e[B0](r, i);
            }, i);
        };
    }
    var Gb = Object.getPrototypeOf(function() {}), Zb = Object.setPrototypeOf((Tf = {
        get stream () {
            return this[ti];
        },
        next: function() {
            var e = this, r = this[kn];
            if (r !== null) return Promise.reject(r);
            if (this[Pf]) return Promise.resolve(wr(void 0, !0));
            if (this[ti].destroyed) return new Promise(function(o, u) {
                process.nextTick(function() {
                    e[kn] ? u(e[kn]) : o(wr(void 0, !0));
                });
            });
            var i = this[ei], n;
            if (i) n = new Promise(Vb(i, this));
            else {
                var f = this[ti].read();
                if (f !== null) return Promise.resolve(wr(f, !1));
                n = new Promise(this[B0]);
            }
            return this[ei] = n, n;
        }
    }, gr(Tf, Symbol.asyncIterator, function() {
        return this;
    }), gr(Tf, "return", function() {
        var e = this;
        return new Promise(function(r, i) {
            e[ti].destroy(null, function(n) {
                if (n) {
                    i(n);
                    return;
                }
                r(wr(void 0, !0));
            });
        });
    }), Tf), Gb), Xb = function(e) {
        var r, i = Object.create(Zb, (r = {}, gr(r, ti, {
            value: e,
            writable: !0
        }), gr(r, _r, {
            value: null,
            writable: !0
        }), gr(r, Qr, {
            value: null,
            writable: !0
        }), gr(r, kn, {
            value: null,
            writable: !0
        }), gr(r, Pf, {
            value: e._readableState.endEmitted,
            writable: !0
        }), gr(r, B0, {
            value: function(f, o) {
                var u = i[ti].read();
                u ? (i[ei] = null, i[_r] = null, i[Qr] = null, f(wr(u, !1))) : (i[_r] = f, i[Qr] = o);
            },
            writable: !0
        }), r));
        return i[ei] = null, jb(e, function(n) {
            if (n && n.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                var f = i[Qr];
                f !== null && (i[ei] = null, i[_r] = null, i[Qr] = null, f(n)), i[kn] = n;
                return;
            }
            var o = i[_r];
            o !== null && (i[ei] = null, i[_r] = null, i[Qr] = null, o(wr(void 0, !0))), i[Pf] = !0;
        }), e.on("readable", Wb.bind(null, i)), i;
    };
    Lh.exports = Xb;
});
var Fh = q((A9, Oh)=>{
    Oh.exports = function() {
        throw new Error("Readable.from is not available in the browser");
    };
});
var kf = q((q9, Xh)=>{
    "use strict";
    Xh.exports = Be;
    var Ci;
    Be.ReadableState = jh;
    var B9 = Mf().EventEmitter, Hh = function(e, r) {
        return e.listeners(r).length;
    }, Tn = p0(), Df = Xr().Buffer, Yb = global.Uint8Array || function() {};
    function Jb(t) {
        return Df.from(t);
    }
    function $b(t) {
        return Df.isBuffer(t) || t instanceof Yb;
    }
    var q0 = b0(), Ee;
    q0 && q0.debuglog ? Ee = q0.debuglog("stream") : Ee = function() {};
    var Qb = ph(), D0 = m0(), ev = g0(), tv = ev.getHighWaterMark, Lf = $r().codes, rv = Lf.ERR_INVALID_ARG_TYPE, iv = Lf.ERR_STREAM_PUSH_AFTER_EOF, nv = Lf.ERR_METHOD_NOT_IMPLEMENTED, fv = Lf.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, Ti, R0, I0;
    xe()(Be, Tn);
    var Cn = D0.errorOrDestroy, k0 = [
        "error",
        "close",
        "destroy",
        "pause",
        "resume"
    ];
    function av(t, e, r) {
        if (typeof t.prependListener == "function") return t.prependListener(e, r);
        !t._events || !t._events[e] ? t.on(e, r) : Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [
            r,
            t._events[e]
        ];
    }
    function jh(t, e, r) {
        Ci = Ci || mr(), t = t || {}, typeof r != "boolean" && (r = e instanceof Ci), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = tv(this, t, "readableHighWaterMark", r), this.buffer = new Qb, this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = t.emitClose !== !1, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (Ti || (Ti = Cf().StringDecoder), this.decoder = new Ti(t.encoding), this.encoding = t.encoding);
    }
    function Be(t) {
        if (Ci = Ci || mr(), !(this instanceof Be)) return new Be(t);
        var e = this instanceof Ci;
        this._readableState = new jh(t, this, e), this.readable = !0, t && (typeof t.read == "function" && (this._read = t.read), typeof t.destroy == "function" && (this._destroy = t.destroy)), Tn.call(this);
    }
    Object.defineProperty(Be.prototype, "destroyed", {
        enumerable: !1,
        get: function() {
            return this._readableState === void 0 ? !1 : this._readableState.destroyed;
        },
        set: function(e) {
            this._readableState && (this._readableState.destroyed = e);
        }
    });
    Be.prototype.destroy = D0.destroy;
    Be.prototype._undestroy = D0.undestroy;
    Be.prototype._destroy = function(t, e) {
        e(t);
    };
    Be.prototype.push = function(t, e) {
        var r = this._readableState, i;
        return r.objectMode ? i = !0 : typeof t == "string" && (e = e || r.defaultEncoding, e !== r.encoding && (t = Df.from(t, e), e = ""), i = !0), Kh(this, t, e, !1, i);
    };
    Be.prototype.unshift = function(t) {
        return Kh(this, t, null, !0, !1);
    };
    function Kh(t, e, r, i, n) {
        Ee("readableAddChunk", e);
        var f = t._readableState;
        if (e === null) f.reading = !1, hv(t, f);
        else {
            var o;
            if (n || (o = ov(f, e)), o) Cn(t, o);
            else if (f.objectMode || e && e.length > 0) {
                if (typeof e != "string" && !f.objectMode && Object.getPrototypeOf(e) !== Df.prototype && (e = Jb(e)), i) f.endEmitted ? Cn(t, new fv) : C0(t, f, e, !0);
                else if (f.ended) Cn(t, new iv);
                else {
                    if (f.destroyed) return !1;
                    f.reading = !1, f.decoder && !r ? (e = f.decoder.write(e), f.objectMode || e.length !== 0 ? C0(t, f, e, !1) : P0(t, f)) : C0(t, f, e, !1);
                }
            } else i || (f.reading = !1, P0(t, f));
        }
        return !f.ended && (f.length < f.highWaterMark || f.length === 0);
    }
    function C0(t, e, r, i) {
        e.flowing && e.length === 0 && !e.sync ? (e.awaitDrain = 0, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, i ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && Nf(t)), P0(t, e);
    }
    function ov(t, e) {
        var r;
        return !$b(e) && typeof e != "string" && e !== void 0 && !t.objectMode && (r = new rv("chunk", [
            "string",
            "Buffer",
            "Uint8Array"
        ], e)), r;
    }
    Be.prototype.isPaused = function() {
        return this._readableState.flowing === !1;
    };
    Be.prototype.setEncoding = function(t) {
        Ti || (Ti = Cf().StringDecoder);
        var e = new Ti(t);
        this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
        for(var r = this._readableState.buffer.head, i = ""; r !== null;)i += e.write(r.data), r = r.next;
        return this._readableState.buffer.clear(), i !== "" && this._readableState.buffer.push(i), this._readableState.length = i.length, this;
    };
    var Uh = 1073741824;
    function sv(t) {
        return t >= Uh ? t = Uh : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
    }
    function zh(t, e) {
        return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : t !== t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = sv(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
    }
    Be.prototype.read = function(t) {
        Ee("read", t), t = parseInt(t, 10);
        var e = this._readableState, r = t;
        if (t !== 0 && (e.emittedReadable = !1), t === 0 && e.needReadable && ((e.highWaterMark !== 0 ? e.length >= e.highWaterMark : e.length > 0) || e.ended)) return Ee("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? T0(this) : Nf(this), null;
        if (t = zh(t, e), t === 0 && e.ended) return e.length === 0 && T0(this), null;
        var i = e.needReadable;
        Ee("need readable", i), (e.length === 0 || e.length - t < e.highWaterMark) && (i = !0, Ee("length less than watermark", i)), e.ended || e.reading ? (i = !1, Ee("reading or ended", i)) : i && (Ee("do read"), e.reading = !0, e.sync = !0, e.length === 0 && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = zh(r, e)));
        var n;
        return t > 0 ? n = Gh(t, e) : n = null, n === null ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.awaitDrain = 0), e.length === 0 && (e.ended || (e.needReadable = !0), r !== t && e.ended && T0(this)), n !== null && this.emit("data", n), n;
    };
    function hv(t, e) {
        if (Ee("onEofChunk"), !e.ended) {
            if (e.decoder) {
                var r = e.decoder.end();
                r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
            }
            e.ended = !0, e.sync ? Nf(t) : (e.needReadable = !1, e.emittedReadable || (e.emittedReadable = !0, Wh(t)));
        }
    }
    function Nf(t) {
        var e = t._readableState;
        Ee("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = !1, e.emittedReadable || (Ee("emitReadable", e.flowing), e.emittedReadable = !0, process.nextTick(Wh, t));
    }
    function Wh(t) {
        var e = t._readableState;
        Ee("emitReadable_", e.destroyed, e.length, e.ended), !e.destroyed && (e.length || e.ended) && (t.emit("readable"), e.emittedReadable = !1), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, L0(t);
    }
    function P0(t, e) {
        e.readingMore || (e.readingMore = !0, process.nextTick(cv, t, e));
    }
    function cv(t, e) {
        for(; !e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && e.length === 0);){
            var r = e.length;
            if (Ee("maybeReadMore read 0"), t.read(0), r === e.length) break;
        }
        e.readingMore = !1;
    }
    Be.prototype._read = function(t) {
        Cn(this, new nv("_read()"));
    };
    Be.prototype.pipe = function(t, e) {
        var r = this, i = this._readableState;
        switch(i.pipesCount){
            case 0:
                i.pipes = t;
                break;
            case 1:
                i.pipes = [
                    i.pipes,
                    t
                ];
                break;
            default:
                i.pipes.push(t);
                break;
        }
        i.pipesCount += 1, Ee("pipe count=%d opts=%j", i.pipesCount, e);
        var n = (!e || e.end !== !1) && t !== process.stdout && t !== process.stderr, f = n ? u : P;
        i.endEmitted ? process.nextTick(f) : r.once("end", f), t.on("unpipe", o);
        function o(F, D) {
            Ee("onunpipe"), F === r && D && D.hasUnpiped === !1 && (D.hasUnpiped = !0, x());
        }
        function u() {
            Ee("onend"), t.end();
        }
        var v = uv(r);
        t.on("drain", v);
        var _ = !1;
        function x() {
            Ee("cleanup"), t.removeListener("close", B), t.removeListener("finish", I), t.removeListener("drain", v), t.removeListener("error", A), t.removeListener("unpipe", o), r.removeListener("end", u), r.removeListener("end", P), r.removeListener("data", E), _ = !0, i.awaitDrain && (!t._writableState || t._writableState.needDrain) && v();
        }
        r.on("data", E);
        function E(F) {
            Ee("ondata");
            var D = t.write(F);
            Ee("dest.write", D), D === !1 && ((i.pipesCount === 1 && i.pipes === t || i.pipesCount > 1 && Zh(i.pipes, t) !== -1) && !_ && (Ee("false write response, pause", i.awaitDrain), i.awaitDrain++), r.pause());
        }
        function A(F) {
            Ee("onerror", F), P(), t.removeListener("error", A), Hh(t, "error") === 0 && Cn(t, F);
        }
        av(t, "error", A);
        function B() {
            t.removeListener("finish", I), P();
        }
        t.once("close", B);
        function I() {
            Ee("onfinish"), t.removeListener("close", B), P();
        }
        t.once("finish", I);
        function P() {
            Ee("unpipe"), r.unpipe(t);
        }
        return t.emit("pipe", r), i.flowing || (Ee("pipe resume"), r.resume()), t;
    };
    function uv(t) {
        return function() {
            var r = t._readableState;
            Ee("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && Hh(t, "data") && (r.flowing = !0, L0(t));
        };
    }
    Be.prototype.unpipe = function(t) {
        var e = this._readableState, r = {
            hasUnpiped: !1
        };
        if (e.pipesCount === 0) return this;
        if (e.pipesCount === 1) return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this, r), this);
        if (!t) {
            var i = e.pipes, n = e.pipesCount;
            e.pipes = null, e.pipesCount = 0, e.flowing = !1;
            for(var f = 0; f < n; f++)i[f].emit("unpipe", this, {
                hasUnpiped: !1
            });
            return this;
        }
        var o = Zh(e.pipes, t);
        return o === -1 ? this : (e.pipes.splice(o, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r), this);
    };
    Be.prototype.on = function(t, e) {
        var r = Tn.prototype.on.call(this, t, e), i = this._readableState;
        return t === "data" ? (i.readableListening = this.listenerCount("readable") > 0, i.flowing !== !1 && this.resume()) : t === "readable" && !i.endEmitted && !i.readableListening && (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, Ee("on readable", i.length, i.reading), i.length ? Nf(this) : i.reading || process.nextTick(dv, this)), r;
    };
    Be.prototype.addListener = Be.prototype.on;
    Be.prototype.removeListener = function(t, e) {
        var r = Tn.prototype.removeListener.call(this, t, e);
        return t === "readable" && process.nextTick(Vh, this), r;
    };
    Be.prototype.removeAllListeners = function(t) {
        var e = Tn.prototype.removeAllListeners.apply(this, arguments);
        return (t === "readable" || t === void 0) && process.nextTick(Vh, this), e;
    };
    function Vh(t) {
        var e = t._readableState;
        e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && !e.paused ? e.flowing = !0 : t.listenerCount("data") > 0 && t.resume();
    }
    function dv(t) {
        Ee("readable nexttick read 0"), t.read(0);
    }
    Be.prototype.resume = function() {
        var t = this._readableState;
        return t.flowing || (Ee("resume"), t.flowing = !t.readableListening, lv(this, t)), t.paused = !1, this;
    };
    function lv(t, e) {
        e.resumeScheduled || (e.resumeScheduled = !0, process.nextTick(pv, t, e));
    }
    function pv(t, e) {
        Ee("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = !1, t.emit("resume"), L0(t), e.flowing && !e.reading && t.read(0);
    }
    Be.prototype.pause = function() {
        return Ee("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (Ee("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
    };
    function L0(t) {
        var e = t._readableState;
        for(Ee("flow", e.flowing); e.flowing && t.read() !== null;);
    }
    Be.prototype.wrap = function(t) {
        var e = this, r = this._readableState, i = !1;
        t.on("end", function() {
            if (Ee("wrapped end"), r.decoder && !r.ended) {
                var o = r.decoder.end();
                o && o.length && e.push(o);
            }
            e.push(null);
        }), t.on("data", function(o) {
            if (Ee("wrapped data"), r.decoder && (o = r.decoder.write(o)), !(r.objectMode && o == null) && !(!r.objectMode && (!o || !o.length))) {
                var u = e.push(o);
                u || (i = !0, t.pause());
            }
        });
        for(var n in t)this[n] === void 0 && typeof t[n] == "function" && (this[n] = function(u) {
            return function() {
                return t[u].apply(t, arguments);
            };
        }(n));
        for(var f = 0; f < k0.length; f++)t.on(k0[f], this.emit.bind(this, k0[f]));
        return this._read = function(o) {
            Ee("wrapped _read", o), i && (i = !1, t.resume());
        }, this;
    };
    typeof Symbol == "function" && (Be.prototype[Symbol.asyncIterator] = function() {
        return R0 === void 0 && (R0 = Nh()), R0(this);
    });
    Object.defineProperty(Be.prototype, "readableHighWaterMark", {
        enumerable: !1,
        get: function() {
            return this._readableState.highWaterMark;
        }
    });
    Object.defineProperty(Be.prototype, "readableBuffer", {
        enumerable: !1,
        get: function() {
            return this._readableState && this._readableState.buffer;
        }
    });
    Object.defineProperty(Be.prototype, "readableFlowing", {
        enumerable: !1,
        get: function() {
            return this._readableState.flowing;
        },
        set: function(e) {
            this._readableState && (this._readableState.flowing = e);
        }
    });
    Be._fromList = Gh;
    Object.defineProperty(Be.prototype, "readableLength", {
        enumerable: !1,
        get: function() {
            return this._readableState.length;
        }
    });
    function Gh(t, e) {
        if (e.length === 0) return null;
        var r;
        return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.first() : r = e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r;
    }
    function T0(t) {
        var e = t._readableState;
        Ee("endReadable", e.endEmitted), e.endEmitted || (e.ended = !0, process.nextTick(bv, e, t));
    }
    function bv(t, e) {
        if (Ee("endReadableNT", t.endEmitted, t.length), !t.endEmitted && t.length === 0 && (t.endEmitted = !0, e.readable = !1, e.emit("end"), t.autoDestroy)) {
            var r = e._writableState;
            (!r || r.autoDestroy && r.finished) && e.destroy();
        }
    }
    typeof Symbol == "function" && (Be.from = function(t, e) {
        return I0 === void 0 && (I0 = Fh()), I0(Be, t, e);
    });
    function Zh(t, e) {
        for(var r = 0, i = t.length; r < i; r++)if (t[r] === e) return r;
        return -1;
    }
});
var Uf = q((R9, Jh)=>{
    "use strict";
    Jh.exports = ir;
    var Of = $r().codes, vv = Of.ERR_METHOD_NOT_IMPLEMENTED, yv = Of.ERR_MULTIPLE_CALLBACK, mv = Of.ERR_TRANSFORM_ALREADY_TRANSFORMING, gv = Of.ERR_TRANSFORM_WITH_LENGTH_0, Ff = mr();
    xe()(ir, Ff);
    function _v(t, e) {
        var r = this._transformState;
        r.transforming = !1;
        var i = r.writecb;
        if (i === null) return this.emit("error", new yv);
        r.writechunk = null, r.writecb = null, e != null && this.push(e), i(t);
        var n = this._readableState;
        n.reading = !1, (n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark);
    }
    function ir(t) {
        if (!(this instanceof ir)) return new ir(t);
        Ff.call(this, t), this._transformState = {
            afterTransform: _v.bind(this),
            needTransform: !1,
            transforming: !1,
            writecb: null,
            writechunk: null,
            writeencoding: null
        }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", wv);
    }
    function wv() {
        var t = this;
        typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, r) {
            Yh(t, e, r);
        }) : Yh(this, null, null);
    }
    ir.prototype.push = function(t, e) {
        return this._transformState.needTransform = !1, Ff.prototype.push.call(this, t, e);
    };
    ir.prototype._transform = function(t, e, r) {
        r(new vv("_transform()"));
    };
    ir.prototype._write = function(t, e, r) {
        var i = this._transformState;
        if (i.writecb = r, i.writechunk = t, i.writeencoding = e, !i.transforming) {
            var n = this._readableState;
            (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark);
        }
    };
    ir.prototype._read = function(t) {
        var e = this._transformState;
        e.writechunk !== null && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
    };
    ir.prototype._destroy = function(t, e) {
        Ff.prototype._destroy.call(this, t, function(r) {
            e(r);
        });
    };
    function Yh(t, e, r) {
        if (e) return t.emit("error", e);
        if (r != null && t.push(r), t._writableState.length) throw new gv;
        if (t._transformState.transforming) throw new mv;
        return t.push(null);
    }
});
var N0 = q((I9, Qh)=>{
    "use strict";
    Qh.exports = Pn;
    var $h = Uf();
    xe()(Pn, $h);
    function Pn(t) {
        if (!(this instanceof Pn)) return new Pn(t);
        $h.call(this, t);
    }
    Pn.prototype._transform = function(t, e, r) {
        r(null, t);
    };
});
var F0 = q((k9, ic)=>{
    "use strict";
    var O0;
    function xv(t) {
        var e = !1;
        return function() {
            e || (e = !0, t.apply(void 0, arguments));
        };
    }
    var rc = $r().codes, Mv = rc.ERR_MISSING_ARGS, Ev = rc.ERR_STREAM_DESTROYED;
    function ec(t) {
        if (t) throw t;
    }
    function Sv(t) {
        return t.setHeader && typeof t.abort == "function";
    }
    function Av(t, e, r, i) {
        i = xv(i);
        var n = !1;
        t.on("close", function() {
            n = !0;
        }), O0 === void 0 && (O0 = In()), O0(t, {
            readable: e,
            writable: r
        }, function(o) {
            if (o) return i(o);
            n = !0, i();
        });
        var f = !1;
        return function(o) {
            if (!n && !f) {
                if (f = !0, Sv(t)) return t.abort();
                if (typeof t.destroy == "function") return t.destroy();
                i(o || new Ev("pipe"));
            }
        };
    }
    function tc(t) {
        t();
    }
    function Bv(t, e) {
        return t.pipe(e);
    }
    function qv(t) {
        return !t.length || typeof t[t.length - 1] != "function" ? ec : t.pop();
    }
    function Rv() {
        for(var t = arguments.length, e = new Array(t), r = 0; r < t; r++)e[r] = arguments[r];
        var i = qv(e);
        if (Array.isArray(e[0]) && (e = e[0]), e.length < 2) throw new Mv("streams");
        var n, f = e.map(function(o, u) {
            var v = u < e.length - 1, _ = u > 0;
            return Av(o, v, _, function(x) {
                n || (n = x), x && f.forEach(tc), !v && (f.forEach(tc), i(n));
            });
        });
        return e.reduce(Bv);
    }
    ic.exports = Rv;
});
var U0 = q((vt, nc)=>{
    vt = nc.exports = kf();
    vt.Stream = vt;
    vt.Readable = vt;
    vt.Writable = qf();
    vt.Duplex = mr();
    vt.Transform = Uf();
    vt.PassThrough = N0();
    vt.finished = In();
    vt.pipeline = F0();
});
var z0 = q((C9, ac)=>{
    "use strict";
    var zf = we().Buffer, fc = U0().Transform, Iv = xe();
    function kv(t, e) {
        if (!zf.isBuffer(t) && typeof t != "string") throw new TypeError(e + " must be a string or a buffer");
    }
    function xr(t) {
        fc.call(this), this._block = zf.allocUnsafe(t), this._blockSize = t, this._blockOffset = 0, this._length = [
            0,
            0,
            0,
            0
        ], this._finalized = !1;
    }
    Iv(xr, fc);
    xr.prototype._transform = function(t, e, r) {
        var i = null;
        try {
            this.update(t, e);
        } catch (n) {
            i = n;
        }
        r(i);
    };
    xr.prototype._flush = function(t) {
        var e = null;
        try {
            this.push(this.digest());
        } catch (r) {
            e = r;
        }
        t(e);
    };
    xr.prototype.update = function(t, e) {
        if (kv(t, "Data"), this._finalized) throw new Error("Digest already called");
        zf.isBuffer(t) || (t = zf.from(t, e));
        for(var r = this._block, i = 0; this._blockOffset + t.length - i >= this._blockSize;){
            for(var n = this._blockOffset; n < this._blockSize;)r[n++] = t[i++];
            this._update(), this._blockOffset = 0;
        }
        for(; i < t.length;)r[this._blockOffset++] = t[i++];
        for(var f = 0, o = t.length * 8; o > 0; ++f)this._length[f] += o, o = this._length[f] / 4294967296 | 0, o > 0 && (this._length[f] -= 4294967296 * o);
        return this;
    };
    xr.prototype._update = function() {
        throw new Error("_update is not implemented");
    };
    xr.prototype.digest = function(t) {
        if (this._finalized) throw new Error("Digest already called");
        this._finalized = !0;
        var e = this._digest();
        t !== void 0 && (e = e.toString(t)), this._block.fill(0), this._blockOffset = 0;
        for(var r = 0; r < 4; ++r)this._length[r] = 0;
        return e;
    };
    xr.prototype._digest = function() {
        throw new Error("_digest is not implemented");
    };
    ac.exports = xr;
});
var Kf = q((T9, sc)=>{
    "use strict";
    var Cv = xe(), oc = z0(), Tv = we().Buffer, Pv = new Array(16);
    function Hf() {
        oc.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
    }
    Cv(Hf, oc);
    Hf.prototype._update = function() {
        for(var t = Pv, e = 0; e < 16; ++e)t[e] = this._block.readInt32LE(e * 4);
        var r = this._a, i = this._b, n = this._c, f = this._d;
        r = $e(r, i, n, f, t[0], 3614090360, 7), f = $e(f, r, i, n, t[1], 3905402710, 12), n = $e(n, f, r, i, t[2], 606105819, 17), i = $e(i, n, f, r, t[3], 3250441966, 22), r = $e(r, i, n, f, t[4], 4118548399, 7), f = $e(f, r, i, n, t[5], 1200080426, 12), n = $e(n, f, r, i, t[6], 2821735955, 17), i = $e(i, n, f, r, t[7], 4249261313, 22), r = $e(r, i, n, f, t[8], 1770035416, 7), f = $e(f, r, i, n, t[9], 2336552879, 12), n = $e(n, f, r, i, t[10], 4294925233, 17), i = $e(i, n, f, r, t[11], 2304563134, 22), r = $e(r, i, n, f, t[12], 1804603682, 7), f = $e(f, r, i, n, t[13], 4254626195, 12), n = $e(n, f, r, i, t[14], 2792965006, 17), i = $e(i, n, f, r, t[15], 1236535329, 22), r = Qe(r, i, n, f, t[1], 4129170786, 5), f = Qe(f, r, i, n, t[6], 3225465664, 9), n = Qe(n, f, r, i, t[11], 643717713, 14), i = Qe(i, n, f, r, t[0], 3921069994, 20), r = Qe(r, i, n, f, t[5], 3593408605, 5), f = Qe(f, r, i, n, t[10], 38016083, 9), n = Qe(n, f, r, i, t[15], 3634488961, 14), i = Qe(i, n, f, r, t[4], 3889429448, 20), r = Qe(r, i, n, f, t[9], 568446438, 5), f = Qe(f, r, i, n, t[14], 3275163606, 9), n = Qe(n, f, r, i, t[3], 4107603335, 14), i = Qe(i, n, f, r, t[8], 1163531501, 20), r = Qe(r, i, n, f, t[13], 2850285829, 5), f = Qe(f, r, i, n, t[2], 4243563512, 9), n = Qe(n, f, r, i, t[7], 1735328473, 14), i = Qe(i, n, f, r, t[12], 2368359562, 20), r = et(r, i, n, f, t[5], 4294588738, 4), f = et(f, r, i, n, t[8], 2272392833, 11), n = et(n, f, r, i, t[11], 1839030562, 16), i = et(i, n, f, r, t[14], 4259657740, 23), r = et(r, i, n, f, t[1], 2763975236, 4), f = et(f, r, i, n, t[4], 1272893353, 11), n = et(n, f, r, i, t[7], 4139469664, 16), i = et(i, n, f, r, t[10], 3200236656, 23), r = et(r, i, n, f, t[13], 681279174, 4), f = et(f, r, i, n, t[0], 3936430074, 11), n = et(n, f, r, i, t[3], 3572445317, 16), i = et(i, n, f, r, t[6], 76029189, 23), r = et(r, i, n, f, t[9], 3654602809, 4), f = et(f, r, i, n, t[12], 3873151461, 11), n = et(n, f, r, i, t[15], 530742520, 16), i = et(i, n, f, r, t[2], 3299628645, 23), r = tt(r, i, n, f, t[0], 4096336452, 6), f = tt(f, r, i, n, t[7], 1126891415, 10), n = tt(n, f, r, i, t[14], 2878612391, 15), i = tt(i, n, f, r, t[5], 4237533241, 21), r = tt(r, i, n, f, t[12], 1700485571, 6), f = tt(f, r, i, n, t[3], 2399980690, 10), n = tt(n, f, r, i, t[10], 4293915773, 15), i = tt(i, n, f, r, t[1], 2240044497, 21), r = tt(r, i, n, f, t[8], 1873313359, 6), f = tt(f, r, i, n, t[15], 4264355552, 10), n = tt(n, f, r, i, t[6], 2734768916, 15), i = tt(i, n, f, r, t[13], 1309151649, 21), r = tt(r, i, n, f, t[4], 4149444226, 6), f = tt(f, r, i, n, t[11], 3174756917, 10), n = tt(n, f, r, i, t[2], 718787259, 15), i = tt(i, n, f, r, t[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + i | 0, this._c = this._c + n | 0, this._d = this._d + f | 0;
    };
    Hf.prototype._digest = function() {
        this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
        var t = Tv.allocUnsafe(16);
        return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t;
    };
    function jf(t, e) {
        return t << e | t >>> 32 - e;
    }
    function $e(t, e, r, i, n, f, o) {
        return jf(t + (e & r | ~e & i) + n + f | 0, o) + e | 0;
    }
    function Qe(t, e, r, i, n, f, o) {
        return jf(t + (e & i | r & ~i) + n + f | 0, o) + e | 0;
    }
    function et(t, e, r, i, n, f, o) {
        return jf(t + (e ^ r ^ i) + n + f | 0, o) + e | 0;
    }
    function tt(t, e, r, i, n, f, o) {
        return jf(t + (r ^ (e | ~i)) + n + f | 0, o) + e | 0;
    }
    sc.exports = Hf;
});
var Vf = q((P9, bc)=>{
    "use strict";
    var H0 = Xr().Buffer, Dv = xe(), pc = z0(), Lv = new Array(16), Dn = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
    ], Ln = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
    ], Nn = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
    ], On = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
    ], Fn = [
        0,
        1518500249,
        1859775393,
        2400959708,
        2840853838
    ], Un = [
        1352829926,
        1548603684,
        1836072691,
        2053994217,
        0
    ];
    function Wf() {
        pc.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
    }
    Dv(Wf, pc);
    Wf.prototype._update = function() {
        for(var t = Lv, e = 0; e < 16; ++e)t[e] = this._block.readInt32LE(e * 4);
        for(var r = this._a | 0, i = this._b | 0, n = this._c | 0, f = this._d | 0, o = this._e | 0, u = this._a | 0, v = this._b | 0, _ = this._c | 0, x = this._d | 0, E = this._e | 0, A = 0; A < 80; A += 1){
            var B, I;
            A < 16 ? (B = hc(r, i, n, f, o, t[Dn[A]], Fn[0], Nn[A]), I = lc(u, v, _, x, E, t[Ln[A]], Un[0], On[A])) : A < 32 ? (B = cc(r, i, n, f, o, t[Dn[A]], Fn[1], Nn[A]), I = dc(u, v, _, x, E, t[Ln[A]], Un[1], On[A])) : A < 48 ? (B = uc(r, i, n, f, o, t[Dn[A]], Fn[2], Nn[A]), I = uc(u, v, _, x, E, t[Ln[A]], Un[2], On[A])) : A < 64 ? (B = dc(r, i, n, f, o, t[Dn[A]], Fn[3], Nn[A]), I = cc(u, v, _, x, E, t[Ln[A]], Un[3], On[A])) : (B = lc(r, i, n, f, o, t[Dn[A]], Fn[4], Nn[A]), I = hc(u, v, _, x, E, t[Ln[A]], Un[4], On[A])), r = o, o = f, f = ri(n, 10), n = i, i = B, u = E, E = x, x = ri(_, 10), _ = v, v = I;
        }
        var P = this._b + n + x | 0;
        this._b = this._c + f + E | 0, this._c = this._d + o + u | 0, this._d = this._e + r + v | 0, this._e = this._a + i + _ | 0, this._a = P;
    };
    Wf.prototype._digest = function() {
        this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
        var t = H0.alloc ? H0.alloc(20) : new H0(20);
        return t.writeInt32LE(this._a, 0), t.writeInt32LE(this._b, 4), t.writeInt32LE(this._c, 8), t.writeInt32LE(this._d, 12), t.writeInt32LE(this._e, 16), t;
    };
    function ri(t, e) {
        return t << e | t >>> 32 - e;
    }
    function hc(t, e, r, i, n, f, o, u) {
        return ri(t + (e ^ r ^ i) + f + o | 0, u) + n | 0;
    }
    function cc(t, e, r, i, n, f, o, u) {
        return ri(t + (e & r | ~e & i) + f + o | 0, u) + n | 0;
    }
    function uc(t, e, r, i, n, f, o, u) {
        return ri(t + ((e | ~r) ^ i) + f + o | 0, u) + n | 0;
    }
    function dc(t, e, r, i, n, f, o, u) {
        return ri(t + (e & i | r & ~i) + f + o | 0, u) + n | 0;
    }
    function lc(t, e, r, i, n, f, o, u) {
        return ri(t + (e ^ (r | ~i)) + f + o | 0, u) + n | 0;
    }
    bc.exports = Wf;
});
var ii = q((D9, yc)=>{
    var vc = we().Buffer;
    function Gf(t, e) {
        this._block = vc.alloc(t), this._finalSize = e, this._blockSize = t, this._len = 0;
    }
    Gf.prototype.update = function(t, e) {
        typeof t == "string" && (e = e || "utf8", t = vc.from(t, e));
        for(var r = this._block, i = this._blockSize, n = t.length, f = this._len, o = 0; o < n;){
            for(var u = f % i, v = Math.min(n - o, i - u), _ = 0; _ < v; _++)r[u + _] = t[o + _];
            f += v, o += v, f % i === 0 && this._update(r);
        }
        return this._len += n, this;
    };
    Gf.prototype.digest = function(t) {
        var e = this._len % this._blockSize;
        this._block[e] = 128, this._block.fill(0, e + 1), e >= this._finalSize && (this._update(this._block), this._block.fill(0));
        var r = this._len * 8;
        if (r <= 4294967295) this._block.writeUInt32BE(r, this._blockSize - 4);
        else {
            var i = (r & 4294967295) >>> 0, n = (r - i) / 4294967296;
            this._block.writeUInt32BE(n, this._blockSize - 8), this._block.writeUInt32BE(i, this._blockSize - 4);
        }
        this._update(this._block);
        var f = this._hash();
        return t ? f.toString(t) : f;
    };
    Gf.prototype._update = function() {
        throw new Error("_update must be implemented by subclass");
    };
    yc.exports = Gf;
});
var _c = q((L9, gc)=>{
    var Nv = xe(), mc = ii(), Ov = we().Buffer, Fv = [
        1518500249,
        1859775393,
        -1894007588,
        -899497514
    ], Uv = new Array(80);
    function zn() {
        this.init(), this._w = Uv, mc.call(this, 64, 56);
    }
    Nv(zn, mc);
    zn.prototype.init = function() {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function zv(t) {
        return t << 5 | t >>> 27;
    }
    function Hv(t) {
        return t << 30 | t >>> 2;
    }
    function jv(t, e, r, i) {
        return t === 0 ? e & r | ~e & i : t === 2 ? e & r | e & i | r & i : e ^ r ^ i;
    }
    zn.prototype._update = function(t) {
        for(var e = this._w, r = this._a | 0, i = this._b | 0, n = this._c | 0, f = this._d | 0, o = this._e | 0, u = 0; u < 16; ++u)e[u] = t.readInt32BE(u * 4);
        for(; u < 80; ++u)e[u] = e[u - 3] ^ e[u - 8] ^ e[u - 14] ^ e[u - 16];
        for(var v = 0; v < 80; ++v){
            var _ = ~~(v / 20), x = zv(r) + jv(_, i, n, f) + o + e[v] + Fv[_] | 0;
            o = f, f = n, n = Hv(i), i = r, r = x;
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = n + this._c | 0, this._d = f + this._d | 0, this._e = o + this._e | 0;
    };
    zn.prototype._hash = function() {
        var t = Ov.allocUnsafe(20);
        return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
    };
    gc.exports = zn;
});
var Mc = q((N9, xc)=>{
    var Kv = xe(), wc = ii(), Wv = we().Buffer, Vv = [
        1518500249,
        1859775393,
        -1894007588,
        -899497514
    ], Gv = new Array(80);
    function Hn() {
        this.init(), this._w = Gv, wc.call(this, 64, 56);
    }
    Kv(Hn, wc);
    Hn.prototype.init = function() {
        return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
    };
    function Zv(t) {
        return t << 1 | t >>> 31;
    }
    function Xv(t) {
        return t << 5 | t >>> 27;
    }
    function Yv(t) {
        return t << 30 | t >>> 2;
    }
    function Jv(t, e, r, i) {
        return t === 0 ? e & r | ~e & i : t === 2 ? e & r | e & i | r & i : e ^ r ^ i;
    }
    Hn.prototype._update = function(t) {
        for(var e = this._w, r = this._a | 0, i = this._b | 0, n = this._c | 0, f = this._d | 0, o = this._e | 0, u = 0; u < 16; ++u)e[u] = t.readInt32BE(u * 4);
        for(; u < 80; ++u)e[u] = Zv(e[u - 3] ^ e[u - 8] ^ e[u - 14] ^ e[u - 16]);
        for(var v = 0; v < 80; ++v){
            var _ = ~~(v / 20), x = Xv(r) + Jv(_, i, n, f) + o + e[v] + Vv[_] | 0;
            o = f, f = n, n = Yv(i), i = r, r = x;
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = n + this._c | 0, this._d = f + this._d | 0, this._e = o + this._e | 0;
    };
    Hn.prototype._hash = function() {
        var t = Wv.allocUnsafe(20);
        return t.writeInt32BE(this._a | 0, 0), t.writeInt32BE(this._b | 0, 4), t.writeInt32BE(this._c | 0, 8), t.writeInt32BE(this._d | 0, 12), t.writeInt32BE(this._e | 0, 16), t;
    };
    xc.exports = Hn;
});
var j0 = q((O9, Sc)=>{
    var $v = xe(), Ec = ii(), Qv = we().Buffer, e6 = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ], t6 = new Array(64);
    function jn() {
        this.init(), this._w = t6, Ec.call(this, 64, 56);
    }
    $v(jn, Ec);
    jn.prototype.init = function() {
        return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
    };
    function r6(t, e, r) {
        return r ^ t & (e ^ r);
    }
    function i6(t, e, r) {
        return t & e | r & (t | e);
    }
    function n6(t) {
        return (t >>> 2 | t << 30) ^ (t >>> 13 | t << 19) ^ (t >>> 22 | t << 10);
    }
    function f6(t) {
        return (t >>> 6 | t << 26) ^ (t >>> 11 | t << 21) ^ (t >>> 25 | t << 7);
    }
    function a6(t) {
        return (t >>> 7 | t << 25) ^ (t >>> 18 | t << 14) ^ t >>> 3;
    }
    function o6(t) {
        return (t >>> 17 | t << 15) ^ (t >>> 19 | t << 13) ^ t >>> 10;
    }
    jn.prototype._update = function(t) {
        for(var e = this._w, r = this._a | 0, i = this._b | 0, n = this._c | 0, f = this._d | 0, o = this._e | 0, u = this._f | 0, v = this._g | 0, _ = this._h | 0, x = 0; x < 16; ++x)e[x] = t.readInt32BE(x * 4);
        for(; x < 64; ++x)e[x] = o6(e[x - 2]) + e[x - 7] + a6(e[x - 15]) + e[x - 16] | 0;
        for(var E = 0; E < 64; ++E){
            var A = _ + f6(o) + r6(o, u, v) + e6[E] + e[E] | 0, B = n6(r) + i6(r, i, n) | 0;
            _ = v, v = u, u = o, o = f + A | 0, f = n, n = i, i = r, r = A + B | 0;
        }
        this._a = r + this._a | 0, this._b = i + this._b | 0, this._c = n + this._c | 0, this._d = f + this._d | 0, this._e = o + this._e | 0, this._f = u + this._f | 0, this._g = v + this._g | 0, this._h = _ + this._h | 0;
    };
    jn.prototype._hash = function() {
        var t = Qv.allocUnsafe(32);
        return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t.writeInt32BE(this._h, 28), t;
    };
    Sc.exports = jn;
});
var Bc = q((F9, Ac)=>{
    var s6 = xe(), h6 = j0(), c6 = ii(), u6 = we().Buffer, d6 = new Array(64);
    function Zf() {
        this.init(), this._w = d6, c6.call(this, 64, 56);
    }
    s6(Zf, h6);
    Zf.prototype.init = function() {
        return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
    };
    Zf.prototype._hash = function() {
        var t = u6.allocUnsafe(28);
        return t.writeInt32BE(this._a, 0), t.writeInt32BE(this._b, 4), t.writeInt32BE(this._c, 8), t.writeInt32BE(this._d, 12), t.writeInt32BE(this._e, 16), t.writeInt32BE(this._f, 20), t.writeInt32BE(this._g, 24), t;
    };
    Ac.exports = Zf;
});
var K0 = q((U9, Pc)=>{
    var l6 = xe(), Tc = ii(), p6 = we().Buffer, qc = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
    ], b6 = new Array(160);
    function Kn() {
        this.init(), this._w = b6, Tc.call(this, 128, 112);
    }
    l6(Kn, Tc);
    Kn.prototype.init = function() {
        return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
    };
    function Rc(t, e, r) {
        return r ^ t & (e ^ r);
    }
    function Ic(t, e, r) {
        return t & e | r & (t | e);
    }
    function kc(t, e) {
        return (t >>> 28 | e << 4) ^ (e >>> 2 | t << 30) ^ (e >>> 7 | t << 25);
    }
    function Cc(t, e) {
        return (t >>> 14 | e << 18) ^ (t >>> 18 | e << 14) ^ (e >>> 9 | t << 23);
    }
    function v6(t, e) {
        return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ t >>> 7;
    }
    function y6(t, e) {
        return (t >>> 1 | e << 31) ^ (t >>> 8 | e << 24) ^ (t >>> 7 | e << 25);
    }
    function m6(t, e) {
        return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ t >>> 6;
    }
    function g6(t, e) {
        return (t >>> 19 | e << 13) ^ (e >>> 29 | t << 3) ^ (t >>> 6 | e << 26);
    }
    function We(t, e) {
        return t >>> 0 < e >>> 0 ? 1 : 0;
    }
    Kn.prototype._update = function(t) {
        for(var e = this._w, r = this._ah | 0, i = this._bh | 0, n = this._ch | 0, f = this._dh | 0, o = this._eh | 0, u = this._fh | 0, v = this._gh | 0, _ = this._hh | 0, x = this._al | 0, E = this._bl | 0, A = this._cl | 0, B = this._dl | 0, I = this._el | 0, P = this._fl | 0, F = this._gl | 0, D = this._hl | 0, z = 0; z < 32; z += 2)e[z] = t.readInt32BE(z * 4), e[z + 1] = t.readInt32BE(z * 4 + 4);
        for(; z < 160; z += 2){
            var Ae = e[z - 30], qe = e[z - 30 + 1], Pe = v6(Ae, qe), Re = y6(qe, Ae);
            Ae = e[z - 4], qe = e[z - 4 + 1];
            var Ue = m6(Ae, qe), Se = g6(qe, Ae), Fe = e[z - 14], S = e[z - 14 + 1], c = e[z - 32], m = e[z - 32 + 1], l = Re + S | 0, a = Pe + Fe + We(l, Re) | 0;
            l = l + Se | 0, a = a + Ue + We(l, Se) | 0, l = l + m | 0, a = a + c + We(l, m) | 0, e[z] = a, e[z + 1] = l;
        }
        for(var h = 0; h < 160; h += 2){
            a = e[h], l = e[h + 1];
            var p = Ic(r, i, n), y = Ic(x, E, A), b = kc(r, x), s = kc(x, r), g = Cc(o, I), w = Cc(I, o), d = qc[h], M = qc[h + 1], k = Rc(o, u, v), T = Rc(I, P, F), C = D + w | 0, N = _ + g + We(C, D) | 0;
            C = C + T | 0, N = N + k + We(C, T) | 0, C = C + M | 0, N = N + d + We(C, M) | 0, C = C + l | 0, N = N + a + We(C, l) | 0;
            var L = s + y | 0, O = b + p + We(L, s) | 0;
            _ = v, D = F, v = u, F = P, u = o, P = I, I = B + C | 0, o = f + N + We(I, B) | 0, f = n, B = A, n = i, A = E, i = r, E = x, x = C + L | 0, r = N + O + We(x, C) | 0;
        }
        this._al = this._al + x | 0, this._bl = this._bl + E | 0, this._cl = this._cl + A | 0, this._dl = this._dl + B | 0, this._el = this._el + I | 0, this._fl = this._fl + P | 0, this._gl = this._gl + F | 0, this._hl = this._hl + D | 0, this._ah = this._ah + r + We(this._al, x) | 0, this._bh = this._bh + i + We(this._bl, E) | 0, this._ch = this._ch + n + We(this._cl, A) | 0, this._dh = this._dh + f + We(this._dl, B) | 0, this._eh = this._eh + o + We(this._el, I) | 0, this._fh = this._fh + u + We(this._fl, P) | 0, this._gh = this._gh + v + We(this._gl, F) | 0, this._hh = this._hh + _ + We(this._hl, D) | 0;
    };
    Kn.prototype._hash = function() {
        var t = p6.allocUnsafe(64);
        function e(r, i, n) {
            t.writeInt32BE(r, n), t.writeInt32BE(i, n + 4);
        }
        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), e(this._gh, this._gl, 48), e(this._hh, this._hl, 56), t;
    };
    Pc.exports = Kn;
});
var Lc = q((z9, Dc)=>{
    var _6 = xe(), w6 = K0(), x6 = ii(), M6 = we().Buffer, E6 = new Array(160);
    function Xf() {
        this.init(), this._w = E6, x6.call(this, 128, 112);
    }
    _6(Xf, w6);
    Xf.prototype.init = function() {
        return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
    };
    Xf.prototype._hash = function() {
        var t = M6.allocUnsafe(48);
        function e(r, i, n) {
            t.writeInt32BE(r, n), t.writeInt32BE(i, n + 4);
        }
        return e(this._ah, this._al, 0), e(this._bh, this._bl, 8), e(this._ch, this._cl, 16), e(this._dh, this._dl, 24), e(this._eh, this._el, 32), e(this._fh, this._fl, 40), t;
    };
    Dc.exports = Xf;
});
var Yf = q((nr, Nc)=>{
    var nr = Nc.exports = function(e) {
        e = e.toLowerCase();
        var r = nr[e];
        if (!r) throw new Error(e + " is not supported (we accept pull requests)");
        return new r;
    };
    nr.sha = _c();
    nr.sha1 = Mc();
    nr.sha224 = Bc();
    nr.sha256 = j0();
    nr.sha384 = Lc();
    nr.sha512 = K0();
});
var Fc = q((H9, Oc)=>{
    Oc.exports = yt;
    var W0 = Mf().EventEmitter, S6 = xe();
    S6(yt, W0);
    yt.Readable = kf();
    yt.Writable = qf();
    yt.Duplex = mr();
    yt.Transform = Uf();
    yt.PassThrough = N0();
    yt.finished = In();
    yt.pipeline = F0();
    yt.Stream = yt;
    function yt() {
        W0.call(this);
    }
    yt.prototype.pipe = function(t, e) {
        var r = this;
        function i(x) {
            t.writable && t.write(x) === !1 && r.pause && r.pause();
        }
        r.on("data", i);
        function n() {
            r.readable && r.resume && r.resume();
        }
        t.on("drain", n), !t._isStdio && (!e || e.end !== !1) && (r.on("end", o), r.on("close", u));
        var f = !1;
        function o() {
            f || (f = !0, t.end());
        }
        function u() {
            f || (f = !0, typeof t.destroy == "function" && t.destroy());
        }
        function v(x) {
            if (_(), W0.listenerCount(this, "error") === 0) throw x;
        }
        r.on("error", v), t.on("error", v);
        function _() {
            r.removeListener("data", i), t.removeListener("drain", n), r.removeListener("end", o), r.removeListener("close", u), r.removeListener("error", v), t.removeListener("error", v), r.removeListener("end", _), r.removeListener("close", _), t.removeListener("close", _);
        }
        return r.on("end", _), r.on("close", _), t.on("close", _), t.emit("pipe", r), t;
    };
});
var fr = q((j9, Hc)=>{
    var Uc = we().Buffer, zc = Fc().Transform, A6 = Cf().StringDecoder, B6 = xe();
    function kt(t) {
        zc.call(this), this.hashMode = typeof t == "string", this.hashMode ? this[t] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
    }
    B6(kt, zc);
    kt.prototype.update = function(t, e, r) {
        typeof t == "string" && (t = Uc.from(t, e));
        var i = this._update(t);
        return this.hashMode ? this : (r && (i = this._toString(i, r)), i);
    };
    kt.prototype.setAutoPadding = function() {};
    kt.prototype.getAuthTag = function() {
        throw new Error("trying to get auth tag in unsupported state");
    };
    kt.prototype.setAuthTag = function() {
        throw new Error("trying to set auth tag in unsupported state");
    };
    kt.prototype.setAAD = function() {
        throw new Error("trying to set aad in unsupported state");
    };
    kt.prototype._transform = function(t, e, r) {
        var i;
        try {
            this.hashMode ? this._update(t) : this.push(this._update(t));
        } catch (n) {
            i = n;
        } finally{
            r(i);
        }
    };
    kt.prototype._flush = function(t) {
        var e;
        try {
            this.push(this.__final());
        } catch (r) {
            e = r;
        }
        t(e);
    };
    kt.prototype._finalOrDigest = function(t) {
        var e = this.__final() || Uc.alloc(0);
        return t && (e = this._toString(e, t, !0)), e;
    };
    kt.prototype._toString = function(t, e, r) {
        if (this._decoder || (this._decoder = new A6(e), this._encoding = e), this._encoding !== e) throw new Error("can't switch encodings");
        var i = this._decoder.write(t);
        return r && (i += this._decoder.end()), i;
    };
    Hc.exports = kt;
});
var Pi = q((K9, Kc)=>{
    "use strict";
    var q6 = xe(), R6 = Kf(), I6 = Vf(), k6 = Yf(), jc = fr();
    function Jf(t) {
        jc.call(this, "digest"), this._hash = t;
    }
    q6(Jf, jc);
    Jf.prototype._update = function(t) {
        this._hash.update(t);
    };
    Jf.prototype._final = function() {
        return this._hash.digest();
    };
    Kc.exports = function(e) {
        return e = e.toLowerCase(), e === "md5" ? new R6 : e === "rmd160" || e === "ripemd160" ? new I6 : new Jf(k6(e));
    };
});
var Gc = q((W9, Vc)=>{
    "use strict";
    var C6 = xe(), ni = we().Buffer, Wc = fr(), T6 = ni.alloc(128), Di = 64;
    function $f(t, e) {
        Wc.call(this, "digest"), typeof e == "string" && (e = ni.from(e)), this._alg = t, this._key = e, e.length > Di ? e = t(e) : e.length < Di && (e = ni.concat([
            e,
            T6
        ], Di));
        for(var r = this._ipad = ni.allocUnsafe(Di), i = this._opad = ni.allocUnsafe(Di), n = 0; n < Di; n++)r[n] = e[n] ^ 54, i[n] = e[n] ^ 92;
        this._hash = [
            r
        ];
    }
    C6($f, Wc);
    $f.prototype._update = function(t) {
        this._hash.push(t);
    };
    $f.prototype._final = function() {
        var t = this._alg(ni.concat(this._hash));
        return this._alg(ni.concat([
            this._opad,
            t
        ]));
    };
    Vc.exports = $f;
});
var V0 = q((V9, Zc)=>{
    var P6 = Kf();
    Zc.exports = function(t) {
        return new P6().update(t).digest();
    };
});
var X0 = q((G9, Yc)=>{
    "use strict";
    var D6 = xe(), L6 = Gc(), Xc = fr(), Wn = we().Buffer, N6 = V0(), G0 = Vf(), Z0 = Yf(), O6 = Wn.alloc(128);
    function Vn(t, e) {
        Xc.call(this, "digest"), typeof e == "string" && (e = Wn.from(e));
        var r = t === "sha512" || t === "sha384" ? 128 : 64;
        if (this._alg = t, this._key = e, e.length > r) {
            var i = t === "rmd160" ? new G0 : Z0(t);
            e = i.update(e).digest();
        } else e.length < r && (e = Wn.concat([
            e,
            O6
        ], r));
        for(var n = this._ipad = Wn.allocUnsafe(r), f = this._opad = Wn.allocUnsafe(r), o = 0; o < r; o++)n[o] = e[o] ^ 54, f[o] = e[o] ^ 92;
        this._hash = t === "rmd160" ? new G0 : Z0(t), this._hash.update(n);
    }
    D6(Vn, Xc);
    Vn.prototype._update = function(t) {
        this._hash.update(t);
    };
    Vn.prototype._final = function() {
        var t = this._hash.digest(), e = this._alg === "rmd160" ? new G0 : Z0(this._alg);
        return e.update(this._opad).update(t).digest();
    };
    Yc.exports = function(e, r) {
        return e = e.toLowerCase(), e === "rmd160" || e === "ripemd160" ? new Vn("rmd160", r) : e === "md5" ? new L6(N6, r) : new Vn(e, r);
    };
});
var Y0 = q((Z9, F6)=>{
    F6.exports = {
        sha224WithRSAEncryption: {
            sign: "rsa",
            hash: "sha224",
            id: "302d300d06096086480165030402040500041c"
        },
        "RSA-SHA224": {
            sign: "ecdsa/rsa",
            hash: "sha224",
            id: "302d300d06096086480165030402040500041c"
        },
        sha256WithRSAEncryption: {
            sign: "rsa",
            hash: "sha256",
            id: "3031300d060960864801650304020105000420"
        },
        "RSA-SHA256": {
            sign: "ecdsa/rsa",
            hash: "sha256",
            id: "3031300d060960864801650304020105000420"
        },
        sha384WithRSAEncryption: {
            sign: "rsa",
            hash: "sha384",
            id: "3041300d060960864801650304020205000430"
        },
        "RSA-SHA384": {
            sign: "ecdsa/rsa",
            hash: "sha384",
            id: "3041300d060960864801650304020205000430"
        },
        sha512WithRSAEncryption: {
            sign: "rsa",
            hash: "sha512",
            id: "3051300d060960864801650304020305000440"
        },
        "RSA-SHA512": {
            sign: "ecdsa/rsa",
            hash: "sha512",
            id: "3051300d060960864801650304020305000440"
        },
        "RSA-SHA1": {
            sign: "rsa",
            hash: "sha1",
            id: "3021300906052b0e03021a05000414"
        },
        "ecdsa-with-SHA1": {
            sign: "ecdsa",
            hash: "sha1",
            id: ""
        },
        sha256: {
            sign: "ecdsa",
            hash: "sha256",
            id: ""
        },
        sha224: {
            sign: "ecdsa",
            hash: "sha224",
            id: ""
        },
        sha384: {
            sign: "ecdsa",
            hash: "sha384",
            id: ""
        },
        sha512: {
            sign: "ecdsa",
            hash: "sha512",
            id: ""
        },
        "DSA-SHA": {
            sign: "dsa",
            hash: "sha1",
            id: ""
        },
        "DSA-SHA1": {
            sign: "dsa",
            hash: "sha1",
            id: ""
        },
        DSA: {
            sign: "dsa",
            hash: "sha1",
            id: ""
        },
        "DSA-WITH-SHA224": {
            sign: "dsa",
            hash: "sha224",
            id: ""
        },
        "DSA-SHA224": {
            sign: "dsa",
            hash: "sha224",
            id: ""
        },
        "DSA-WITH-SHA256": {
            sign: "dsa",
            hash: "sha256",
            id: ""
        },
        "DSA-SHA256": {
            sign: "dsa",
            hash: "sha256",
            id: ""
        },
        "DSA-WITH-SHA384": {
            sign: "dsa",
            hash: "sha384",
            id: ""
        },
        "DSA-SHA384": {
            sign: "dsa",
            hash: "sha384",
            id: ""
        },
        "DSA-WITH-SHA512": {
            sign: "dsa",
            hash: "sha512",
            id: ""
        },
        "DSA-SHA512": {
            sign: "dsa",
            hash: "sha512",
            id: ""
        },
        "DSA-RIPEMD160": {
            sign: "dsa",
            hash: "rmd160",
            id: ""
        },
        ripemd160WithRSA: {
            sign: "rsa",
            hash: "rmd160",
            id: "3021300906052b2403020105000414"
        },
        "RSA-RIPEMD160": {
            sign: "rsa",
            hash: "rmd160",
            id: "3021300906052b2403020105000414"
        },
        md5WithRSAEncryption: {
            sign: "rsa",
            hash: "md5",
            id: "3020300c06082a864886f70d020505000410"
        },
        "RSA-MD5": {
            sign: "rsa",
            hash: "md5",
            id: "3020300c06082a864886f70d020505000410"
        }
    };
});
var $c = q((X9, Jc)=>{
    Jc.exports = Y0();
});
var J0 = q((Y9, Qc)=>{
    var U6 = Math.pow(2, 30) - 1;
    Qc.exports = function(t, e) {
        if (typeof t != "number") throw new TypeError("Iterations not a number");
        if (t < 0) throw new TypeError("Bad iterations");
        if (typeof e != "number") throw new TypeError("Key length not a number");
        if (e < 0 || e > U6 || e !== e) throw new TypeError("Bad key length");
    };
});
var $0 = q((J9, tu)=>{
    var Qf;
    global.process && global.process.browser ? Qf = "utf-8" : global.process && global.process.version ? (eu = parseInt(process.version.split(".")[0].slice(1), 10), Qf = eu >= 6 ? "utf-8" : "binary") : Qf = "utf-8";
    var eu;
    tu.exports = Qf;
});
var eo = q(($9, ru)=>{
    var Q0 = we().Buffer;
    ru.exports = function(t, e, r) {
        if (Q0.isBuffer(t)) return t;
        if (typeof t == "string") return Q0.from(t, e);
        if (ArrayBuffer.isView(t)) return Q0.from(t.buffer);
        throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
    };
});
var to = q((Q9, au)=>{
    var z6 = V0(), H6 = Vf(), j6 = Yf(), fi = we().Buffer, K6 = J0(), iu = $0(), nu = eo(), W6 = fi.alloc(128), ea = {
        md5: 16,
        sha1: 20,
        sha224: 28,
        sha256: 32,
        sha384: 48,
        sha512: 64,
        rmd160: 20,
        ripemd160: 20
    };
    function fu(t, e, r) {
        var i = V6(t), n = t === "sha512" || t === "sha384" ? 128 : 64;
        e.length > n ? e = i(e) : e.length < n && (e = fi.concat([
            e,
            W6
        ], n));
        for(var f = fi.allocUnsafe(n + ea[t]), o = fi.allocUnsafe(n + ea[t]), u = 0; u < n; u++)f[u] = e[u] ^ 54, o[u] = e[u] ^ 92;
        var v = fi.allocUnsafe(n + r + 4);
        f.copy(v, 0, 0, n), this.ipad1 = v, this.ipad2 = f, this.opad = o, this.alg = t, this.blocksize = n, this.hash = i, this.size = ea[t];
    }
    fu.prototype.run = function(t, e) {
        t.copy(e, this.blocksize);
        var r = this.hash(e);
        return r.copy(this.opad, this.blocksize), this.hash(this.opad);
    };
    function V6(t) {
        function e(i) {
            return j6(t).update(i).digest();
        }
        function r(i) {
            return new H6().update(i).digest();
        }
        return t === "rmd160" || t === "ripemd160" ? r : t === "md5" ? z6 : e;
    }
    function G6(t, e, r, i, n) {
        K6(r, i), t = nu(t, iu, "Password"), e = nu(e, iu, "Salt"), n = n || "sha1";
        var f = new fu(n, t, e.length), o = fi.allocUnsafe(i), u = fi.allocUnsafe(e.length + 4);
        e.copy(u, 0, 0, e.length);
        for(var v = 0, _ = ea[n], x = Math.ceil(i / _), E = 1; E <= x; E++){
            u.writeUInt32BE(E, e.length);
            for(var A = f.run(u, f.ipad1), B = A, I = 1; I < r; I++){
                B = f.run(B, f.ipad2);
                for(var P = 0; P < _; P++)A[P] ^= B[P];
            }
            A.copy(o, v), v += _;
        }
        return o;
    }
    au.exports = G6;
});
var lu = q((ey, du)=>{
    var cu = we().Buffer, Z6 = J0(), ou = $0(), su = to(), hu = eo(), ta, Gn = global.crypto && global.crypto.subtle, X6 = {
        sha: "SHA-1",
        "sha-1": "SHA-1",
        sha1: "SHA-1",
        sha256: "SHA-256",
        "sha-256": "SHA-256",
        sha384: "SHA-384",
        "sha-384": "SHA-384",
        "sha-512": "SHA-512",
        sha512: "SHA-512"
    }, ro = [];
    function Y6(t) {
        if (global.process && !global.process.browser || !Gn || !Gn.importKey || !Gn.deriveBits) return Promise.resolve(!1);
        if (ro[t] !== void 0) return ro[t];
        ta = ta || cu.alloc(8);
        var e = uu(ta, ta, 10, 128, t).then(function() {
            return !0;
        }).catch(function() {
            return !1;
        });
        return ro[t] = e, e;
    }
    var ai;
    function io() {
        return ai || (global.process && global.process.nextTick ? ai = global.process.nextTick : global.queueMicrotask ? ai = global.queueMicrotask : global.setImmediate ? ai = global.setImmediate : ai = global.setTimeout, ai);
    }
    function uu(t, e, r, i, n) {
        return Gn.importKey("raw", t, {
            name: "PBKDF2"
        }, !1, [
            "deriveBits"
        ]).then(function(f) {
            return Gn.deriveBits({
                name: "PBKDF2",
                salt: e,
                iterations: r,
                hash: {
                    name: n
                }
            }, f, i << 3);
        }).then(function(f) {
            return cu.from(f);
        });
    }
    function J6(t, e) {
        t.then(function(r) {
            io()(function() {
                e(null, r);
            });
        }, function(r) {
            io()(function() {
                e(r);
            });
        });
    }
    du.exports = function(t, e, r, i, n, f) {
        typeof n == "function" && (f = n, n = void 0), n = n || "sha1";
        var o = X6[n.toLowerCase()];
        if (!o || typeof global.Promise != "function") {
            io()(function() {
                var u;
                try {
                    u = su(t, e, r, i, n);
                } catch (v) {
                    return f(v);
                }
                f(null, u);
            });
            return;
        }
        if (Z6(r, i), t = hu(t, ou, "Password"), e = hu(e, ou, "Salt"), typeof f != "function") throw new Error("No callback provided to pbkdf2");
        J6(Y6(o).then(function(u) {
            return u ? uu(t, e, r, i, o) : su(t, e, r, i, n);
        }), f);
    };
});
var fo = q((no)=>{
    no.pbkdf2 = lu();
    no.pbkdf2Sync = to();
});
var ao = q((mt)=>{
    "use strict";
    mt.readUInt32BE = function(e, r) {
        var i = e[0 + r] << 24 | e[1 + r] << 16 | e[2 + r] << 8 | e[3 + r];
        return i >>> 0;
    };
    mt.writeUInt32BE = function(e, r, i) {
        e[0 + i] = r >>> 24, e[1 + i] = r >>> 16 & 255, e[2 + i] = r >>> 8 & 255, e[3 + i] = r & 255;
    };
    mt.ip = function(e, r, i, n) {
        for(var f = 0, o = 0, u = 6; u >= 0; u -= 2){
            for(var v = 0; v <= 24; v += 8)f <<= 1, f |= r >>> v + u & 1;
            for(var v = 0; v <= 24; v += 8)f <<= 1, f |= e >>> v + u & 1;
        }
        for(var u = 6; u >= 0; u -= 2){
            for(var v = 1; v <= 25; v += 8)o <<= 1, o |= r >>> v + u & 1;
            for(var v = 1; v <= 25; v += 8)o <<= 1, o |= e >>> v + u & 1;
        }
        i[n + 0] = f >>> 0, i[n + 1] = o >>> 0;
    };
    mt.rip = function(e, r, i, n) {
        for(var f = 0, o = 0, u = 0; u < 4; u++)for(var v = 24; v >= 0; v -= 8)f <<= 1, f |= r >>> v + u & 1, f <<= 1, f |= e >>> v + u & 1;
        for(var u = 4; u < 8; u++)for(var v = 24; v >= 0; v -= 8)o <<= 1, o |= r >>> v + u & 1, o <<= 1, o |= e >>> v + u & 1;
        i[n + 0] = f >>> 0, i[n + 1] = o >>> 0;
    };
    mt.pc1 = function(e, r, i, n) {
        for(var f = 0, o = 0, u = 7; u >= 5; u--){
            for(var v = 0; v <= 24; v += 8)f <<= 1, f |= r >> v + u & 1;
            for(var v = 0; v <= 24; v += 8)f <<= 1, f |= e >> v + u & 1;
        }
        for(var v = 0; v <= 24; v += 8)f <<= 1, f |= r >> v + u & 1;
        for(var u = 1; u <= 3; u++){
            for(var v = 0; v <= 24; v += 8)o <<= 1, o |= r >> v + u & 1;
            for(var v = 0; v <= 24; v += 8)o <<= 1, o |= e >> v + u & 1;
        }
        for(var v = 0; v <= 24; v += 8)o <<= 1, o |= e >> v + u & 1;
        i[n + 0] = f >>> 0, i[n + 1] = o >>> 0;
    };
    mt.r28shl = function(e, r) {
        return e << r & 268435455 | e >>> 28 - r;
    };
    var ra = [
        14,
        11,
        17,
        4,
        27,
        23,
        25,
        0,
        13,
        22,
        7,
        18,
        5,
        9,
        16,
        24,
        2,
        20,
        12,
        21,
        1,
        8,
        15,
        26,
        15,
        4,
        25,
        19,
        9,
        1,
        26,
        16,
        5,
        11,
        23,
        8,
        12,
        7,
        17,
        0,
        22,
        3,
        10,
        14,
        6,
        20,
        27,
        24
    ];
    mt.pc2 = function(e, r, i, n) {
        for(var f = 0, o = 0, u = ra.length >>> 1, v = 0; v < u; v++)f <<= 1, f |= e >>> ra[v] & 1;
        for(var v = u; v < ra.length; v++)o <<= 1, o |= r >>> ra[v] & 1;
        i[n + 0] = f >>> 0, i[n + 1] = o >>> 0;
    };
    mt.expand = function(e, r, i) {
        var n = 0, f = 0;
        n = (e & 1) << 5 | e >>> 27;
        for(var o = 23; o >= 15; o -= 4)n <<= 6, n |= e >>> o & 63;
        for(var o = 11; o >= 3; o -= 4)f |= e >>> o & 63, f <<= 6;
        f |= (e & 31) << 1 | e >>> 31, r[i + 0] = n >>> 0, r[i + 1] = f >>> 0;
    };
    var pu = [
        14,
        0,
        4,
        15,
        13,
        7,
        1,
        4,
        2,
        14,
        15,
        2,
        11,
        13,
        8,
        1,
        3,
        10,
        10,
        6,
        6,
        12,
        12,
        11,
        5,
        9,
        9,
        5,
        0,
        3,
        7,
        8,
        4,
        15,
        1,
        12,
        14,
        8,
        8,
        2,
        13,
        4,
        6,
        9,
        2,
        1,
        11,
        7,
        15,
        5,
        12,
        11,
        9,
        3,
        7,
        14,
        3,
        10,
        10,
        0,
        5,
        6,
        0,
        13,
        15,
        3,
        1,
        13,
        8,
        4,
        14,
        7,
        6,
        15,
        11,
        2,
        3,
        8,
        4,
        14,
        9,
        12,
        7,
        0,
        2,
        1,
        13,
        10,
        12,
        6,
        0,
        9,
        5,
        11,
        10,
        5,
        0,
        13,
        14,
        8,
        7,
        10,
        11,
        1,
        10,
        3,
        4,
        15,
        13,
        4,
        1,
        2,
        5,
        11,
        8,
        6,
        12,
        7,
        6,
        12,
        9,
        0,
        3,
        5,
        2,
        14,
        15,
        9,
        10,
        13,
        0,
        7,
        9,
        0,
        14,
        9,
        6,
        3,
        3,
        4,
        15,
        6,
        5,
        10,
        1,
        2,
        13,
        8,
        12,
        5,
        7,
        14,
        11,
        12,
        4,
        11,
        2,
        15,
        8,
        1,
        13,
        1,
        6,
        10,
        4,
        13,
        9,
        0,
        8,
        6,
        15,
        9,
        3,
        8,
        0,
        7,
        11,
        4,
        1,
        15,
        2,
        14,
        12,
        3,
        5,
        11,
        10,
        5,
        14,
        2,
        7,
        12,
        7,
        13,
        13,
        8,
        14,
        11,
        3,
        5,
        0,
        6,
        6,
        15,
        9,
        0,
        10,
        3,
        1,
        4,
        2,
        7,
        8,
        2,
        5,
        12,
        11,
        1,
        12,
        10,
        4,
        14,
        15,
        9,
        10,
        3,
        6,
        15,
        9,
        0,
        0,
        6,
        12,
        10,
        11,
        1,
        7,
        13,
        13,
        8,
        15,
        9,
        1,
        4,
        3,
        5,
        14,
        11,
        5,
        12,
        2,
        7,
        8,
        2,
        4,
        14,
        2,
        14,
        12,
        11,
        4,
        2,
        1,
        12,
        7,
        4,
        10,
        7,
        11,
        13,
        6,
        1,
        8,
        5,
        5,
        0,
        3,
        15,
        15,
        10,
        13,
        3,
        0,
        9,
        14,
        8,
        9,
        6,
        4,
        11,
        2,
        8,
        1,
        12,
        11,
        7,
        10,
        1,
        13,
        14,
        7,
        2,
        8,
        13,
        15,
        6,
        9,
        15,
        12,
        0,
        5,
        9,
        6,
        10,
        3,
        4,
        0,
        5,
        14,
        3,
        12,
        10,
        1,
        15,
        10,
        4,
        15,
        2,
        9,
        7,
        2,
        12,
        6,
        9,
        8,
        5,
        0,
        6,
        13,
        1,
        3,
        13,
        4,
        14,
        14,
        0,
        7,
        11,
        5,
        3,
        11,
        8,
        9,
        4,
        14,
        3,
        15,
        2,
        5,
        12,
        2,
        9,
        8,
        5,
        12,
        15,
        3,
        10,
        7,
        11,
        0,
        14,
        4,
        1,
        10,
        7,
        1,
        6,
        13,
        0,
        11,
        8,
        6,
        13,
        4,
        13,
        11,
        0,
        2,
        11,
        14,
        7,
        15,
        4,
        0,
        9,
        8,
        1,
        13,
        10,
        3,
        14,
        12,
        3,
        9,
        5,
        7,
        12,
        5,
        2,
        10,
        15,
        6,
        8,
        1,
        6,
        1,
        6,
        4,
        11,
        11,
        13,
        13,
        8,
        12,
        1,
        3,
        4,
        7,
        10,
        14,
        7,
        10,
        9,
        15,
        5,
        6,
        0,
        8,
        15,
        0,
        14,
        5,
        2,
        9,
        3,
        2,
        12,
        13,
        1,
        2,
        15,
        8,
        13,
        4,
        8,
        6,
        10,
        15,
        3,
        11,
        7,
        1,
        4,
        10,
        12,
        9,
        5,
        3,
        6,
        14,
        11,
        5,
        0,
        0,
        14,
        12,
        9,
        7,
        2,
        7,
        2,
        11,
        1,
        4,
        14,
        1,
        7,
        9,
        4,
        12,
        10,
        14,
        8,
        2,
        13,
        0,
        15,
        6,
        12,
        10,
        9,
        13,
        0,
        15,
        3,
        3,
        5,
        5,
        6,
        8,
        11
    ];
    mt.substitute = function(e, r) {
        for(var i = 0, n = 0; n < 4; n++){
            var f = e >>> 18 - n * 6 & 63, o = pu[n * 64 + f];
            i <<= 4, i |= o;
        }
        for(var n = 0; n < 4; n++){
            var f = r >>> 18 - n * 6 & 63, o = pu[256 + n * 64 + f];
            i <<= 4, i |= o;
        }
        return i >>> 0;
    };
    var bu = [
        16,
        25,
        12,
        11,
        3,
        20,
        4,
        15,
        31,
        17,
        9,
        6,
        27,
        14,
        1,
        22,
        30,
        24,
        8,
        18,
        0,
        5,
        29,
        23,
        13,
        19,
        2,
        26,
        10,
        21,
        28,
        7
    ];
    mt.permute = function(e) {
        for(var r = 0, i = 0; i < bu.length; i++)r <<= 1, r |= e >>> bu[i] & 1;
        return r >>> 0;
    };
    mt.padSplit = function(e, r, i) {
        for(var n = e.toString(2); n.length < r;)n = "0" + n;
        for(var f = [], o = 0; o < r; o += i)f.push(n.slice(o, o + i));
        return f.join(" ");
    };
});
var ct = q((iy, yu)=>{
    yu.exports = vu;
    function vu(t, e) {
        if (!t) throw new Error(e || "Assertion failed");
    }
    vu.equal = function(e, r, i) {
        if (e != r) throw new Error(i || "Assertion failed: " + e + " != " + r);
    };
});
var ia = q((ny, mu)=>{
    "use strict";
    var $6 = ct();
    function gt(t) {
        this.options = t, this.type = this.options.type, this.blockSize = 8, this._init(), this.buffer = new Array(this.blockSize), this.bufferOff = 0;
    }
    mu.exports = gt;
    gt.prototype._init = function() {};
    gt.prototype.update = function(e) {
        return e.length === 0 ? [] : this.type === "decrypt" ? this._updateDecrypt(e) : this._updateEncrypt(e);
    };
    gt.prototype._buffer = function(e, r) {
        for(var i = Math.min(this.buffer.length - this.bufferOff, e.length - r), n = 0; n < i; n++)this.buffer[this.bufferOff + n] = e[r + n];
        return this.bufferOff += i, i;
    };
    gt.prototype._flushBuffer = function(e, r) {
        return this._update(this.buffer, 0, e, r), this.bufferOff = 0, this.blockSize;
    };
    gt.prototype._updateEncrypt = function(e) {
        var r = 0, i = 0, n = (this.bufferOff + e.length) / this.blockSize | 0, f = new Array(n * this.blockSize);
        this.bufferOff !== 0 && (r += this._buffer(e, r), this.bufferOff === this.buffer.length && (i += this._flushBuffer(f, i)));
        for(var o = e.length - (e.length - r) % this.blockSize; r < o; r += this.blockSize)this._update(e, r, f, i), i += this.blockSize;
        for(; r < e.length; r++, this.bufferOff++)this.buffer[this.bufferOff] = e[r];
        return f;
    };
    gt.prototype._updateDecrypt = function(e) {
        for(var r = 0, i = 0, n = Math.ceil((this.bufferOff + e.length) / this.blockSize) - 1, f = new Array(n * this.blockSize); n > 0; n--)r += this._buffer(e, r), i += this._flushBuffer(f, i);
        return r += this._buffer(e, r), f;
    };
    gt.prototype.final = function(e) {
        var r;
        e && (r = this.update(e));
        var i;
        return this.type === "encrypt" ? i = this._finalEncrypt() : i = this._finalDecrypt(), r ? r.concat(i) : i;
    };
    gt.prototype._pad = function(e, r) {
        if (r === 0) return !1;
        for(; r < e.length;)e[r++] = 0;
        return !0;
    };
    gt.prototype._finalEncrypt = function() {
        if (!this._pad(this.buffer, this.bufferOff)) return [];
        var e = new Array(this.blockSize);
        return this._update(this.buffer, 0, e, 0), e;
    };
    gt.prototype._unpad = function(e) {
        return e;
    };
    gt.prototype._finalDecrypt = function() {
        $6.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
        var e = new Array(this.blockSize);
        return this._flushBuffer(e, 0), this._unpad(e);
    };
});
var oo = q((fy, wu)=>{
    "use strict";
    var gu = ct(), Q6 = xe(), He = ao(), _u = ia();
    function e3() {
        this.tmp = new Array(2), this.keys = null;
    }
    function Gt(t) {
        _u.call(this, t);
        var e = new e3;
        this._desState = e, this.deriveKeys(e, t.key);
    }
    Q6(Gt, _u);
    wu.exports = Gt;
    Gt.create = function(e) {
        return new Gt(e);
    };
    var t3 = [
        1,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        1
    ];
    Gt.prototype.deriveKeys = function(e, r) {
        e.keys = new Array(32), gu.equal(r.length, this.blockSize, "Invalid key length");
        var i = He.readUInt32BE(r, 0), n = He.readUInt32BE(r, 4);
        He.pc1(i, n, e.tmp, 0), i = e.tmp[0], n = e.tmp[1];
        for(var f = 0; f < e.keys.length; f += 2){
            var o = t3[f >>> 1];
            i = He.r28shl(i, o), n = He.r28shl(n, o), He.pc2(i, n, e.keys, f);
        }
    };
    Gt.prototype._update = function(e, r, i, n) {
        var f = this._desState, o = He.readUInt32BE(e, r), u = He.readUInt32BE(e, r + 4);
        He.ip(o, u, f.tmp, 0), o = f.tmp[0], u = f.tmp[1], this.type === "encrypt" ? this._encrypt(f, o, u, f.tmp, 0) : this._decrypt(f, o, u, f.tmp, 0), o = f.tmp[0], u = f.tmp[1], He.writeUInt32BE(i, o, n), He.writeUInt32BE(i, u, n + 4);
    };
    Gt.prototype._pad = function(e, r) {
        for(var i = e.length - r, n = r; n < e.length; n++)e[n] = i;
        return !0;
    };
    Gt.prototype._unpad = function(e) {
        for(var r = e[e.length - 1], i = e.length - r; i < e.length; i++)gu.equal(e[i], r);
        return e.slice(0, e.length - r);
    };
    Gt.prototype._encrypt = function(e, r, i, n, f) {
        for(var o = r, u = i, v = 0; v < e.keys.length; v += 2){
            var _ = e.keys[v], x = e.keys[v + 1];
            He.expand(u, e.tmp, 0), _ ^= e.tmp[0], x ^= e.tmp[1];
            var E = He.substitute(_, x), A = He.permute(E), B = u;
            u = (o ^ A) >>> 0, o = B;
        }
        He.rip(u, o, n, f);
    };
    Gt.prototype._decrypt = function(e, r, i, n, f) {
        for(var o = i, u = r, v = e.keys.length - 2; v >= 0; v -= 2){
            var _ = e.keys[v], x = e.keys[v + 1];
            He.expand(o, e.tmp, 0), _ ^= e.tmp[0], x ^= e.tmp[1];
            var E = He.substitute(_, x), A = He.permute(E), B = o;
            o = (u ^ A) >>> 0, u = B;
        }
        He.rip(o, u, n, f);
    };
});
var Mu = q((xu)=>{
    "use strict";
    var r3 = ct(), i3 = xe(), na = {};
    function n3(t) {
        r3.equal(t.length, 8, "Invalid IV length"), this.iv = new Array(8);
        for(var e = 0; e < this.iv.length; e++)this.iv[e] = t[e];
    }
    function f3(t) {
        function e(f) {
            t.call(this, f), this._cbcInit();
        }
        i3(e, t);
        for(var r = Object.keys(na), i = 0; i < r.length; i++){
            var n = r[i];
            e.prototype[n] = na[n];
        }
        return e.create = function(o) {
            return new e(o);
        }, e;
    }
    xu.instantiate = f3;
    na._cbcInit = function() {
        var e = new n3(this.options.iv);
        this._cbcState = e;
    };
    na._update = function(e, r, i, n) {
        var f = this._cbcState, o = this.constructor.super_.prototype, u = f.iv;
        if (this.type === "encrypt") {
            for(var v = 0; v < this.blockSize; v++)u[v] ^= e[r + v];
            o._update.call(this, u, 0, i, n);
            for(var v = 0; v < this.blockSize; v++)u[v] = i[n + v];
        } else {
            o._update.call(this, e, r, i, n);
            for(var v = 0; v < this.blockSize; v++)i[n + v] ^= u[v];
            for(var v = 0; v < this.blockSize; v++)u[v] = e[r + v];
        }
    };
});
var Au = q((oy, Su)=>{
    "use strict";
    var a3 = ct(), o3 = xe(), Eu = ia(), Mr = oo();
    function s3(t, e) {
        a3.equal(e.length, 24, "Invalid key length");
        var r = e.slice(0, 8), i = e.slice(8, 16), n = e.slice(16, 24);
        t === "encrypt" ? this.ciphers = [
            Mr.create({
                type: "encrypt",
                key: r
            }),
            Mr.create({
                type: "decrypt",
                key: i
            }),
            Mr.create({
                type: "encrypt",
                key: n
            })
        ] : this.ciphers = [
            Mr.create({
                type: "decrypt",
                key: n
            }),
            Mr.create({
                type: "encrypt",
                key: i
            }),
            Mr.create({
                type: "decrypt",
                key: r
            })
        ];
    }
    function oi(t) {
        Eu.call(this, t);
        var e = new s3(this.type, this.options.key);
        this._edeState = e;
    }
    o3(oi, Eu);
    Su.exports = oi;
    oi.create = function(e) {
        return new oi(e);
    };
    oi.prototype._update = function(e, r, i, n) {
        var f = this._edeState;
        f.ciphers[0]._update(e, r, i, n), f.ciphers[1]._update(i, n, i, n), f.ciphers[2]._update(i, n, i, n);
    };
    oi.prototype._pad = Mr.prototype._pad;
    oi.prototype._unpad = Mr.prototype._unpad;
});
var Bu = q((Li)=>{
    "use strict";
    Li.utils = ao();
    Li.Cipher = ia();
    Li.DES = oo();
    Li.CBC = Mu();
    Li.EDE = Au();
});
var Iu = q((hy, Ru)=>{
    var qu = fr(), ar = Bu(), h3 = xe(), si = we().Buffer, Zn = {
        "des-ede3-cbc": ar.CBC.instantiate(ar.EDE),
        "des-ede3": ar.EDE,
        "des-ede-cbc": ar.CBC.instantiate(ar.EDE),
        "des-ede": ar.EDE,
        "des-cbc": ar.CBC.instantiate(ar.DES),
        "des-ecb": ar.DES
    };
    Zn.des = Zn["des-cbc"];
    Zn.des3 = Zn["des-ede3-cbc"];
    Ru.exports = fa;
    h3(fa, qu);
    function fa(t) {
        qu.call(this);
        var e = t.mode.toLowerCase(), r = Zn[e], i;
        t.decrypt ? i = "decrypt" : i = "encrypt";
        var n = t.key;
        si.isBuffer(n) || (n = si.from(n)), (e === "des-ede" || e === "des-ede-cbc") && (n = si.concat([
            n,
            n.slice(0, 8)
        ]));
        var f = t.iv;
        si.isBuffer(f) || (f = si.from(f)), this._des = r.create({
            key: n,
            iv: f,
            type: i
        });
    }
    fa.prototype._update = function(t) {
        return si.from(this._des.update(t));
    };
    fa.prototype._final = function() {
        return si.from(this._des.final());
    };
});
var ku = q((so)=>{
    so.encrypt = function(t, e) {
        return t._cipher.encryptBlock(e);
    };
    so.decrypt = function(t, e) {
        return t._cipher.decryptBlock(e);
    };
});
var Ni = q((uy, Cu)=>{
    Cu.exports = function(e, r) {
        for(var i = Math.min(e.length, r.length), n = new Buffer(i), f = 0; f < i; ++f)n[f] = e[f] ^ r[f];
        return n;
    };
});
var Pu = q((ho)=>{
    var Tu = Ni();
    ho.encrypt = function(t, e) {
        var r = Tu(e, t._prev);
        return t._prev = t._cipher.encryptBlock(r), t._prev;
    };
    ho.decrypt = function(t, e) {
        var r = t._prev;
        t._prev = e;
        var i = t._cipher.decryptBlock(e);
        return Tu(i, r);
    };
});
var Nu = q((Lu)=>{
    var Xn = we().Buffer, c3 = Ni();
    function Du(t, e, r) {
        var i = e.length, n = c3(e, t._cache);
        return t._cache = t._cache.slice(i), t._prev = Xn.concat([
            t._prev,
            r ? e : n
        ]), n;
    }
    Lu.encrypt = function(t, e, r) {
        for(var i = Xn.allocUnsafe(0), n; e.length;)if (t._cache.length === 0 && (t._cache = t._cipher.encryptBlock(t._prev), t._prev = Xn.allocUnsafe(0)), t._cache.length <= e.length) n = t._cache.length, i = Xn.concat([
            i,
            Du(t, e.slice(0, n), r)
        ]), e = e.slice(n);
        else {
            i = Xn.concat([
                i,
                Du(t, e, r)
            ]);
            break;
        }
        return i;
    };
});
var Fu = q((Ou)=>{
    var co = we().Buffer;
    function u3(t, e, r) {
        var i = t._cipher.encryptBlock(t._prev), n = i[0] ^ e;
        return t._prev = co.concat([
            t._prev.slice(1),
            co.from([
                r ? e : n
            ])
        ]), n;
    }
    Ou.encrypt = function(t, e, r) {
        for(var i = e.length, n = co.allocUnsafe(i), f = -1; ++f < i;)n[f] = u3(t, e[f], r);
        return n;
    };
});
var zu = q((Uu)=>{
    var aa = we().Buffer;
    function d3(t, e, r) {
        for(var i, n = -1, f = 8, o = 0, u, v; ++n < f;)i = t._cipher.encryptBlock(t._prev), u = e & 1 << 7 - n ? 128 : 0, v = i[0] ^ u, o += (v & 128) >> n % 8, t._prev = l3(t._prev, r ? u : v);
        return o;
    }
    function l3(t, e) {
        var r = t.length, i = -1, n = aa.allocUnsafe(t.length);
        for(t = aa.concat([
            t,
            aa.from([
                e
            ])
        ]); ++i < r;)n[i] = t[i] << 1 | t[i + 1] >> 7;
        return n;
    }
    Uu.encrypt = function(t, e, r) {
        for(var i = e.length, n = aa.allocUnsafe(i), f = -1; ++f < i;)n[f] = d3(t, e[f], r);
        return n;
    };
});
var ju = q((Hu)=>{
    var p3 = Ni();
    function b3(t) {
        return t._prev = t._cipher.encryptBlock(t._prev), t._prev;
    }
    Hu.encrypt = function(t, e) {
        for(; t._cache.length < e.length;)t._cache = Buffer.concat([
            t._cache,
            b3(t)
        ]);
        var r = t._cache.slice(0, e.length);
        return t._cache = t._cache.slice(e.length), p3(e, r);
    };
});
var uo = q((yy, Ku)=>{
    function v3(t) {
        for(var e = t.length, r; e--;)if (r = t.readUInt8(e), r === 255) t.writeUInt8(0, e);
        else {
            r++, t.writeUInt8(r, e);
            break;
        }
    }
    Ku.exports = v3;
});
var po = q((Vu)=>{
    var y3 = Ni(), Wu = we().Buffer, m3 = uo();
    function g3(t) {
        var e = t._cipher.encryptBlockRaw(t._prev);
        return m3(t._prev), e;
    }
    var lo = 16;
    Vu.encrypt = function(t, e) {
        var r = Math.ceil(e.length / lo), i = t._cache.length;
        t._cache = Wu.concat([
            t._cache,
            Wu.allocUnsafe(r * lo)
        ]);
        for(var n = 0; n < r; n++){
            var f = g3(t), o = i + n * lo;
            t._cache.writeUInt32BE(f[0], o + 0), t._cache.writeUInt32BE(f[1], o + 4), t._cache.writeUInt32BE(f[2], o + 8), t._cache.writeUInt32BE(f[3], o + 12);
        }
        var u = t._cache.slice(0, e.length);
        return t._cache = t._cache.slice(e.length), y3(e, u);
    };
});
var bo = q((gy, _3)=>{
    _3.exports = {
        "aes-128-ecb": {
            cipher: "AES",
            key: 128,
            iv: 0,
            mode: "ECB",
            type: "block"
        },
        "aes-192-ecb": {
            cipher: "AES",
            key: 192,
            iv: 0,
            mode: "ECB",
            type: "block"
        },
        "aes-256-ecb": {
            cipher: "AES",
            key: 256,
            iv: 0,
            mode: "ECB",
            type: "block"
        },
        "aes-128-cbc": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        "aes-192-cbc": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        "aes-256-cbc": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        aes128: {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        aes192: {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        aes256: {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CBC",
            type: "block"
        },
        "aes-128-cfb": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CFB",
            type: "stream"
        },
        "aes-192-cfb": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CFB",
            type: "stream"
        },
        "aes-256-cfb": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CFB",
            type: "stream"
        },
        "aes-128-cfb8": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CFB8",
            type: "stream"
        },
        "aes-192-cfb8": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CFB8",
            type: "stream"
        },
        "aes-256-cfb8": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CFB8",
            type: "stream"
        },
        "aes-128-cfb1": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CFB1",
            type: "stream"
        },
        "aes-192-cfb1": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CFB1",
            type: "stream"
        },
        "aes-256-cfb1": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CFB1",
            type: "stream"
        },
        "aes-128-ofb": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "OFB",
            type: "stream"
        },
        "aes-192-ofb": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "OFB",
            type: "stream"
        },
        "aes-256-ofb": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "OFB",
            type: "stream"
        },
        "aes-128-ctr": {
            cipher: "AES",
            key: 128,
            iv: 16,
            mode: "CTR",
            type: "stream"
        },
        "aes-192-ctr": {
            cipher: "AES",
            key: 192,
            iv: 16,
            mode: "CTR",
            type: "stream"
        },
        "aes-256-ctr": {
            cipher: "AES",
            key: 256,
            iv: 16,
            mode: "CTR",
            type: "stream"
        },
        "aes-128-gcm": {
            cipher: "AES",
            key: 128,
            iv: 12,
            mode: "GCM",
            type: "auth"
        },
        "aes-192-gcm": {
            cipher: "AES",
            key: 192,
            iv: 12,
            mode: "GCM",
            type: "auth"
        },
        "aes-256-gcm": {
            cipher: "AES",
            key: 256,
            iv: 12,
            mode: "GCM",
            type: "auth"
        }
    };
});
var sa = q((_y, Gu)=>{
    var w3 = {
        ECB: ku(),
        CBC: Pu(),
        CFB: Nu(),
        CFB8: Fu(),
        CFB1: zu(),
        OFB: ju(),
        CTR: po(),
        GCM: po()
    }, oa = bo();
    for(vo in oa)oa[vo].module = w3[oa[vo].mode];
    var vo;
    Gu.exports = oa;
});
var Yn = q((wy, Xu)=>{
    var ha = we().Buffer;
    function mo(t) {
        ha.isBuffer(t) || (t = ha.from(t));
        for(var e = t.length / 4 | 0, r = new Array(e), i = 0; i < e; i++)r[i] = t.readUInt32BE(i * 4);
        return r;
    }
    function yo(t) {
        for(var e = 0; e < t.length; t++)t[e] = 0;
    }
    function Zu(t, e, r, i, n) {
        for(var f = r[0], o = r[1], u = r[2], v = r[3], _ = t[0] ^ e[0], x = t[1] ^ e[1], E = t[2] ^ e[2], A = t[3] ^ e[3], B, I, P, F, D = 4, z = 1; z < n; z++)B = f[_ >>> 24] ^ o[x >>> 16 & 255] ^ u[E >>> 8 & 255] ^ v[A & 255] ^ e[D++], I = f[x >>> 24] ^ o[E >>> 16 & 255] ^ u[A >>> 8 & 255] ^ v[_ & 255] ^ e[D++], P = f[E >>> 24] ^ o[A >>> 16 & 255] ^ u[_ >>> 8 & 255] ^ v[x & 255] ^ e[D++], F = f[A >>> 24] ^ o[_ >>> 16 & 255] ^ u[x >>> 8 & 255] ^ v[E & 255] ^ e[D++], _ = B, x = I, E = P, A = F;
        return B = (i[_ >>> 24] << 24 | i[x >>> 16 & 255] << 16 | i[E >>> 8 & 255] << 8 | i[A & 255]) ^ e[D++], I = (i[x >>> 24] << 24 | i[E >>> 16 & 255] << 16 | i[A >>> 8 & 255] << 8 | i[_ & 255]) ^ e[D++], P = (i[E >>> 24] << 24 | i[A >>> 16 & 255] << 16 | i[_ >>> 8 & 255] << 8 | i[x & 255]) ^ e[D++], F = (i[A >>> 24] << 24 | i[_ >>> 16 & 255] << 16 | i[x >>> 8 & 255] << 8 | i[E & 255]) ^ e[D++], B = B >>> 0, I = I >>> 0, P = P >>> 0, F = F >>> 0, [
            B,
            I,
            P,
            F
        ];
    }
    var x3 = [
        0,
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        27,
        54
    ], ze = function() {
        for(var t = new Array(256), e = 0; e < 256; e++)e < 128 ? t[e] = e << 1 : t[e] = e << 1 ^ 283;
        for(var r = [], i = [], n = [
            [],
            [],
            [],
            []
        ], f = [
            [],
            [],
            [],
            []
        ], o = 0, u = 0, v = 0; v < 256; ++v){
            var _ = u ^ u << 1 ^ u << 2 ^ u << 3 ^ u << 4;
            _ = _ >>> 8 ^ _ & 255 ^ 99, r[o] = _, i[_] = o;
            var x = t[o], E = t[x], A = t[E], B = t[_] * 257 ^ _ * 16843008;
            n[0][o] = B << 24 | B >>> 8, n[1][o] = B << 16 | B >>> 16, n[2][o] = B << 8 | B >>> 24, n[3][o] = B, B = A * 16843009 ^ E * 65537 ^ x * 257 ^ o * 16843008, f[0][_] = B << 24 | B >>> 8, f[1][_] = B << 16 | B >>> 16, f[2][_] = B << 8 | B >>> 24, f[3][_] = B, o === 0 ? o = u = 1 : (o = x ^ t[t[t[A ^ x]]], u ^= t[t[u]]);
        }
        return {
            SBOX: r,
            INV_SBOX: i,
            SUB_MIX: n,
            INV_SUB_MIX: f
        };
    }();
    function _t(t) {
        this._key = mo(t), this._reset();
    }
    _t.blockSize = 16;
    _t.keySize = 32;
    _t.prototype.blockSize = _t.blockSize;
    _t.prototype.keySize = _t.keySize;
    _t.prototype._reset = function() {
        for(var t = this._key, e = t.length, r = e + 6, i = (r + 1) * 4, n = [], f = 0; f < e; f++)n[f] = t[f];
        for(f = e; f < i; f++){
            var o = n[f - 1];
            f % e === 0 ? (o = o << 8 | o >>> 24, o = ze.SBOX[o >>> 24] << 24 | ze.SBOX[o >>> 16 & 255] << 16 | ze.SBOX[o >>> 8 & 255] << 8 | ze.SBOX[o & 255], o ^= x3[f / e | 0] << 24) : e > 6 && f % e === 4 && (o = ze.SBOX[o >>> 24] << 24 | ze.SBOX[o >>> 16 & 255] << 16 | ze.SBOX[o >>> 8 & 255] << 8 | ze.SBOX[o & 255]), n[f] = n[f - e] ^ o;
        }
        for(var u = [], v = 0; v < i; v++){
            var _ = i - v, x = n[_ - (v % 4 ? 0 : 4)];
            v < 4 || _ <= 4 ? u[v] = x : u[v] = ze.INV_SUB_MIX[0][ze.SBOX[x >>> 24]] ^ ze.INV_SUB_MIX[1][ze.SBOX[x >>> 16 & 255]] ^ ze.INV_SUB_MIX[2][ze.SBOX[x >>> 8 & 255]] ^ ze.INV_SUB_MIX[3][ze.SBOX[x & 255]];
        }
        this._nRounds = r, this._keySchedule = n, this._invKeySchedule = u;
    };
    _t.prototype.encryptBlockRaw = function(t) {
        return t = mo(t), Zu(t, this._keySchedule, ze.SUB_MIX, ze.SBOX, this._nRounds);
    };
    _t.prototype.encryptBlock = function(t) {
        var e = this.encryptBlockRaw(t), r = ha.allocUnsafe(16);
        return r.writeUInt32BE(e[0], 0), r.writeUInt32BE(e[1], 4), r.writeUInt32BE(e[2], 8), r.writeUInt32BE(e[3], 12), r;
    };
    _t.prototype.decryptBlock = function(t) {
        t = mo(t);
        var e = t[1];
        t[1] = t[3], t[3] = e;
        var r = Zu(t, this._invKeySchedule, ze.INV_SUB_MIX, ze.INV_SBOX, this._nRounds), i = ha.allocUnsafe(16);
        return i.writeUInt32BE(r[0], 0), i.writeUInt32BE(r[3], 4), i.writeUInt32BE(r[2], 8), i.writeUInt32BE(r[1], 12), i;
    };
    _t.prototype.scrub = function() {
        yo(this._keySchedule), yo(this._invKeySchedule), yo(this._key);
    };
    Xu.exports.AES = _t;
});
var $u = q((xy, Ju)=>{
    var Oi = we().Buffer, M3 = Oi.alloc(16, 0);
    function E3(t) {
        return [
            t.readUInt32BE(0),
            t.readUInt32BE(4),
            t.readUInt32BE(8),
            t.readUInt32BE(12)
        ];
    }
    function Yu(t) {
        var e = Oi.allocUnsafe(16);
        return e.writeUInt32BE(t[0] >>> 0, 0), e.writeUInt32BE(t[1] >>> 0, 4), e.writeUInt32BE(t[2] >>> 0, 8), e.writeUInt32BE(t[3] >>> 0, 12), e;
    }
    function Jn(t) {
        this.h = t, this.state = Oi.alloc(16, 0), this.cache = Oi.allocUnsafe(0);
    }
    Jn.prototype.ghash = function(t) {
        for(var e = -1; ++e < t.length;)this.state[e] ^= t[e];
        this._multiply();
    };
    Jn.prototype._multiply = function() {
        for(var t = E3(this.h), e = [
            0,
            0,
            0,
            0
        ], r, i, n, f = -1; ++f < 128;){
            for(i = (this.state[~~(f / 8)] & 1 << 7 - f % 8) !== 0, i && (e[0] ^= t[0], e[1] ^= t[1], e[2] ^= t[2], e[3] ^= t[3]), n = (t[3] & 1) !== 0, r = 3; r > 0; r--)t[r] = t[r] >>> 1 | (t[r - 1] & 1) << 31;
            t[0] = t[0] >>> 1, n && (t[0] = t[0] ^ -520093696);
        }
        this.state = Yu(e);
    };
    Jn.prototype.update = function(t) {
        this.cache = Oi.concat([
            this.cache,
            t
        ]);
        for(var e; this.cache.length >= 16;)e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), this.ghash(e);
    };
    Jn.prototype.final = function(t, e) {
        return this.cache.length && this.ghash(Oi.concat([
            this.cache,
            M3
        ], 16)), this.ghash(Yu([
            0,
            t,
            0,
            e
        ])), this.state;
    };
    Ju.exports = Jn;
});
var go = q((My, td)=>{
    var S3 = Yn(), at = we().Buffer, Qu = fr(), A3 = xe(), ed = $u(), B3 = Ni(), q3 = uo();
    function R3(t, e) {
        var r = 0;
        t.length !== e.length && r++;
        for(var i = Math.min(t.length, e.length), n = 0; n < i; ++n)r += t[n] ^ e[n];
        return r;
    }
    function I3(t, e, r) {
        if (e.length === 12) return t._finID = at.concat([
            e,
            at.from([
                0,
                0,
                0,
                1
            ])
        ]), at.concat([
            e,
            at.from([
                0,
                0,
                0,
                2
            ])
        ]);
        var i = new ed(r), n = e.length, f = n % 16;
        i.update(e), f && (f = 16 - f, i.update(at.alloc(f, 0))), i.update(at.alloc(8, 0));
        var o = n * 8, u = at.alloc(8);
        u.writeUIntBE(o, 0, 8), i.update(u), t._finID = i.state;
        var v = at.from(t._finID);
        return q3(v), v;
    }
    function hi(t, e, r, i) {
        Qu.call(this);
        var n = at.alloc(4, 0);
        this._cipher = new S3.AES(e);
        var f = this._cipher.encryptBlock(n);
        this._ghash = new ed(f), r = I3(this, r, f), this._prev = at.from(r), this._cache = at.allocUnsafe(0), this._secCache = at.allocUnsafe(0), this._decrypt = i, this._alen = 0, this._len = 0, this._mode = t, this._authTag = null, this._called = !1;
    }
    A3(hi, Qu);
    hi.prototype._update = function(t) {
        if (!this._called && this._alen) {
            var e = 16 - this._alen % 16;
            e < 16 && (e = at.alloc(e, 0), this._ghash.update(e));
        }
        this._called = !0;
        var r = this._mode.encrypt(this, t);
        return this._decrypt ? this._ghash.update(t) : this._ghash.update(r), this._len += t.length, r;
    };
    hi.prototype._final = function() {
        if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
        var t = B3(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
        if (this._decrypt && R3(t, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
        this._authTag = t, this._cipher.scrub();
    };
    hi.prototype.getAuthTag = function() {
        if (this._decrypt || !at.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
        return this._authTag;
    };
    hi.prototype.setAuthTag = function(e) {
        if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
        this._authTag = e;
    };
    hi.prototype.setAAD = function(e) {
        if (this._called) throw new Error("Attempting to set AAD in unsupported state");
        this._ghash.update(e), this._alen += e.length;
    };
    td.exports = hi;
});
var wo = q((Ey, id)=>{
    var k3 = Yn(), _o = we().Buffer, rd = fr(), C3 = xe();
    function ca(t, e, r, i) {
        rd.call(this), this._cipher = new k3.AES(e), this._prev = _o.from(r), this._cache = _o.allocUnsafe(0), this._secCache = _o.allocUnsafe(0), this._decrypt = i, this._mode = t;
    }
    C3(ca, rd);
    ca.prototype._update = function(t) {
        return this._mode.encrypt(this, t, this._decrypt);
    };
    ca.prototype._final = function() {
        this._cipher.scrub();
    };
    id.exports = ca;
});
var $n = q((Sy, nd)=>{
    var ci = we().Buffer, T3 = Kf();
    function P3(t, e, r, i) {
        if (ci.isBuffer(t) || (t = ci.from(t, "binary")), e && (ci.isBuffer(e) || (e = ci.from(e, "binary")), e.length !== 8)) throw new RangeError("salt should be Buffer with 8 byte length");
        for(var n = r / 8, f = ci.alloc(n), o = ci.alloc(i || 0), u = ci.alloc(0); n > 0 || i > 0;){
            var v = new T3;
            v.update(u), v.update(t), e && v.update(e), u = v.digest();
            var _ = 0;
            if (n > 0) {
                var x = f.length - n;
                _ = Math.min(n, u.length), u.copy(f, x, 0, _), n -= _;
            }
            if (_ < u.length && i > 0) {
                var E = o.length - i, A = Math.min(i, u.length - _);
                u.copy(o, E, _, _ + A), i -= A;
            }
        }
        return u.fill(0), {
            key: f,
            iv: o
        };
    }
    nd.exports = P3;
});
var sd = q((xo)=>{
    var fd = sa(), D3 = go(), or = we().Buffer, L3 = wo(), ad = fr(), N3 = Yn(), O3 = $n(), F3 = xe();
    function Qn(t, e, r) {
        ad.call(this), this._cache = new ua, this._cipher = new N3.AES(e), this._prev = or.from(r), this._mode = t, this._autopadding = !0;
    }
    F3(Qn, ad);
    Qn.prototype._update = function(t) {
        this._cache.add(t);
        for(var e, r, i = []; e = this._cache.get();)r = this._mode.encrypt(this, e), i.push(r);
        return or.concat(i);
    };
    var U3 = or.alloc(16, 16);
    Qn.prototype._final = function() {
        var t = this._cache.flush();
        if (this._autopadding) return t = this._mode.encrypt(this, t), this._cipher.scrub(), t;
        if (!t.equals(U3)) throw this._cipher.scrub(), new Error("data not multiple of block length");
    };
    Qn.prototype.setAutoPadding = function(t) {
        return this._autopadding = !!t, this;
    };
    function ua() {
        this.cache = or.allocUnsafe(0);
    }
    ua.prototype.add = function(t) {
        this.cache = or.concat([
            this.cache,
            t
        ]);
    };
    ua.prototype.get = function() {
        if (this.cache.length > 15) {
            var t = this.cache.slice(0, 16);
            return this.cache = this.cache.slice(16), t;
        }
        return null;
    };
    ua.prototype.flush = function() {
        for(var t = 16 - this.cache.length, e = or.allocUnsafe(t), r = -1; ++r < t;)e.writeUInt8(t, r);
        return or.concat([
            this.cache,
            e
        ]);
    };
    function od(t, e, r) {
        var i = fd[t.toLowerCase()];
        if (!i) throw new TypeError("invalid suite type");
        if (typeof e == "string" && (e = or.from(e)), e.length !== i.key / 8) throw new TypeError("invalid key length " + e.length);
        if (typeof r == "string" && (r = or.from(r)), i.mode !== "GCM" && r.length !== i.iv) throw new TypeError("invalid iv length " + r.length);
        return i.type === "stream" ? new L3(i.module, e, r) : i.type === "auth" ? new D3(i.module, e, r) : new Qn(i.module, e, r);
    }
    function z3(t, e) {
        var r = fd[t.toLowerCase()];
        if (!r) throw new TypeError("invalid suite type");
        var i = O3(e, !1, r.key, r.iv);
        return od(t, i.key, i.iv);
    }
    xo.createCipheriv = od;
    xo.createCipher = z3;
});
var dd = q((Mo)=>{
    var H3 = go(), Fi = we().Buffer, hd = sa(), j3 = wo(), cd = fr(), K3 = Yn(), W3 = $n(), V3 = xe();
    function ef(t, e, r) {
        cd.call(this), this._cache = new da, this._last = void 0, this._cipher = new K3.AES(e), this._prev = Fi.from(r), this._mode = t, this._autopadding = !0;
    }
    V3(ef, cd);
    ef.prototype._update = function(t) {
        this._cache.add(t);
        for(var e, r, i = []; e = this._cache.get(this._autopadding);)r = this._mode.decrypt(this, e), i.push(r);
        return Fi.concat(i);
    };
    ef.prototype._final = function() {
        var t = this._cache.flush();
        if (this._autopadding) return G3(this._mode.decrypt(this, t));
        if (t) throw new Error("data not multiple of block length");
    };
    ef.prototype.setAutoPadding = function(t) {
        return this._autopadding = !!t, this;
    };
    function da() {
        this.cache = Fi.allocUnsafe(0);
    }
    da.prototype.add = function(t) {
        this.cache = Fi.concat([
            this.cache,
            t
        ]);
    };
    da.prototype.get = function(t) {
        var e;
        if (t) {
            if (this.cache.length > 16) return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
        } else if (this.cache.length >= 16) return e = this.cache.slice(0, 16), this.cache = this.cache.slice(16), e;
        return null;
    };
    da.prototype.flush = function() {
        if (this.cache.length) return this.cache;
    };
    function G3(t) {
        var e = t[15];
        if (e < 1 || e > 16) throw new Error("unable to decrypt data");
        for(var r = -1; ++r < e;)if (t[r + (16 - e)] !== e) throw new Error("unable to decrypt data");
        if (e !== 16) return t.slice(0, 16 - e);
    }
    function ud(t, e, r) {
        var i = hd[t.toLowerCase()];
        if (!i) throw new TypeError("invalid suite type");
        if (typeof r == "string" && (r = Fi.from(r)), i.mode !== "GCM" && r.length !== i.iv) throw new TypeError("invalid iv length " + r.length);
        if (typeof e == "string" && (e = Fi.from(e)), e.length !== i.key / 8) throw new TypeError("invalid key length " + e.length);
        return i.type === "stream" ? new j3(i.module, e, r, !0) : i.type === "auth" ? new H3(i.module, e, r, !0) : new ef(i.module, e, r);
    }
    function Z3(t, e) {
        var r = hd[t.toLowerCase()];
        if (!r) throw new TypeError("invalid suite type");
        var i = W3(e, !1, r.key, r.iv);
        return ud(t, i.key, i.iv);
    }
    Mo.createDecipher = Z3;
    Mo.createDecipheriv = ud;
});
var la = q((Ct)=>{
    var ld = sd(), pd = dd(), X3 = bo();
    function Y3() {
        return Object.keys(X3);
    }
    Ct.createCipher = Ct.Cipher = ld.createCipher;
    Ct.createCipheriv = Ct.Cipheriv = ld.createCipheriv;
    Ct.createDecipher = Ct.Decipher = pd.createDecipher;
    Ct.createDecipheriv = Ct.Decipheriv = pd.createDecipheriv;
    Ct.listCiphers = Ct.getCiphers = Y3;
});
var bd = q((sr)=>{
    sr["des-ecb"] = {
        key: 8,
        iv: 0
    };
    sr["des-cbc"] = sr.des = {
        key: 8,
        iv: 8
    };
    sr["des-ede3-cbc"] = sr.des3 = {
        key: 24,
        iv: 8
    };
    sr["des-ede3"] = {
        key: 24,
        iv: 0
    };
    sr["des-ede-cbc"] = {
        key: 16,
        iv: 8
    };
    sr["des-ede"] = {
        key: 16,
        iv: 0
    };
});
var _d = q((Tt)=>{
    var vd = Iu(), Eo = la(), Er = sa(), hr = bd(), yd = $n();
    function J3(t, e) {
        t = t.toLowerCase();
        var r, i;
        if (Er[t]) r = Er[t].key, i = Er[t].iv;
        else if (hr[t]) r = hr[t].key * 8, i = hr[t].iv;
        else throw new TypeError("invalid suite type");
        var n = yd(e, !1, r, i);
        return md(t, n.key, n.iv);
    }
    function $3(t, e) {
        t = t.toLowerCase();
        var r, i;
        if (Er[t]) r = Er[t].key, i = Er[t].iv;
        else if (hr[t]) r = hr[t].key * 8, i = hr[t].iv;
        else throw new TypeError("invalid suite type");
        var n = yd(e, !1, r, i);
        return gd(t, n.key, n.iv);
    }
    function md(t, e, r) {
        if (t = t.toLowerCase(), Er[t]) return Eo.createCipheriv(t, e, r);
        if (hr[t]) return new vd({
            key: e,
            iv: r,
            mode: t
        });
        throw new TypeError("invalid suite type");
    }
    function gd(t, e, r) {
        if (t = t.toLowerCase(), Er[t]) return Eo.createDecipheriv(t, e, r);
        if (hr[t]) return new vd({
            key: e,
            iv: r,
            mode: t,
            decrypt: !0
        });
        throw new TypeError("invalid suite type");
    }
    function Q3() {
        return Object.keys(hr).concat(Eo.getCiphers());
    }
    Tt.createCipher = Tt.Cipher = J3;
    Tt.createCipheriv = Tt.Cipheriv = md;
    Tt.createDecipher = Tt.Decipher = $3;
    Tt.createDecipheriv = Tt.Decipheriv = gd;
    Tt.listCiphers = Tt.getCiphers = Q3;
});
var So = q(()=>{});
var je = q((wd, Ao)=>{
    (function(t, e) {
        "use strict";
        function r(S, c) {
            if (!S) throw new Error(c || "Assertion failed");
        }
        function i(S, c) {
            S.super_ = c;
            var m = function() {};
            m.prototype = c.prototype, S.prototype = new m, S.prototype.constructor = S;
        }
        function n(S, c, m) {
            if (n.isBN(S)) return S;
            this.negative = 0, this.words = null, this.length = 0, this.red = null, S !== null && ((c === "le" || c === "be") && (m = c, c = 10), this._init(S || 0, c || 10, m || "be"));
        }
        typeof t == "object" ? t.exports = n : e.BN = n, n.BN = n, n.wordSize = 26;
        var f;
        try {
            typeof window < "u" && typeof window.Buffer < "u" ? f = window.Buffer : f = So().Buffer;
        } catch (S) {}
        n.isBN = function(c) {
            return c instanceof n ? !0 : c !== null && typeof c == "object" && c.constructor.wordSize === n.wordSize && Array.isArray(c.words);
        }, n.max = function(c, m) {
            return c.cmp(m) > 0 ? c : m;
        }, n.min = function(c, m) {
            return c.cmp(m) < 0 ? c : m;
        }, n.prototype._init = function(c, m, l) {
            if (typeof c == "number") return this._initNumber(c, m, l);
            if (typeof c == "object") return this._initArray(c, m, l);
            m === "hex" && (m = 16), r(m === (m | 0) && m >= 2 && m <= 36), c = c.toString().replace(/\s+/g, "");
            var a = 0;
            c[0] === "-" && (a++, this.negative = 1), a < c.length && (m === 16 ? this._parseHex(c, a, l) : (this._parseBase(c, m, a), l === "le" && this._initArray(this.toArray(), m, l)));
        }, n.prototype._initNumber = function(c, m, l) {
            c < 0 && (this.negative = 1, c = -c), c < 67108864 ? (this.words = [
                c & 67108863
            ], this.length = 1) : c < 4503599627370496 ? (this.words = [
                c & 67108863,
                c / 67108864 & 67108863
            ], this.length = 2) : (r(c < 9007199254740992), this.words = [
                c & 67108863,
                c / 67108864 & 67108863,
                1
            ], this.length = 3), l === "le" && this._initArray(this.toArray(), m, l);
        }, n.prototype._initArray = function(c, m, l) {
            if (r(typeof c.length == "number"), c.length <= 0) return this.words = [
                0
            ], this.length = 1, this;
            this.length = Math.ceil(c.length / 3), this.words = new Array(this.length);
            for(var a = 0; a < this.length; a++)this.words[a] = 0;
            var h, p, y = 0;
            if (l === "be") for(a = c.length - 1, h = 0; a >= 0; a -= 3)p = c[a] | c[a - 1] << 8 | c[a - 2] << 16, this.words[h] |= p << y & 67108863, this.words[h + 1] = p >>> 26 - y & 67108863, y += 24, y >= 26 && (y -= 26, h++);
            else if (l === "le") for(a = 0, h = 0; a < c.length; a += 3)p = c[a] | c[a + 1] << 8 | c[a + 2] << 16, this.words[h] |= p << y & 67108863, this.words[h + 1] = p >>> 26 - y & 67108863, y += 24, y >= 26 && (y -= 26, h++);
            return this.strip();
        };
        function o(S, c) {
            var m = S.charCodeAt(c);
            return m >= 65 && m <= 70 ? m - 55 : m >= 97 && m <= 102 ? m - 87 : m - 48 & 15;
        }
        function u(S, c, m) {
            var l = o(S, m);
            return m - 1 >= c && (l |= o(S, m - 1) << 4), l;
        }
        n.prototype._parseHex = function(c, m, l) {
            this.length = Math.ceil((c.length - m) / 6), this.words = new Array(this.length);
            for(var a = 0; a < this.length; a++)this.words[a] = 0;
            var h = 0, p = 0, y;
            if (l === "be") for(a = c.length - 1; a >= m; a -= 2)y = u(c, m, a) << h, this.words[p] |= y & 67108863, h >= 18 ? (h -= 18, p += 1, this.words[p] |= y >>> 26) : h += 8;
            else {
                var b = c.length - m;
                for(a = b % 2 === 0 ? m + 1 : m; a < c.length; a += 2)y = u(c, m, a) << h, this.words[p] |= y & 67108863, h >= 18 ? (h -= 18, p += 1, this.words[p] |= y >>> 26) : h += 8;
            }
            this.strip();
        };
        function v(S, c, m, l) {
            for(var a = 0, h = Math.min(S.length, m), p = c; p < h; p++){
                var y = S.charCodeAt(p) - 48;
                a *= l, y >= 49 ? a += y - 49 + 10 : y >= 17 ? a += y - 17 + 10 : a += y;
            }
            return a;
        }
        n.prototype._parseBase = function(c, m, l) {
            this.words = [
                0
            ], this.length = 1;
            for(var a = 0, h = 1; h <= 67108863; h *= m)a++;
            a--, h = h / m | 0;
            for(var p = c.length - l, y = p % a, b = Math.min(p, p - y) + l, s = 0, g = l; g < b; g += a)s = v(c, g, g + a, m), this.imuln(h), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);
            if (y !== 0) {
                var w = 1;
                for(s = v(c, g, c.length, m), g = 0; g < y; g++)w *= m;
                this.imuln(w), this.words[0] + s < 67108864 ? this.words[0] += s : this._iaddn(s);
            }
            this.strip();
        }, n.prototype.copy = function(c) {
            c.words = new Array(this.length);
            for(var m = 0; m < this.length; m++)c.words[m] = this.words[m];
            c.length = this.length, c.negative = this.negative, c.red = this.red;
        }, n.prototype.clone = function() {
            var c = new n(null);
            return this.copy(c), c;
        }, n.prototype._expand = function(c) {
            for(; this.length < c;)this.words[this.length++] = 0;
            return this;
        }, n.prototype.strip = function() {
            for(; this.length > 1 && this.words[this.length - 1] === 0;)this.length--;
            return this._normSign();
        }, n.prototype._normSign = function() {
            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
        }, n.prototype.inspect = function() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        };
        var _ = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
        ], x = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
        ], E = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
        ];
        n.prototype.toString = function(c, m) {
            c = c || 10, m = m | 0 || 1;
            var l;
            if (c === 16 || c === "hex") {
                l = "";
                for(var a = 0, h = 0, p = 0; p < this.length; p++){
                    var y = this.words[p], b = ((y << a | h) & 16777215).toString(16);
                    h = y >>> 24 - a & 16777215, h !== 0 || p !== this.length - 1 ? l = _[6 - b.length] + b + l : l = b + l, a += 2, a >= 26 && (a -= 26, p--);
                }
                for(h !== 0 && (l = h.toString(16) + l); l.length % m !== 0;)l = "0" + l;
                return this.negative !== 0 && (l = "-" + l), l;
            }
            if (c === (c | 0) && c >= 2 && c <= 36) {
                var s = x[c], g = E[c];
                l = "";
                var w = this.clone();
                for(w.negative = 0; !w.isZero();){
                    var d = w.modn(g).toString(c);
                    w = w.idivn(g), w.isZero() ? l = d + l : l = _[s - d.length] + d + l;
                }
                for(this.isZero() && (l = "0" + l); l.length % m !== 0;)l = "0" + l;
                return this.negative !== 0 && (l = "-" + l), l;
            }
            r(!1, "Base should be between 2 and 36");
        }, n.prototype.toNumber = function() {
            var c = this.words[0];
            return this.length === 2 ? c += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? c += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -c : c;
        }, n.prototype.toJSON = function() {
            return this.toString(16);
        }, n.prototype.toBuffer = function(c, m) {
            return r(typeof f < "u"), this.toArrayLike(f, c, m);
        }, n.prototype.toArray = function(c, m) {
            return this.toArrayLike(Array, c, m);
        }, n.prototype.toArrayLike = function(c, m, l) {
            var a = this.byteLength(), h = l || Math.max(1, a);
            r(a <= h, "byte array longer than desired length"), r(h > 0, "Requested array length <= 0"), this.strip();
            var p = m === "le", y = new c(h), b, s, g = this.clone();
            if (p) {
                for(s = 0; !g.isZero(); s++)b = g.andln(255), g.iushrn(8), y[s] = b;
                for(; s < h; s++)y[s] = 0;
            } else {
                for(s = 0; s < h - a; s++)y[s] = 0;
                for(s = 0; !g.isZero(); s++)b = g.andln(255), g.iushrn(8), y[h - s - 1] = b;
            }
            return y;
        }, Math.clz32 ? n.prototype._countBits = function(c) {
            return 32 - Math.clz32(c);
        } : n.prototype._countBits = function(c) {
            var m = c, l = 0;
            return m >= 4096 && (l += 13, m >>>= 13), m >= 64 && (l += 7, m >>>= 7), m >= 8 && (l += 4, m >>>= 4), m >= 2 && (l += 2, m >>>= 2), l + m;
        }, n.prototype._zeroBits = function(c) {
            if (c === 0) return 26;
            var m = c, l = 0;
            return m & 8191 || (l += 13, m >>>= 13), m & 127 || (l += 7, m >>>= 7), m & 15 || (l += 4, m >>>= 4), m & 3 || (l += 2, m >>>= 2), m & 1 || l++, l;
        }, n.prototype.bitLength = function() {
            var c = this.words[this.length - 1], m = this._countBits(c);
            return (this.length - 1) * 26 + m;
        };
        function A(S) {
            for(var c = new Array(S.bitLength()), m = 0; m < c.length; m++){
                var l = m / 26 | 0, a = m % 26;
                c[m] = (S.words[l] & 1 << a) >>> a;
            }
            return c;
        }
        n.prototype.zeroBits = function() {
            if (this.isZero()) return 0;
            for(var c = 0, m = 0; m < this.length; m++){
                var l = this._zeroBits(this.words[m]);
                if (c += l, l !== 26) break;
            }
            return c;
        }, n.prototype.byteLength = function() {
            return Math.ceil(this.bitLength() / 8);
        }, n.prototype.toTwos = function(c) {
            return this.negative !== 0 ? this.abs().inotn(c).iaddn(1) : this.clone();
        }, n.prototype.fromTwos = function(c) {
            return this.testn(c - 1) ? this.notn(c).iaddn(1).ineg() : this.clone();
        }, n.prototype.isNeg = function() {
            return this.negative !== 0;
        }, n.prototype.neg = function() {
            return this.clone().ineg();
        }, n.prototype.ineg = function() {
            return this.isZero() || (this.negative ^= 1), this;
        }, n.prototype.iuor = function(c) {
            for(; this.length < c.length;)this.words[this.length++] = 0;
            for(var m = 0; m < c.length; m++)this.words[m] = this.words[m] | c.words[m];
            return this.strip();
        }, n.prototype.ior = function(c) {
            return r((this.negative | c.negative) === 0), this.iuor(c);
        }, n.prototype.or = function(c) {
            return this.length > c.length ? this.clone().ior(c) : c.clone().ior(this);
        }, n.prototype.uor = function(c) {
            return this.length > c.length ? this.clone().iuor(c) : c.clone().iuor(this);
        }, n.prototype.iuand = function(c) {
            var m;
            this.length > c.length ? m = c : m = this;
            for(var l = 0; l < m.length; l++)this.words[l] = this.words[l] & c.words[l];
            return this.length = m.length, this.strip();
        }, n.prototype.iand = function(c) {
            return r((this.negative | c.negative) === 0), this.iuand(c);
        }, n.prototype.and = function(c) {
            return this.length > c.length ? this.clone().iand(c) : c.clone().iand(this);
        }, n.prototype.uand = function(c) {
            return this.length > c.length ? this.clone().iuand(c) : c.clone().iuand(this);
        }, n.prototype.iuxor = function(c) {
            var m, l;
            this.length > c.length ? (m = this, l = c) : (m = c, l = this);
            for(var a = 0; a < l.length; a++)this.words[a] = m.words[a] ^ l.words[a];
            if (this !== m) for(; a < m.length; a++)this.words[a] = m.words[a];
            return this.length = m.length, this.strip();
        }, n.prototype.ixor = function(c) {
            return r((this.negative | c.negative) === 0), this.iuxor(c);
        }, n.prototype.xor = function(c) {
            return this.length > c.length ? this.clone().ixor(c) : c.clone().ixor(this);
        }, n.prototype.uxor = function(c) {
            return this.length > c.length ? this.clone().iuxor(c) : c.clone().iuxor(this);
        }, n.prototype.inotn = function(c) {
            r(typeof c == "number" && c >= 0);
            var m = Math.ceil(c / 26) | 0, l = c % 26;
            this._expand(m), l > 0 && m--;
            for(var a = 0; a < m; a++)this.words[a] = ~this.words[a] & 67108863;
            return l > 0 && (this.words[a] = ~this.words[a] & 67108863 >> 26 - l), this.strip();
        }, n.prototype.notn = function(c) {
            return this.clone().inotn(c);
        }, n.prototype.setn = function(c, m) {
            r(typeof c == "number" && c >= 0);
            var l = c / 26 | 0, a = c % 26;
            return this._expand(l + 1), m ? this.words[l] = this.words[l] | 1 << a : this.words[l] = this.words[l] & ~(1 << a), this.strip();
        }, n.prototype.iadd = function(c) {
            var m;
            if (this.negative !== 0 && c.negative === 0) return this.negative = 0, m = this.isub(c), this.negative ^= 1, this._normSign();
            if (this.negative === 0 && c.negative !== 0) return c.negative = 0, m = this.isub(c), c.negative = 1, m._normSign();
            var l, a;
            this.length > c.length ? (l = this, a = c) : (l = c, a = this);
            for(var h = 0, p = 0; p < a.length; p++)m = (l.words[p] | 0) + (a.words[p] | 0) + h, this.words[p] = m & 67108863, h = m >>> 26;
            for(; h !== 0 && p < l.length; p++)m = (l.words[p] | 0) + h, this.words[p] = m & 67108863, h = m >>> 26;
            if (this.length = l.length, h !== 0) this.words[this.length] = h, this.length++;
            else if (l !== this) for(; p < l.length; p++)this.words[p] = l.words[p];
            return this;
        }, n.prototype.add = function(c) {
            var m;
            return c.negative !== 0 && this.negative === 0 ? (c.negative = 0, m = this.sub(c), c.negative ^= 1, m) : c.negative === 0 && this.negative !== 0 ? (this.negative = 0, m = c.sub(this), this.negative = 1, m) : this.length > c.length ? this.clone().iadd(c) : c.clone().iadd(this);
        }, n.prototype.isub = function(c) {
            if (c.negative !== 0) {
                c.negative = 0;
                var m = this.iadd(c);
                return c.negative = 1, m._normSign();
            } else if (this.negative !== 0) return this.negative = 0, this.iadd(c), this.negative = 1, this._normSign();
            var l = this.cmp(c);
            if (l === 0) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
            var a, h;
            l > 0 ? (a = this, h = c) : (a = c, h = this);
            for(var p = 0, y = 0; y < h.length; y++)m = (a.words[y] | 0) - (h.words[y] | 0) + p, p = m >> 26, this.words[y] = m & 67108863;
            for(; p !== 0 && y < a.length; y++)m = (a.words[y] | 0) + p, p = m >> 26, this.words[y] = m & 67108863;
            if (p === 0 && y < a.length && a !== this) for(; y < a.length; y++)this.words[y] = a.words[y];
            return this.length = Math.max(this.length, y), a !== this && (this.negative = 1), this.strip();
        }, n.prototype.sub = function(c) {
            return this.clone().isub(c);
        };
        function B(S, c, m) {
            m.negative = c.negative ^ S.negative;
            var l = S.length + c.length | 0;
            m.length = l, l = l - 1 | 0;
            var a = S.words[0] | 0, h = c.words[0] | 0, p = a * h, y = p & 67108863, b = p / 67108864 | 0;
            m.words[0] = y;
            for(var s = 1; s < l; s++){
                for(var g = b >>> 26, w = b & 67108863, d = Math.min(s, c.length - 1), M = Math.max(0, s - S.length + 1); M <= d; M++){
                    var k = s - M | 0;
                    a = S.words[k] | 0, h = c.words[M] | 0, p = a * h + w, g += p / 67108864 | 0, w = p & 67108863;
                }
                m.words[s] = w | 0, b = g | 0;
            }
            return b !== 0 ? m.words[s] = b | 0 : m.length--, m.strip();
        }
        var I = function(c, m, l) {
            var a = c.words, h = m.words, p = l.words, y = 0, b, s, g, w = a[0] | 0, d = w & 8191, M = w >>> 13, k = a[1] | 0, T = k & 8191, C = k >>> 13, N = a[2] | 0, L = N & 8191, O = N >>> 13, It = a[3] | 0, U = It & 8191, H = It >>> 13, hn = a[4] | 0, j = hn & 8191, K = hn >>> 13, cn = a[5] | 0, W = cn & 8191, V = cn >>> 13, un = a[6] | 0, G = un & 8191, Z = un >>> 13, dn = a[7] | 0, X = dn & 8191, Y = dn >>> 13, ln = a[8] | 0, J = ln & 8191, $ = ln >>> 13, pn = a[9] | 0, Q = pn & 8191, ee = pn >>> 13, bn = h[0] | 0, te = bn & 8191, re = bn >>> 13, vn = h[1] | 0, ie = vn & 8191, ne = vn >>> 13, yn = h[2] | 0, fe = yn & 8191, ae = yn >>> 13, mn = h[3] | 0, oe = mn & 8191, se = mn >>> 13, gn = h[4] | 0, he = gn & 8191, ce = gn >>> 13, _n = h[5] | 0, ue = _n & 8191, de = _n >>> 13, wn = h[6] | 0, le = wn & 8191, pe = wn >>> 13, xn = h[7] | 0, be = xn & 8191, ve = xn >>> 13, Mn = h[8] | 0, ye = Mn & 8191, me = Mn >>> 13, En = h[9] | 0, ge = En & 8191, _e = En >>> 13;
            l.negative = c.negative ^ m.negative, l.length = 19, b = Math.imul(d, te), s = Math.imul(d, re), s = s + Math.imul(M, te) | 0, g = Math.imul(M, re);
            var Ei = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Ei >>> 26) | 0, Ei &= 67108863, b = Math.imul(T, te), s = Math.imul(T, re), s = s + Math.imul(C, te) | 0, g = Math.imul(C, re), b = b + Math.imul(d, ie) | 0, s = s + Math.imul(d, ne) | 0, s = s + Math.imul(M, ie) | 0, g = g + Math.imul(M, ne) | 0;
            var De = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (De >>> 26) | 0, De &= 67108863, b = Math.imul(L, te), s = Math.imul(L, re), s = s + Math.imul(O, te) | 0, g = Math.imul(O, re), b = b + Math.imul(T, ie) | 0, s = s + Math.imul(T, ne) | 0, s = s + Math.imul(C, ie) | 0, g = g + Math.imul(C, ne) | 0, b = b + Math.imul(d, fe) | 0, s = s + Math.imul(d, ae) | 0, s = s + Math.imul(M, fe) | 0, g = g + Math.imul(M, ae) | 0;
            var Le = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Le >>> 26) | 0, Le &= 67108863, b = Math.imul(U, te), s = Math.imul(U, re), s = s + Math.imul(H, te) | 0, g = Math.imul(H, re), b = b + Math.imul(L, ie) | 0, s = s + Math.imul(L, ne) | 0, s = s + Math.imul(O, ie) | 0, g = g + Math.imul(O, ne) | 0, b = b + Math.imul(T, fe) | 0, s = s + Math.imul(T, ae) | 0, s = s + Math.imul(C, fe) | 0, g = g + Math.imul(C, ae) | 0, b = b + Math.imul(d, oe) | 0, s = s + Math.imul(d, se) | 0, s = s + Math.imul(M, oe) | 0, g = g + Math.imul(M, se) | 0;
            var kr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (kr >>> 26) | 0, kr &= 67108863, b = Math.imul(j, te), s = Math.imul(j, re), s = s + Math.imul(K, te) | 0, g = Math.imul(K, re), b = b + Math.imul(U, ie) | 0, s = s + Math.imul(U, ne) | 0, s = s + Math.imul(H, ie) | 0, g = g + Math.imul(H, ne) | 0, b = b + Math.imul(L, fe) | 0, s = s + Math.imul(L, ae) | 0, s = s + Math.imul(O, fe) | 0, g = g + Math.imul(O, ae) | 0, b = b + Math.imul(T, oe) | 0, s = s + Math.imul(T, se) | 0, s = s + Math.imul(C, oe) | 0, g = g + Math.imul(C, se) | 0, b = b + Math.imul(d, he) | 0, s = s + Math.imul(d, ce) | 0, s = s + Math.imul(M, he) | 0, g = g + Math.imul(M, ce) | 0;
            var Cr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Cr >>> 26) | 0, Cr &= 67108863, b = Math.imul(W, te), s = Math.imul(W, re), s = s + Math.imul(V, te) | 0, g = Math.imul(V, re), b = b + Math.imul(j, ie) | 0, s = s + Math.imul(j, ne) | 0, s = s + Math.imul(K, ie) | 0, g = g + Math.imul(K, ne) | 0, b = b + Math.imul(U, fe) | 0, s = s + Math.imul(U, ae) | 0, s = s + Math.imul(H, fe) | 0, g = g + Math.imul(H, ae) | 0, b = b + Math.imul(L, oe) | 0, s = s + Math.imul(L, se) | 0, s = s + Math.imul(O, oe) | 0, g = g + Math.imul(O, se) | 0, b = b + Math.imul(T, he) | 0, s = s + Math.imul(T, ce) | 0, s = s + Math.imul(C, he) | 0, g = g + Math.imul(C, ce) | 0, b = b + Math.imul(d, ue) | 0, s = s + Math.imul(d, de) | 0, s = s + Math.imul(M, ue) | 0, g = g + Math.imul(M, de) | 0;
            var Tr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Tr >>> 26) | 0, Tr &= 67108863, b = Math.imul(G, te), s = Math.imul(G, re), s = s + Math.imul(Z, te) | 0, g = Math.imul(Z, re), b = b + Math.imul(W, ie) | 0, s = s + Math.imul(W, ne) | 0, s = s + Math.imul(V, ie) | 0, g = g + Math.imul(V, ne) | 0, b = b + Math.imul(j, fe) | 0, s = s + Math.imul(j, ae) | 0, s = s + Math.imul(K, fe) | 0, g = g + Math.imul(K, ae) | 0, b = b + Math.imul(U, oe) | 0, s = s + Math.imul(U, se) | 0, s = s + Math.imul(H, oe) | 0, g = g + Math.imul(H, se) | 0, b = b + Math.imul(L, he) | 0, s = s + Math.imul(L, ce) | 0, s = s + Math.imul(O, he) | 0, g = g + Math.imul(O, ce) | 0, b = b + Math.imul(T, ue) | 0, s = s + Math.imul(T, de) | 0, s = s + Math.imul(C, ue) | 0, g = g + Math.imul(C, de) | 0, b = b + Math.imul(d, le) | 0, s = s + Math.imul(d, pe) | 0, s = s + Math.imul(M, le) | 0, g = g + Math.imul(M, pe) | 0;
            var Pr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Pr >>> 26) | 0, Pr &= 67108863, b = Math.imul(X, te), s = Math.imul(X, re), s = s + Math.imul(Y, te) | 0, g = Math.imul(Y, re), b = b + Math.imul(G, ie) | 0, s = s + Math.imul(G, ne) | 0, s = s + Math.imul(Z, ie) | 0, g = g + Math.imul(Z, ne) | 0, b = b + Math.imul(W, fe) | 0, s = s + Math.imul(W, ae) | 0, s = s + Math.imul(V, fe) | 0, g = g + Math.imul(V, ae) | 0, b = b + Math.imul(j, oe) | 0, s = s + Math.imul(j, se) | 0, s = s + Math.imul(K, oe) | 0, g = g + Math.imul(K, se) | 0, b = b + Math.imul(U, he) | 0, s = s + Math.imul(U, ce) | 0, s = s + Math.imul(H, he) | 0, g = g + Math.imul(H, ce) | 0, b = b + Math.imul(L, ue) | 0, s = s + Math.imul(L, de) | 0, s = s + Math.imul(O, ue) | 0, g = g + Math.imul(O, de) | 0, b = b + Math.imul(T, le) | 0, s = s + Math.imul(T, pe) | 0, s = s + Math.imul(C, le) | 0, g = g + Math.imul(C, pe) | 0, b = b + Math.imul(d, be) | 0, s = s + Math.imul(d, ve) | 0, s = s + Math.imul(M, be) | 0, g = g + Math.imul(M, ve) | 0;
            var Dr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Dr >>> 26) | 0, Dr &= 67108863, b = Math.imul(J, te), s = Math.imul(J, re), s = s + Math.imul($, te) | 0, g = Math.imul($, re), b = b + Math.imul(X, ie) | 0, s = s + Math.imul(X, ne) | 0, s = s + Math.imul(Y, ie) | 0, g = g + Math.imul(Y, ne) | 0, b = b + Math.imul(G, fe) | 0, s = s + Math.imul(G, ae) | 0, s = s + Math.imul(Z, fe) | 0, g = g + Math.imul(Z, ae) | 0, b = b + Math.imul(W, oe) | 0, s = s + Math.imul(W, se) | 0, s = s + Math.imul(V, oe) | 0, g = g + Math.imul(V, se) | 0, b = b + Math.imul(j, he) | 0, s = s + Math.imul(j, ce) | 0, s = s + Math.imul(K, he) | 0, g = g + Math.imul(K, ce) | 0, b = b + Math.imul(U, ue) | 0, s = s + Math.imul(U, de) | 0, s = s + Math.imul(H, ue) | 0, g = g + Math.imul(H, de) | 0, b = b + Math.imul(L, le) | 0, s = s + Math.imul(L, pe) | 0, s = s + Math.imul(O, le) | 0, g = g + Math.imul(O, pe) | 0, b = b + Math.imul(T, be) | 0, s = s + Math.imul(T, ve) | 0, s = s + Math.imul(C, be) | 0, g = g + Math.imul(C, ve) | 0, b = b + Math.imul(d, ye) | 0, s = s + Math.imul(d, me) | 0, s = s + Math.imul(M, ye) | 0, g = g + Math.imul(M, me) | 0;
            var Lr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Lr >>> 26) | 0, Lr &= 67108863, b = Math.imul(Q, te), s = Math.imul(Q, re), s = s + Math.imul(ee, te) | 0, g = Math.imul(ee, re), b = b + Math.imul(J, ie) | 0, s = s + Math.imul(J, ne) | 0, s = s + Math.imul($, ie) | 0, g = g + Math.imul($, ne) | 0, b = b + Math.imul(X, fe) | 0, s = s + Math.imul(X, ae) | 0, s = s + Math.imul(Y, fe) | 0, g = g + Math.imul(Y, ae) | 0, b = b + Math.imul(G, oe) | 0, s = s + Math.imul(G, se) | 0, s = s + Math.imul(Z, oe) | 0, g = g + Math.imul(Z, se) | 0, b = b + Math.imul(W, he) | 0, s = s + Math.imul(W, ce) | 0, s = s + Math.imul(V, he) | 0, g = g + Math.imul(V, ce) | 0, b = b + Math.imul(j, ue) | 0, s = s + Math.imul(j, de) | 0, s = s + Math.imul(K, ue) | 0, g = g + Math.imul(K, de) | 0, b = b + Math.imul(U, le) | 0, s = s + Math.imul(U, pe) | 0, s = s + Math.imul(H, le) | 0, g = g + Math.imul(H, pe) | 0, b = b + Math.imul(L, be) | 0, s = s + Math.imul(L, ve) | 0, s = s + Math.imul(O, be) | 0, g = g + Math.imul(O, ve) | 0, b = b + Math.imul(T, ye) | 0, s = s + Math.imul(T, me) | 0, s = s + Math.imul(C, ye) | 0, g = g + Math.imul(C, me) | 0, b = b + Math.imul(d, ge) | 0, s = s + Math.imul(d, _e) | 0, s = s + Math.imul(M, ge) | 0, g = g + Math.imul(M, _e) | 0;
            var Nr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Nr >>> 26) | 0, Nr &= 67108863, b = Math.imul(Q, ie), s = Math.imul(Q, ne), s = s + Math.imul(ee, ie) | 0, g = Math.imul(ee, ne), b = b + Math.imul(J, fe) | 0, s = s + Math.imul(J, ae) | 0, s = s + Math.imul($, fe) | 0, g = g + Math.imul($, ae) | 0, b = b + Math.imul(X, oe) | 0, s = s + Math.imul(X, se) | 0, s = s + Math.imul(Y, oe) | 0, g = g + Math.imul(Y, se) | 0, b = b + Math.imul(G, he) | 0, s = s + Math.imul(G, ce) | 0, s = s + Math.imul(Z, he) | 0, g = g + Math.imul(Z, ce) | 0, b = b + Math.imul(W, ue) | 0, s = s + Math.imul(W, de) | 0, s = s + Math.imul(V, ue) | 0, g = g + Math.imul(V, de) | 0, b = b + Math.imul(j, le) | 0, s = s + Math.imul(j, pe) | 0, s = s + Math.imul(K, le) | 0, g = g + Math.imul(K, pe) | 0, b = b + Math.imul(U, be) | 0, s = s + Math.imul(U, ve) | 0, s = s + Math.imul(H, be) | 0, g = g + Math.imul(H, ve) | 0, b = b + Math.imul(L, ye) | 0, s = s + Math.imul(L, me) | 0, s = s + Math.imul(O, ye) | 0, g = g + Math.imul(O, me) | 0, b = b + Math.imul(T, ge) | 0, s = s + Math.imul(T, _e) | 0, s = s + Math.imul(C, ge) | 0, g = g + Math.imul(C, _e) | 0;
            var Or = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Or >>> 26) | 0, Or &= 67108863, b = Math.imul(Q, fe), s = Math.imul(Q, ae), s = s + Math.imul(ee, fe) | 0, g = Math.imul(ee, ae), b = b + Math.imul(J, oe) | 0, s = s + Math.imul(J, se) | 0, s = s + Math.imul($, oe) | 0, g = g + Math.imul($, se) | 0, b = b + Math.imul(X, he) | 0, s = s + Math.imul(X, ce) | 0, s = s + Math.imul(Y, he) | 0, g = g + Math.imul(Y, ce) | 0, b = b + Math.imul(G, ue) | 0, s = s + Math.imul(G, de) | 0, s = s + Math.imul(Z, ue) | 0, g = g + Math.imul(Z, de) | 0, b = b + Math.imul(W, le) | 0, s = s + Math.imul(W, pe) | 0, s = s + Math.imul(V, le) | 0, g = g + Math.imul(V, pe) | 0, b = b + Math.imul(j, be) | 0, s = s + Math.imul(j, ve) | 0, s = s + Math.imul(K, be) | 0, g = g + Math.imul(K, ve) | 0, b = b + Math.imul(U, ye) | 0, s = s + Math.imul(U, me) | 0, s = s + Math.imul(H, ye) | 0, g = g + Math.imul(H, me) | 0, b = b + Math.imul(L, ge) | 0, s = s + Math.imul(L, _e) | 0, s = s + Math.imul(O, ge) | 0, g = g + Math.imul(O, _e) | 0;
            var Fr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Fr >>> 26) | 0, Fr &= 67108863, b = Math.imul(Q, oe), s = Math.imul(Q, se), s = s + Math.imul(ee, oe) | 0, g = Math.imul(ee, se), b = b + Math.imul(J, he) | 0, s = s + Math.imul(J, ce) | 0, s = s + Math.imul($, he) | 0, g = g + Math.imul($, ce) | 0, b = b + Math.imul(X, ue) | 0, s = s + Math.imul(X, de) | 0, s = s + Math.imul(Y, ue) | 0, g = g + Math.imul(Y, de) | 0, b = b + Math.imul(G, le) | 0, s = s + Math.imul(G, pe) | 0, s = s + Math.imul(Z, le) | 0, g = g + Math.imul(Z, pe) | 0, b = b + Math.imul(W, be) | 0, s = s + Math.imul(W, ve) | 0, s = s + Math.imul(V, be) | 0, g = g + Math.imul(V, ve) | 0, b = b + Math.imul(j, ye) | 0, s = s + Math.imul(j, me) | 0, s = s + Math.imul(K, ye) | 0, g = g + Math.imul(K, me) | 0, b = b + Math.imul(U, ge) | 0, s = s + Math.imul(U, _e) | 0, s = s + Math.imul(H, ge) | 0, g = g + Math.imul(H, _e) | 0;
            var Ur = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Ur >>> 26) | 0, Ur &= 67108863, b = Math.imul(Q, he), s = Math.imul(Q, ce), s = s + Math.imul(ee, he) | 0, g = Math.imul(ee, ce), b = b + Math.imul(J, ue) | 0, s = s + Math.imul(J, de) | 0, s = s + Math.imul($, ue) | 0, g = g + Math.imul($, de) | 0, b = b + Math.imul(X, le) | 0, s = s + Math.imul(X, pe) | 0, s = s + Math.imul(Y, le) | 0, g = g + Math.imul(Y, pe) | 0, b = b + Math.imul(G, be) | 0, s = s + Math.imul(G, ve) | 0, s = s + Math.imul(Z, be) | 0, g = g + Math.imul(Z, ve) | 0, b = b + Math.imul(W, ye) | 0, s = s + Math.imul(W, me) | 0, s = s + Math.imul(V, ye) | 0, g = g + Math.imul(V, me) | 0, b = b + Math.imul(j, ge) | 0, s = s + Math.imul(j, _e) | 0, s = s + Math.imul(K, ge) | 0, g = g + Math.imul(K, _e) | 0;
            var zr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (zr >>> 26) | 0, zr &= 67108863, b = Math.imul(Q, ue), s = Math.imul(Q, de), s = s + Math.imul(ee, ue) | 0, g = Math.imul(ee, de), b = b + Math.imul(J, le) | 0, s = s + Math.imul(J, pe) | 0, s = s + Math.imul($, le) | 0, g = g + Math.imul($, pe) | 0, b = b + Math.imul(X, be) | 0, s = s + Math.imul(X, ve) | 0, s = s + Math.imul(Y, be) | 0, g = g + Math.imul(Y, ve) | 0, b = b + Math.imul(G, ye) | 0, s = s + Math.imul(G, me) | 0, s = s + Math.imul(Z, ye) | 0, g = g + Math.imul(Z, me) | 0, b = b + Math.imul(W, ge) | 0, s = s + Math.imul(W, _e) | 0, s = s + Math.imul(V, ge) | 0, g = g + Math.imul(V, _e) | 0;
            var Hr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Hr >>> 26) | 0, Hr &= 67108863, b = Math.imul(Q, le), s = Math.imul(Q, pe), s = s + Math.imul(ee, le) | 0, g = Math.imul(ee, pe), b = b + Math.imul(J, be) | 0, s = s + Math.imul(J, ve) | 0, s = s + Math.imul($, be) | 0, g = g + Math.imul($, ve) | 0, b = b + Math.imul(X, ye) | 0, s = s + Math.imul(X, me) | 0, s = s + Math.imul(Y, ye) | 0, g = g + Math.imul(Y, me) | 0, b = b + Math.imul(G, ge) | 0, s = s + Math.imul(G, _e) | 0, s = s + Math.imul(Z, ge) | 0, g = g + Math.imul(Z, _e) | 0;
            var jr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (jr >>> 26) | 0, jr &= 67108863, b = Math.imul(Q, be), s = Math.imul(Q, ve), s = s + Math.imul(ee, be) | 0, g = Math.imul(ee, ve), b = b + Math.imul(J, ye) | 0, s = s + Math.imul(J, me) | 0, s = s + Math.imul($, ye) | 0, g = g + Math.imul($, me) | 0, b = b + Math.imul(X, ge) | 0, s = s + Math.imul(X, _e) | 0, s = s + Math.imul(Y, ge) | 0, g = g + Math.imul(Y, _e) | 0;
            var Kr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Kr >>> 26) | 0, Kr &= 67108863, b = Math.imul(Q, ye), s = Math.imul(Q, me), s = s + Math.imul(ee, ye) | 0, g = Math.imul(ee, me), b = b + Math.imul(J, ge) | 0, s = s + Math.imul(J, _e) | 0, s = s + Math.imul($, ge) | 0, g = g + Math.imul($, _e) | 0;
            var Wr = (y + b | 0) + ((s & 8191) << 13) | 0;
            y = (g + (s >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, b = Math.imul(Q, ge), s = Math.imul(Q, _e), s = s + Math.imul(ee, ge) | 0, g = Math.imul(ee, _e);
            var Vr = (y + b | 0) + ((s & 8191) << 13) | 0;
            return y = (g + (s >>> 13) | 0) + (Vr >>> 26) | 0, Vr &= 67108863, p[0] = Ei, p[1] = De, p[2] = Le, p[3] = kr, p[4] = Cr, p[5] = Tr, p[6] = Pr, p[7] = Dr, p[8] = Lr, p[9] = Nr, p[10] = Or, p[11] = Fr, p[12] = Ur, p[13] = zr, p[14] = Hr, p[15] = jr, p[16] = Kr, p[17] = Wr, p[18] = Vr, y !== 0 && (p[19] = y, l.length++), l;
        };
        Math.imul || (I = B);
        function P(S, c, m) {
            m.negative = c.negative ^ S.negative, m.length = S.length + c.length;
            for(var l = 0, a = 0, h = 0; h < m.length - 1; h++){
                var p = a;
                a = 0;
                for(var y = l & 67108863, b = Math.min(h, c.length - 1), s = Math.max(0, h - S.length + 1); s <= b; s++){
                    var g = h - s, w = S.words[g] | 0, d = c.words[s] | 0, M = w * d, k = M & 67108863;
                    p = p + (M / 67108864 | 0) | 0, k = k + y | 0, y = k & 67108863, p = p + (k >>> 26) | 0, a += p >>> 26, p &= 67108863;
                }
                m.words[h] = y, l = p, p = a;
            }
            return l !== 0 ? m.words[h] = l : m.length--, m.strip();
        }
        function F(S, c, m) {
            var l = new D;
            return l.mulp(S, c, m);
        }
        n.prototype.mulTo = function(c, m) {
            var l, a = this.length + c.length;
            return this.length === 10 && c.length === 10 ? l = I(this, c, m) : a < 63 ? l = B(this, c, m) : a < 1024 ? l = P(this, c, m) : l = F(this, c, m), l;
        };
        function D(S, c) {
            this.x = S, this.y = c;
        }
        D.prototype.makeRBT = function(c) {
            for(var m = new Array(c), l = n.prototype._countBits(c) - 1, a = 0; a < c; a++)m[a] = this.revBin(a, l, c);
            return m;
        }, D.prototype.revBin = function(c, m, l) {
            if (c === 0 || c === l - 1) return c;
            for(var a = 0, h = 0; h < m; h++)a |= (c & 1) << m - h - 1, c >>= 1;
            return a;
        }, D.prototype.permute = function(c, m, l, a, h, p) {
            for(var y = 0; y < p; y++)a[y] = m[c[y]], h[y] = l[c[y]];
        }, D.prototype.transform = function(c, m, l, a, h, p) {
            this.permute(p, c, m, l, a, h);
            for(var y = 1; y < h; y <<= 1)for(var b = y << 1, s = Math.cos(2 * Math.PI / b), g = Math.sin(2 * Math.PI / b), w = 0; w < h; w += b)for(var d = s, M = g, k = 0; k < y; k++){
                var T = l[w + k], C = a[w + k], N = l[w + k + y], L = a[w + k + y], O = d * N - M * L;
                L = d * L + M * N, N = O, l[w + k] = T + N, a[w + k] = C + L, l[w + k + y] = T - N, a[w + k + y] = C - L, k !== b && (O = s * d - g * M, M = s * M + g * d, d = O);
            }
        }, D.prototype.guessLen13b = function(c, m) {
            var l = Math.max(m, c) | 1, a = l & 1, h = 0;
            for(l = l / 2 | 0; l; l = l >>> 1)h++;
            return 1 << h + 1 + a;
        }, D.prototype.conjugate = function(c, m, l) {
            if (!(l <= 1)) for(var a = 0; a < l / 2; a++){
                var h = c[a];
                c[a] = c[l - a - 1], c[l - a - 1] = h, h = m[a], m[a] = -m[l - a - 1], m[l - a - 1] = -h;
            }
        }, D.prototype.normalize13b = function(c, m) {
            for(var l = 0, a = 0; a < m / 2; a++){
                var h = Math.round(c[2 * a + 1] / m) * 8192 + Math.round(c[2 * a] / m) + l;
                c[a] = h & 67108863, h < 67108864 ? l = 0 : l = h / 67108864 | 0;
            }
            return c;
        }, D.prototype.convert13b = function(c, m, l, a) {
            for(var h = 0, p = 0; p < m; p++)h = h + (c[p] | 0), l[2 * p] = h & 8191, h = h >>> 13, l[2 * p + 1] = h & 8191, h = h >>> 13;
            for(p = 2 * m; p < a; ++p)l[p] = 0;
            r(h === 0), r((h & -8192) === 0);
        }, D.prototype.stub = function(c) {
            for(var m = new Array(c), l = 0; l < c; l++)m[l] = 0;
            return m;
        }, D.prototype.mulp = function(c, m, l) {
            var a = 2 * this.guessLen13b(c.length, m.length), h = this.makeRBT(a), p = this.stub(a), y = new Array(a), b = new Array(a), s = new Array(a), g = new Array(a), w = new Array(a), d = new Array(a), M = l.words;
            M.length = a, this.convert13b(c.words, c.length, y, a), this.convert13b(m.words, m.length, g, a), this.transform(y, p, b, s, a, h), this.transform(g, p, w, d, a, h);
            for(var k = 0; k < a; k++){
                var T = b[k] * w[k] - s[k] * d[k];
                s[k] = b[k] * d[k] + s[k] * w[k], b[k] = T;
            }
            return this.conjugate(b, s, a), this.transform(b, s, M, p, a, h), this.conjugate(M, p, a), this.normalize13b(M, a), l.negative = c.negative ^ m.negative, l.length = c.length + m.length, l.strip();
        }, n.prototype.mul = function(c) {
            var m = new n(null);
            return m.words = new Array(this.length + c.length), this.mulTo(c, m);
        }, n.prototype.mulf = function(c) {
            var m = new n(null);
            return m.words = new Array(this.length + c.length), F(this, c, m);
        }, n.prototype.imul = function(c) {
            return this.clone().mulTo(c, this);
        }, n.prototype.imuln = function(c) {
            r(typeof c == "number"), r(c < 67108864);
            for(var m = 0, l = 0; l < this.length; l++){
                var a = (this.words[l] | 0) * c, h = (a & 67108863) + (m & 67108863);
                m >>= 26, m += a / 67108864 | 0, m += h >>> 26, this.words[l] = h & 67108863;
            }
            return m !== 0 && (this.words[l] = m, this.length++), this;
        }, n.prototype.muln = function(c) {
            return this.clone().imuln(c);
        }, n.prototype.sqr = function() {
            return this.mul(this);
        }, n.prototype.isqr = function() {
            return this.imul(this.clone());
        }, n.prototype.pow = function(c) {
            var m = A(c);
            if (m.length === 0) return new n(1);
            for(var l = this, a = 0; a < m.length && m[a] === 0; a++, l = l.sqr());
            if (++a < m.length) for(var h = l.sqr(); a < m.length; a++, h = h.sqr())m[a] !== 0 && (l = l.mul(h));
            return l;
        }, n.prototype.iushln = function(c) {
            r(typeof c == "number" && c >= 0);
            var m = c % 26, l = (c - m) / 26, a = 67108863 >>> 26 - m << 26 - m, h;
            if (m !== 0) {
                var p = 0;
                for(h = 0; h < this.length; h++){
                    var y = this.words[h] & a, b = (this.words[h] | 0) - y << m;
                    this.words[h] = b | p, p = y >>> 26 - m;
                }
                p && (this.words[h] = p, this.length++);
            }
            if (l !== 0) {
                for(h = this.length - 1; h >= 0; h--)this.words[h + l] = this.words[h];
                for(h = 0; h < l; h++)this.words[h] = 0;
                this.length += l;
            }
            return this.strip();
        }, n.prototype.ishln = function(c) {
            return r(this.negative === 0), this.iushln(c);
        }, n.prototype.iushrn = function(c, m, l) {
            r(typeof c == "number" && c >= 0);
            var a;
            m ? a = (m - m % 26) / 26 : a = 0;
            var h = c % 26, p = Math.min((c - h) / 26, this.length), y = 67108863 ^ 67108863 >>> h << h, b = l;
            if (a -= p, a = Math.max(0, a), b) {
                for(var s = 0; s < p; s++)b.words[s] = this.words[s];
                b.length = p;
            }
            if (p !== 0) {
                if (this.length > p) for(this.length -= p, s = 0; s < this.length; s++)this.words[s] = this.words[s + p];
                else this.words[0] = 0, this.length = 1;
            }
            var g = 0;
            for(s = this.length - 1; s >= 0 && (g !== 0 || s >= a); s--){
                var w = this.words[s] | 0;
                this.words[s] = g << 26 - h | w >>> h, g = w & y;
            }
            return b && g !== 0 && (b.words[b.length++] = g), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
        }, n.prototype.ishrn = function(c, m, l) {
            return r(this.negative === 0), this.iushrn(c, m, l);
        }, n.prototype.shln = function(c) {
            return this.clone().ishln(c);
        }, n.prototype.ushln = function(c) {
            return this.clone().iushln(c);
        }, n.prototype.shrn = function(c) {
            return this.clone().ishrn(c);
        }, n.prototype.ushrn = function(c) {
            return this.clone().iushrn(c);
        }, n.prototype.testn = function(c) {
            r(typeof c == "number" && c >= 0);
            var m = c % 26, l = (c - m) / 26, a = 1 << m;
            if (this.length <= l) return !1;
            var h = this.words[l];
            return !!(h & a);
        }, n.prototype.imaskn = function(c) {
            r(typeof c == "number" && c >= 0);
            var m = c % 26, l = (c - m) / 26;
            if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= l) return this;
            if (m !== 0 && l++, this.length = Math.min(l, this.length), m !== 0) {
                var a = 67108863 ^ 67108863 >>> m << m;
                this.words[this.length - 1] &= a;
            }
            return this.strip();
        }, n.prototype.maskn = function(c) {
            return this.clone().imaskn(c);
        }, n.prototype.iaddn = function(c) {
            return r(typeof c == "number"), r(c < 67108864), c < 0 ? this.isubn(-c) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) < c ? (this.words[0] = c - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(c), this.negative = 1, this) : this._iaddn(c);
        }, n.prototype._iaddn = function(c) {
            this.words[0] += c;
            for(var m = 0; m < this.length && this.words[m] >= 67108864; m++)this.words[m] -= 67108864, m === this.length - 1 ? this.words[m + 1] = 1 : this.words[m + 1]++;
            return this.length = Math.max(this.length, m + 1), this;
        }, n.prototype.isubn = function(c) {
            if (r(typeof c == "number"), r(c < 67108864), c < 0) return this.iaddn(-c);
            if (this.negative !== 0) return this.negative = 0, this.iaddn(c), this.negative = 1, this;
            if (this.words[0] -= c, this.length === 1 && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
            else for(var m = 0; m < this.length && this.words[m] < 0; m++)this.words[m] += 67108864, this.words[m + 1] -= 1;
            return this.strip();
        }, n.prototype.addn = function(c) {
            return this.clone().iaddn(c);
        }, n.prototype.subn = function(c) {
            return this.clone().isubn(c);
        }, n.prototype.iabs = function() {
            return this.negative = 0, this;
        }, n.prototype.abs = function() {
            return this.clone().iabs();
        }, n.prototype._ishlnsubmul = function(c, m, l) {
            var a = c.length + l, h;
            this._expand(a);
            var p, y = 0;
            for(h = 0; h < c.length; h++){
                p = (this.words[h + l] | 0) + y;
                var b = (c.words[h] | 0) * m;
                p -= b & 67108863, y = (p >> 26) - (b / 67108864 | 0), this.words[h + l] = p & 67108863;
            }
            for(; h < this.length - l; h++)p = (this.words[h + l] | 0) + y, y = p >> 26, this.words[h + l] = p & 67108863;
            if (y === 0) return this.strip();
            for(r(y === -1), y = 0, h = 0; h < this.length; h++)p = -(this.words[h] | 0) + y, y = p >> 26, this.words[h] = p & 67108863;
            return this.negative = 1, this.strip();
        }, n.prototype._wordDiv = function(c, m) {
            var l = this.length - c.length, a = this.clone(), h = c, p = h.words[h.length - 1] | 0, y = this._countBits(p);
            l = 26 - y, l !== 0 && (h = h.ushln(l), a.iushln(l), p = h.words[h.length - 1] | 0);
            var b = a.length - h.length, s;
            if (m !== "mod") {
                s = new n(null), s.length = b + 1, s.words = new Array(s.length);
                for(var g = 0; g < s.length; g++)s.words[g] = 0;
            }
            var w = a.clone()._ishlnsubmul(h, 1, b);
            w.negative === 0 && (a = w, s && (s.words[b] = 1));
            for(var d = b - 1; d >= 0; d--){
                var M = (a.words[h.length + d] | 0) * 67108864 + (a.words[h.length + d - 1] | 0);
                for(M = Math.min(M / p | 0, 67108863), a._ishlnsubmul(h, M, d); a.negative !== 0;)M--, a.negative = 0, a._ishlnsubmul(h, 1, d), a.isZero() || (a.negative ^= 1);
                s && (s.words[d] = M);
            }
            return s && s.strip(), a.strip(), m !== "div" && l !== 0 && a.iushrn(l), {
                div: s || null,
                mod: a
            };
        }, n.prototype.divmod = function(c, m, l) {
            if (r(!c.isZero()), this.isZero()) return {
                div: new n(0),
                mod: new n(0)
            };
            var a, h, p;
            return this.negative !== 0 && c.negative === 0 ? (p = this.neg().divmod(c, m), m !== "mod" && (a = p.div.neg()), m !== "div" && (h = p.mod.neg(), l && h.negative !== 0 && h.iadd(c)), {
                div: a,
                mod: h
            }) : this.negative === 0 && c.negative !== 0 ? (p = this.divmod(c.neg(), m), m !== "mod" && (a = p.div.neg()), {
                div: a,
                mod: p.mod
            }) : this.negative & c.negative ? (p = this.neg().divmod(c.neg(), m), m !== "div" && (h = p.mod.neg(), l && h.negative !== 0 && h.isub(c)), {
                div: p.div,
                mod: h
            }) : c.length > this.length || this.cmp(c) < 0 ? {
                div: new n(0),
                mod: this
            } : c.length === 1 ? m === "div" ? {
                div: this.divn(c.words[0]),
                mod: null
            } : m === "mod" ? {
                div: null,
                mod: new n(this.modn(c.words[0]))
            } : {
                div: this.divn(c.words[0]),
                mod: new n(this.modn(c.words[0]))
            } : this._wordDiv(c, m);
        }, n.prototype.div = function(c) {
            return this.divmod(c, "div", !1).div;
        }, n.prototype.mod = function(c) {
            return this.divmod(c, "mod", !1).mod;
        }, n.prototype.umod = function(c) {
            return this.divmod(c, "mod", !0).mod;
        }, n.prototype.divRound = function(c) {
            var m = this.divmod(c);
            if (m.mod.isZero()) return m.div;
            var l = m.div.negative !== 0 ? m.mod.isub(c) : m.mod, a = c.ushrn(1), h = c.andln(1), p = l.cmp(a);
            return p < 0 || h === 1 && p === 0 ? m.div : m.div.negative !== 0 ? m.div.isubn(1) : m.div.iaddn(1);
        }, n.prototype.modn = function(c) {
            r(c <= 67108863);
            for(var m = 67108864 % c, l = 0, a = this.length - 1; a >= 0; a--)l = (m * l + (this.words[a] | 0)) % c;
            return l;
        }, n.prototype.idivn = function(c) {
            r(c <= 67108863);
            for(var m = 0, l = this.length - 1; l >= 0; l--){
                var a = (this.words[l] | 0) + m * 67108864;
                this.words[l] = a / c | 0, m = a % c;
            }
            return this.strip();
        }, n.prototype.divn = function(c) {
            return this.clone().idivn(c);
        }, n.prototype.egcd = function(c) {
            r(c.negative === 0), r(!c.isZero());
            var m = this, l = c.clone();
            m.negative !== 0 ? m = m.umod(c) : m = m.clone();
            for(var a = new n(1), h = new n(0), p = new n(0), y = new n(1), b = 0; m.isEven() && l.isEven();)m.iushrn(1), l.iushrn(1), ++b;
            for(var s = l.clone(), g = m.clone(); !m.isZero();){
                for(var w = 0, d = 1; !(m.words[0] & d) && w < 26; ++w, d <<= 1);
                if (w > 0) for(m.iushrn(w); w-- > 0;)(a.isOdd() || h.isOdd()) && (a.iadd(s), h.isub(g)), a.iushrn(1), h.iushrn(1);
                for(var M = 0, k = 1; !(l.words[0] & k) && M < 26; ++M, k <<= 1);
                if (M > 0) for(l.iushrn(M); M-- > 0;)(p.isOdd() || y.isOdd()) && (p.iadd(s), y.isub(g)), p.iushrn(1), y.iushrn(1);
                m.cmp(l) >= 0 ? (m.isub(l), a.isub(p), h.isub(y)) : (l.isub(m), p.isub(a), y.isub(h));
            }
            return {
                a: p,
                b: y,
                gcd: l.iushln(b)
            };
        }, n.prototype._invmp = function(c) {
            r(c.negative === 0), r(!c.isZero());
            var m = this, l = c.clone();
            m.negative !== 0 ? m = m.umod(c) : m = m.clone();
            for(var a = new n(1), h = new n(0), p = l.clone(); m.cmpn(1) > 0 && l.cmpn(1) > 0;){
                for(var y = 0, b = 1; !(m.words[0] & b) && y < 26; ++y, b <<= 1);
                if (y > 0) for(m.iushrn(y); y-- > 0;)a.isOdd() && a.iadd(p), a.iushrn(1);
                for(var s = 0, g = 1; !(l.words[0] & g) && s < 26; ++s, g <<= 1);
                if (s > 0) for(l.iushrn(s); s-- > 0;)h.isOdd() && h.iadd(p), h.iushrn(1);
                m.cmp(l) >= 0 ? (m.isub(l), a.isub(h)) : (l.isub(m), h.isub(a));
            }
            var w;
            return m.cmpn(1) === 0 ? w = a : w = h, w.cmpn(0) < 0 && w.iadd(c), w;
        }, n.prototype.gcd = function(c) {
            if (this.isZero()) return c.abs();
            if (c.isZero()) return this.abs();
            var m = this.clone(), l = c.clone();
            m.negative = 0, l.negative = 0;
            for(var a = 0; m.isEven() && l.isEven(); a++)m.iushrn(1), l.iushrn(1);
            do {
                for(; m.isEven();)m.iushrn(1);
                for(; l.isEven();)l.iushrn(1);
                var h = m.cmp(l);
                if (h < 0) {
                    var p = m;
                    m = l, l = p;
                } else if (h === 0 || l.cmpn(1) === 0) break;
                m.isub(l);
            }while (!0);
            return l.iushln(a);
        }, n.prototype.invm = function(c) {
            return this.egcd(c).a.umod(c);
        }, n.prototype.isEven = function() {
            return (this.words[0] & 1) === 0;
        }, n.prototype.isOdd = function() {
            return (this.words[0] & 1) === 1;
        }, n.prototype.andln = function(c) {
            return this.words[0] & c;
        }, n.prototype.bincn = function(c) {
            r(typeof c == "number");
            var m = c % 26, l = (c - m) / 26, a = 1 << m;
            if (this.length <= l) return this._expand(l + 1), this.words[l] |= a, this;
            for(var h = a, p = l; h !== 0 && p < this.length; p++){
                var y = this.words[p] | 0;
                y += h, h = y >>> 26, y &= 67108863, this.words[p] = y;
            }
            return h !== 0 && (this.words[p] = h, this.length++), this;
        }, n.prototype.isZero = function() {
            return this.length === 1 && this.words[0] === 0;
        }, n.prototype.cmpn = function(c) {
            var m = c < 0;
            if (this.negative !== 0 && !m) return -1;
            if (this.negative === 0 && m) return 1;
            this.strip();
            var l;
            if (this.length > 1) l = 1;
            else {
                m && (c = -c), r(c <= 67108863, "Number is too big");
                var a = this.words[0] | 0;
                l = a === c ? 0 : a < c ? -1 : 1;
            }
            return this.negative !== 0 ? -l | 0 : l;
        }, n.prototype.cmp = function(c) {
            if (this.negative !== 0 && c.negative === 0) return -1;
            if (this.negative === 0 && c.negative !== 0) return 1;
            var m = this.ucmp(c);
            return this.negative !== 0 ? -m | 0 : m;
        }, n.prototype.ucmp = function(c) {
            if (this.length > c.length) return 1;
            if (this.length < c.length) return -1;
            for(var m = 0, l = this.length - 1; l >= 0; l--){
                var a = this.words[l] | 0, h = c.words[l] | 0;
                if (a !== h) {
                    a < h ? m = -1 : a > h && (m = 1);
                    break;
                }
            }
            return m;
        }, n.prototype.gtn = function(c) {
            return this.cmpn(c) === 1;
        }, n.prototype.gt = function(c) {
            return this.cmp(c) === 1;
        }, n.prototype.gten = function(c) {
            return this.cmpn(c) >= 0;
        }, n.prototype.gte = function(c) {
            return this.cmp(c) >= 0;
        }, n.prototype.ltn = function(c) {
            return this.cmpn(c) === -1;
        }, n.prototype.lt = function(c) {
            return this.cmp(c) === -1;
        }, n.prototype.lten = function(c) {
            return this.cmpn(c) <= 0;
        }, n.prototype.lte = function(c) {
            return this.cmp(c) <= 0;
        }, n.prototype.eqn = function(c) {
            return this.cmpn(c) === 0;
        }, n.prototype.eq = function(c) {
            return this.cmp(c) === 0;
        }, n.red = function(c) {
            return new Se(c);
        }, n.prototype.toRed = function(c) {
            return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), c.convertTo(this)._forceRed(c);
        }, n.prototype.fromRed = function() {
            return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
        }, n.prototype._forceRed = function(c) {
            return this.red = c, this;
        }, n.prototype.forceRed = function(c) {
            return r(!this.red, "Already a number in reduction context"), this._forceRed(c);
        }, n.prototype.redAdd = function(c) {
            return r(this.red, "redAdd works only with red numbers"), this.red.add(this, c);
        }, n.prototype.redIAdd = function(c) {
            return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, c);
        }, n.prototype.redSub = function(c) {
            return r(this.red, "redSub works only with red numbers"), this.red.sub(this, c);
        }, n.prototype.redISub = function(c) {
            return r(this.red, "redISub works only with red numbers"), this.red.isub(this, c);
        }, n.prototype.redShl = function(c) {
            return r(this.red, "redShl works only with red numbers"), this.red.shl(this, c);
        }, n.prototype.redMul = function(c) {
            return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, c), this.red.mul(this, c);
        }, n.prototype.redIMul = function(c) {
            return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, c), this.red.imul(this, c);
        }, n.prototype.redSqr = function() {
            return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
        }, n.prototype.redISqr = function() {
            return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
        }, n.prototype.redSqrt = function() {
            return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
        }, n.prototype.redInvm = function() {
            return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
        }, n.prototype.redNeg = function() {
            return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
        }, n.prototype.redPow = function(c) {
            return r(this.red && !c.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, c);
        };
        var z = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
        };
        function Ae(S, c) {
            this.name = S, this.p = new n(c, 16), this.n = this.p.bitLength(), this.k = new n(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
        }
        Ae.prototype._tmp = function() {
            var c = new n(null);
            return c.words = new Array(Math.ceil(this.n / 13)), c;
        }, Ae.prototype.ireduce = function(c) {
            var m = c, l;
            do this.split(m, this.tmp), m = this.imulK(m), m = m.iadd(this.tmp), l = m.bitLength();
            while (l > this.n);
            var a = l < this.n ? -1 : m.ucmp(this.p);
            return a === 0 ? (m.words[0] = 0, m.length = 1) : a > 0 ? m.isub(this.p) : m.strip !== void 0 ? m.strip() : m._strip(), m;
        }, Ae.prototype.split = function(c, m) {
            c.iushrn(this.n, 0, m);
        }, Ae.prototype.imulK = function(c) {
            return c.imul(this.k);
        };
        function qe() {
            Ae.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        i(qe, Ae), qe.prototype.split = function(c, m) {
            for(var l = 4194303, a = Math.min(c.length, 9), h = 0; h < a; h++)m.words[h] = c.words[h];
            if (m.length = a, c.length <= 9) {
                c.words[0] = 0, c.length = 1;
                return;
            }
            var p = c.words[9];
            for(m.words[m.length++] = p & l, h = 10; h < c.length; h++){
                var y = c.words[h] | 0;
                c.words[h - 10] = (y & l) << 4 | p >>> 22, p = y;
            }
            p >>>= 22, c.words[h - 10] = p, p === 0 && c.length > 10 ? c.length -= 10 : c.length -= 9;
        }, qe.prototype.imulK = function(c) {
            c.words[c.length] = 0, c.words[c.length + 1] = 0, c.length += 2;
            for(var m = 0, l = 0; l < c.length; l++){
                var a = c.words[l] | 0;
                m += a * 977, c.words[l] = m & 67108863, m = a * 64 + (m / 67108864 | 0);
            }
            return c.words[c.length - 1] === 0 && (c.length--, c.words[c.length - 1] === 0 && c.length--), c;
        };
        function Pe() {
            Ae.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        i(Pe, Ae);
        function Re() {
            Ae.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        i(Re, Ae);
        function Ue() {
            Ae.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        i(Ue, Ae), Ue.prototype.imulK = function(c) {
            for(var m = 0, l = 0; l < c.length; l++){
                var a = (c.words[l] | 0) * 19 + m, h = a & 67108863;
                a >>>= 26, c.words[l] = h, m = a;
            }
            return m !== 0 && (c.words[c.length++] = m), c;
        }, n._prime = function(c) {
            if (z[c]) return z[c];
            var m;
            if (c === "k256") m = new qe;
            else if (c === "p224") m = new Pe;
            else if (c === "p192") m = new Re;
            else if (c === "p25519") m = new Ue;
            else throw new Error("Unknown prime " + c);
            return z[c] = m, m;
        };
        function Se(S) {
            if (typeof S == "string") {
                var c = n._prime(S);
                this.m = c.p, this.prime = c;
            } else r(S.gtn(1), "modulus must be greater than 1"), this.m = S, this.prime = null;
        }
        Se.prototype._verify1 = function(c) {
            r(c.negative === 0, "red works only with positives"), r(c.red, "red works only with red numbers");
        }, Se.prototype._verify2 = function(c, m) {
            r((c.negative | m.negative) === 0, "red works only with positives"), r(c.red && c.red === m.red, "red works only with red numbers");
        }, Se.prototype.imod = function(c) {
            return this.prime ? this.prime.ireduce(c)._forceRed(this) : c.umod(this.m)._forceRed(this);
        }, Se.prototype.neg = function(c) {
            return c.isZero() ? c.clone() : this.m.sub(c)._forceRed(this);
        }, Se.prototype.add = function(c, m) {
            this._verify2(c, m);
            var l = c.add(m);
            return l.cmp(this.m) >= 0 && l.isub(this.m), l._forceRed(this);
        }, Se.prototype.iadd = function(c, m) {
            this._verify2(c, m);
            var l = c.iadd(m);
            return l.cmp(this.m) >= 0 && l.isub(this.m), l;
        }, Se.prototype.sub = function(c, m) {
            this._verify2(c, m);
            var l = c.sub(m);
            return l.cmpn(0) < 0 && l.iadd(this.m), l._forceRed(this);
        }, Se.prototype.isub = function(c, m) {
            this._verify2(c, m);
            var l = c.isub(m);
            return l.cmpn(0) < 0 && l.iadd(this.m), l;
        }, Se.prototype.shl = function(c, m) {
            return this._verify1(c), this.imod(c.ushln(m));
        }, Se.prototype.imul = function(c, m) {
            return this._verify2(c, m), this.imod(c.imul(m));
        }, Se.prototype.mul = function(c, m) {
            return this._verify2(c, m), this.imod(c.mul(m));
        }, Se.prototype.isqr = function(c) {
            return this.imul(c, c.clone());
        }, Se.prototype.sqr = function(c) {
            return this.mul(c, c);
        }, Se.prototype.sqrt = function(c) {
            if (c.isZero()) return c.clone();
            var m = this.m.andln(3);
            if (r(m % 2 === 1), m === 3) {
                var l = this.m.add(new n(1)).iushrn(2);
                return this.pow(c, l);
            }
            for(var a = this.m.subn(1), h = 0; !a.isZero() && a.andln(1) === 0;)h++, a.iushrn(1);
            r(!a.isZero());
            var p = new n(1).toRed(this), y = p.redNeg(), b = this.m.subn(1).iushrn(1), s = this.m.bitLength();
            for(s = new n(2 * s * s).toRed(this); this.pow(s, b).cmp(y) !== 0;)s.redIAdd(y);
            for(var g = this.pow(s, a), w = this.pow(c, a.addn(1).iushrn(1)), d = this.pow(c, a), M = h; d.cmp(p) !== 0;){
                for(var k = d, T = 0; k.cmp(p) !== 0; T++)k = k.redSqr();
                r(T < M);
                var C = this.pow(g, new n(1).iushln(M - T - 1));
                w = w.redMul(C), g = C.redSqr(), d = d.redMul(g), M = T;
            }
            return w;
        }, Se.prototype.invm = function(c) {
            var m = c._invmp(this.m);
            return m.negative !== 0 ? (m.negative = 0, this.imod(m).redNeg()) : this.imod(m);
        }, Se.prototype.pow = function(c, m) {
            if (m.isZero()) return new n(1).toRed(this);
            if (m.cmpn(1) === 0) return c.clone();
            var l = 4, a = new Array(1 << l);
            a[0] = new n(1).toRed(this), a[1] = c;
            for(var h = 2; h < a.length; h++)a[h] = this.mul(a[h - 1], c);
            var p = a[0], y = 0, b = 0, s = m.bitLength() % 26;
            for(s === 0 && (s = 26), h = m.length - 1; h >= 0; h--){
                for(var g = m.words[h], w = s - 1; w >= 0; w--){
                    var d = g >> w & 1;
                    if (p !== a[0] && (p = this.sqr(p)), d === 0 && y === 0) {
                        b = 0;
                        continue;
                    }
                    y <<= 1, y |= d, b++, !(b !== l && (h !== 0 || w !== 0)) && (p = this.mul(p, a[y]), b = 0, y = 0);
                }
                s = 26;
            }
            return p;
        }, Se.prototype.convertTo = function(c) {
            var m = c.umod(this.m);
            return m === c ? m.clone() : m;
        }, Se.prototype.convertFrom = function(c) {
            var m = c.clone();
            return m.red = null, m;
        }, n.mont = function(c) {
            return new Fe(c);
        };
        function Fe(S) {
            Se.call(this, S), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new n(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
        }
        i(Fe, Se), Fe.prototype.convertTo = function(c) {
            return this.imod(c.ushln(this.shift));
        }, Fe.prototype.convertFrom = function(c) {
            var m = this.imod(c.mul(this.rinv));
            return m.red = null, m;
        }, Fe.prototype.imul = function(c, m) {
            if (c.isZero() || m.isZero()) return c.words[0] = 0, c.length = 1, c;
            var l = c.imul(m), a = l.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), h = l.isub(a).iushrn(this.shift), p = h;
            return h.cmp(this.m) >= 0 ? p = h.isub(this.m) : h.cmpn(0) < 0 && (p = h.iadd(this.m)), p._forceRed(this);
        }, Fe.prototype.mul = function(c, m) {
            if (c.isZero() || m.isZero()) return new n(0)._forceRed(this);
            var l = c.mul(m), a = l.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), h = l.isub(a).iushrn(this.shift), p = h;
            return h.cmp(this.m) >= 0 ? p = h.isub(this.m) : h.cmpn(0) < 0 && (p = h.iadd(this.m)), p._forceRed(this);
        }, Fe.prototype.invm = function(c) {
            var m = this.imod(c._invmp(this.m).mul(this.r2));
            return m._forceRed(this);
        };
    })(typeof Ao > "u" || Ao, wd);
});
var xd = q(()=>{});
var pa = q((Dy, Ro)=>{
    var Bo;
    Ro.exports = function(e) {
        return Bo || (Bo = new Sr(null)), Bo.generate(e);
    };
    function Sr(t) {
        this.rand = t;
    }
    Ro.exports.Rand = Sr;
    Sr.prototype.generate = function(e) {
        return this._rand(e);
    };
    Sr.prototype._rand = function(e) {
        if (this.rand.getBytes) return this.rand.getBytes(e);
        for(var r = new Uint8Array(e), i = 0; i < r.length; i++)r[i] = this.rand.getByte();
        return r;
    };
    if (typeof self == "object") self.crypto && self.crypto.getRandomValues ? Sr.prototype._rand = function(e) {
        var r = new Uint8Array(e);
        return self.crypto.getRandomValues(r), r;
    } : self.msCrypto && self.msCrypto.getRandomValues ? Sr.prototype._rand = function(e) {
        var r = new Uint8Array(e);
        return self.msCrypto.getRandomValues(r), r;
    } : typeof window == "object" && (Sr.prototype._rand = function() {
        throw new Error("Not implemented yet");
    });
    else try {
        if (qo = xd(), typeof qo.randomBytes != "function") throw new Error("Not supported");
        Sr.prototype._rand = function(e) {
            return qo.randomBytes(e);
        };
    } catch (t) {}
    var qo;
});
var Io = q((Ly, Md)=>{
    var ui = je(), e4 = pa();
    function di(t) {
        this.rand = t || new e4.Rand;
    }
    Md.exports = di;
    di.create = function(e) {
        return new di(e);
    };
    di.prototype._randbelow = function(e) {
        var r = e.bitLength(), i = Math.ceil(r / 8);
        do var n = new ui(this.rand.generate(i));
        while (n.cmp(e) >= 0);
        return n;
    };
    di.prototype._randrange = function(e, r) {
        var i = r.sub(e);
        return e.add(this._randbelow(i));
    };
    di.prototype.test = function(e, r, i) {
        var n = e.bitLength(), f = ui.mont(e), o = new ui(1).toRed(f);
        r || (r = Math.max(1, n / 48 | 0));
        for(var u = e.subn(1), v = 0; !u.testn(v); v++);
        for(var _ = e.shrn(v), x = u.toRed(f), E = !0; r > 0; r--){
            var A = this._randrange(new ui(2), u);
            i && i(A);
            var B = A.toRed(f).redPow(_);
            if (!(B.cmp(o) === 0 || B.cmp(x) === 0)) {
                for(var I = 1; I < v; I++){
                    if (B = B.redSqr(), B.cmp(o) === 0) return !1;
                    if (B.cmp(x) === 0) break;
                }
                if (I === v) return !1;
            }
        }
        return E;
    };
    di.prototype.getDivisor = function(e, r) {
        var i = e.bitLength(), n = ui.mont(e), f = new ui(1).toRed(n);
        r || (r = Math.max(1, i / 48 | 0));
        for(var o = e.subn(1), u = 0; !o.testn(u); u++);
        for(var v = e.shrn(u), _ = o.toRed(n); r > 0; r--){
            var x = this._randrange(new ui(2), o), E = e.gcd(x);
            if (E.cmpn(1) !== 0) return E;
            var A = x.toRed(n).redPow(v);
            if (!(A.cmp(f) === 0 || A.cmp(_) === 0)) {
                for(var B = 1; B < u; B++){
                    if (A = A.redSqr(), A.cmp(f) === 0) return A.fromRed().subn(1).gcd(e);
                    if (A.cmp(_) === 0) break;
                }
                if (B === u) return A = A.redSqr(), A.fromRed().subn(1).gcd(e);
            }
        }
        return !1;
    };
});
var Lo = q((zy, Ad)=>{
    var t4 = Jr();
    Ad.exports = Do;
    Do.simpleSieve = To;
    Do.fermatTest = Po;
    var Xe = je(), r4 = new Xe(24), i4 = Io(), Ed = new i4, n4 = new Xe(1), Co = new Xe(2), f4 = new Xe(5), Ny = new Xe(16), Oy = new Xe(8), a4 = new Xe(10), o4 = new Xe(3), Fy = new Xe(7), s4 = new Xe(11), Sd = new Xe(4), Uy = new Xe(12), ko = null;
    function h4() {
        if (ko !== null) return ko;
        var t = 1048576, e = [];
        e[0] = 2;
        for(var r = 1, i = 3; i < t; i += 2){
            for(var n = Math.ceil(Math.sqrt(i)), f = 0; f < r && e[f] <= n && i % e[f] !== 0; f++);
            r !== f && e[f] <= n || (e[r++] = i);
        }
        return ko = e, e;
    }
    function To(t) {
        for(var e = h4(), r = 0; r < e.length; r++)if (t.modn(e[r]) === 0) return t.cmpn(e[r]) === 0;
        return !0;
    }
    function Po(t) {
        var e = Xe.mont(t);
        return Co.toRed(e).redPow(t.subn(1)).fromRed().cmpn(1) === 0;
    }
    function Do(t, e) {
        if (t < 16) return e === 2 || e === 5 ? new Xe([
            140,
            123
        ]) : new Xe([
            140,
            39
        ]);
        e = new Xe(e);
        for(var r, i;;){
            for(r = new Xe(t4(Math.ceil(t / 8))); r.bitLength() > t;)r.ishrn(1);
            if (r.isEven() && r.iadd(n4), r.testn(1) || r.iadd(Co), e.cmp(Co)) {
                if (!e.cmp(f4)) for(; r.mod(a4).cmp(o4);)r.iadd(Sd);
            } else for(; r.mod(r4).cmp(s4);)r.iadd(Sd);
            if (i = r.shrn(1), To(i) && To(r) && Po(i) && Po(r) && Ed.test(i) && Ed.test(r)) return r;
        }
    }
});
var Bd = q((Hy, c4)=>{
    c4.exports = {
        modp1: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
        },
        modp2: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
        },
        modp5: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
        },
        modp14: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
        },
        modp15: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
        },
        modp16: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
        },
        modp17: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
        },
        modp18: {
            gen: "02",
            prime: "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
        }
    };
});
var kd = q((jy, Id)=>{
    var wt = je(), u4 = Io(), qd = new u4, d4 = new wt(24), l4 = new wt(11), p4 = new wt(10), b4 = new wt(3), v4 = new wt(7), Rd = Lo(), y4 = Jr();
    Id.exports = cr;
    function m4(t, e) {
        return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this._pub = new wt(t), this;
    }
    function g4(t, e) {
        return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this._priv = new wt(t), this;
    }
    var ba = {};
    function _4(t, e) {
        var r = e.toString("hex"), i = [
            r,
            t.toString(16)
        ].join("_");
        if (i in ba) return ba[i];
        var n = 0;
        if (t.isEven() || !Rd.simpleSieve || !Rd.fermatTest(t) || !qd.test(t)) return n += 1, r === "02" || r === "05" ? n += 8 : n += 4, ba[i] = n, n;
        qd.test(t.shrn(1)) || (n += 2);
        var f;
        switch(r){
            case "02":
                t.mod(d4).cmp(l4) && (n += 8);
                break;
            case "05":
                f = t.mod(p4), f.cmp(b4) && f.cmp(v4) && (n += 8);
                break;
            default:
                n += 4;
        }
        return ba[i] = n, n;
    }
    function cr(t, e, r) {
        this.setGenerator(e), this.__prime = new wt(t), this._prime = wt.mont(this.__prime), this._primeLen = t.length, this._pub = void 0, this._priv = void 0, this._primeCode = void 0, r ? (this.setPublicKey = m4, this.setPrivateKey = g4) : this._primeCode = 8;
    }
    Object.defineProperty(cr.prototype, "verifyError", {
        enumerable: !0,
        get: function() {
            return typeof this._primeCode != "number" && (this._primeCode = _4(this.__prime, this.__gen)), this._primeCode;
        }
    });
    cr.prototype.generateKeys = function() {
        return this._priv || (this._priv = new wt(y4(this._primeLen))), this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed(), this.getPublicKey();
    };
    cr.prototype.computeSecret = function(t) {
        t = new wt(t), t = t.toRed(this._prime);
        var e = t.redPow(this._priv).fromRed(), r = new Buffer(e.toArray()), i = this.getPrime();
        if (r.length < i.length) {
            var n = new Buffer(i.length - r.length);
            n.fill(0), r = Buffer.concat([
                n,
                r
            ]);
        }
        return r;
    };
    cr.prototype.getPublicKey = function(e) {
        return va(this._pub, e);
    };
    cr.prototype.getPrivateKey = function(e) {
        return va(this._priv, e);
    };
    cr.prototype.getPrime = function(t) {
        return va(this.__prime, t);
    };
    cr.prototype.getGenerator = function(t) {
        return va(this._gen, t);
    };
    cr.prototype.setGenerator = function(t, e) {
        return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this.__gen = t, this._gen = new wt(t), this;
    };
    function va(t, e) {
        var r = new Buffer(t.toArray());
        return e ? r.toString(e) : r;
    }
});
var Pd = q((Ui)=>{
    var w4 = Lo(), Cd = Bd(), No = kd();
    function x4(t) {
        var e = new Buffer(Cd[t].prime, "hex"), r = new Buffer(Cd[t].gen, "hex");
        return new No(e, r);
    }
    var M4 = {
        binary: !0,
        hex: !0,
        base64: !0
    };
    function Td(t, e, r, i) {
        return Buffer.isBuffer(e) || M4[e] === void 0 ? Td(t, "binary", e, r) : (e = e || "binary", i = i || "binary", r = r || new Buffer([
            2
        ]), Buffer.isBuffer(r) || (r = new Buffer(r, i)), typeof t == "number" ? new No(w4(t, r), r, !0) : (Buffer.isBuffer(t) || (t = new Buffer(t, e)), new No(t, r, !0)));
    }
    Ui.DiffieHellmanGroup = Ui.createDiffieHellmanGroup = Ui.getDiffieHellman = x4;
    Ui.createDiffieHellman = Ui.DiffieHellman = Td;
});
var ya = q((Dd, Oo)=>{
    (function(t, e) {
        "use strict";
        function r(l, a) {
            if (!l) throw new Error(a || "Assertion failed");
        }
        function i(l, a) {
            l.super_ = a;
            var h = function() {};
            h.prototype = a.prototype, l.prototype = new h, l.prototype.constructor = l;
        }
        function n(l, a, h) {
            if (n.isBN(l)) return l;
            this.negative = 0, this.words = null, this.length = 0, this.red = null, l !== null && ((a === "le" || a === "be") && (h = a, a = 10), this._init(l || 0, a || 10, h || "be"));
        }
        typeof t == "object" ? t.exports = n : e.BN = n, n.BN = n, n.wordSize = 26;
        var f;
        try {
            typeof window < "u" && typeof window.Buffer < "u" ? f = window.Buffer : f = So().Buffer;
        } catch (l) {}
        n.isBN = function(a) {
            return a instanceof n ? !0 : a !== null && typeof a == "object" && a.constructor.wordSize === n.wordSize && Array.isArray(a.words);
        }, n.max = function(a, h) {
            return a.cmp(h) > 0 ? a : h;
        }, n.min = function(a, h) {
            return a.cmp(h) < 0 ? a : h;
        }, n.prototype._init = function(a, h, p) {
            if (typeof a == "number") return this._initNumber(a, h, p);
            if (typeof a == "object") return this._initArray(a, h, p);
            h === "hex" && (h = 16), r(h === (h | 0) && h >= 2 && h <= 36), a = a.toString().replace(/\s+/g, "");
            var y = 0;
            a[0] === "-" && (y++, this.negative = 1), y < a.length && (h === 16 ? this._parseHex(a, y, p) : (this._parseBase(a, h, y), p === "le" && this._initArray(this.toArray(), h, p)));
        }, n.prototype._initNumber = function(a, h, p) {
            a < 0 && (this.negative = 1, a = -a), a < 67108864 ? (this.words = [
                a & 67108863
            ], this.length = 1) : a < 4503599627370496 ? (this.words = [
                a & 67108863,
                a / 67108864 & 67108863
            ], this.length = 2) : (r(a < 9007199254740992), this.words = [
                a & 67108863,
                a / 67108864 & 67108863,
                1
            ], this.length = 3), p === "le" && this._initArray(this.toArray(), h, p);
        }, n.prototype._initArray = function(a, h, p) {
            if (r(typeof a.length == "number"), a.length <= 0) return this.words = [
                0
            ], this.length = 1, this;
            this.length = Math.ceil(a.length / 3), this.words = new Array(this.length);
            for(var y = 0; y < this.length; y++)this.words[y] = 0;
            var b, s, g = 0;
            if (p === "be") for(y = a.length - 1, b = 0; y >= 0; y -= 3)s = a[y] | a[y - 1] << 8 | a[y - 2] << 16, this.words[b] |= s << g & 67108863, this.words[b + 1] = s >>> 26 - g & 67108863, g += 24, g >= 26 && (g -= 26, b++);
            else if (p === "le") for(y = 0, b = 0; y < a.length; y += 3)s = a[y] | a[y + 1] << 8 | a[y + 2] << 16, this.words[b] |= s << g & 67108863, this.words[b + 1] = s >>> 26 - g & 67108863, g += 24, g >= 26 && (g -= 26, b++);
            return this._strip();
        };
        function o(l, a) {
            var h = l.charCodeAt(a);
            if (h >= 48 && h <= 57) return h - 48;
            if (h >= 65 && h <= 70) return h - 55;
            if (h >= 97 && h <= 102) return h - 87;
            r(!1, "Invalid character in " + l);
        }
        function u(l, a, h) {
            var p = o(l, h);
            return h - 1 >= a && (p |= o(l, h - 1) << 4), p;
        }
        n.prototype._parseHex = function(a, h, p) {
            this.length = Math.ceil((a.length - h) / 6), this.words = new Array(this.length);
            for(var y = 0; y < this.length; y++)this.words[y] = 0;
            var b = 0, s = 0, g;
            if (p === "be") for(y = a.length - 1; y >= h; y -= 2)g = u(a, h, y) << b, this.words[s] |= g & 67108863, b >= 18 ? (b -= 18, s += 1, this.words[s] |= g >>> 26) : b += 8;
            else {
                var w = a.length - h;
                for(y = w % 2 === 0 ? h + 1 : h; y < a.length; y += 2)g = u(a, h, y) << b, this.words[s] |= g & 67108863, b >= 18 ? (b -= 18, s += 1, this.words[s] |= g >>> 26) : b += 8;
            }
            this._strip();
        };
        function v(l, a, h, p) {
            for(var y = 0, b = 0, s = Math.min(l.length, h), g = a; g < s; g++){
                var w = l.charCodeAt(g) - 48;
                y *= p, w >= 49 ? b = w - 49 + 10 : w >= 17 ? b = w - 17 + 10 : b = w, r(w >= 0 && b < p, "Invalid character"), y += b;
            }
            return y;
        }
        n.prototype._parseBase = function(a, h, p) {
            this.words = [
                0
            ], this.length = 1;
            for(var y = 0, b = 1; b <= 67108863; b *= h)y++;
            y--, b = b / h | 0;
            for(var s = a.length - p, g = s % y, w = Math.min(s, s - g) + p, d = 0, M = p; M < w; M += y)d = v(a, M, M + y, h), this.imuln(b), this.words[0] + d < 67108864 ? this.words[0] += d : this._iaddn(d);
            if (g !== 0) {
                var k = 1;
                for(d = v(a, M, a.length, h), M = 0; M < g; M++)k *= h;
                this.imuln(k), this.words[0] + d < 67108864 ? this.words[0] += d : this._iaddn(d);
            }
            this._strip();
        }, n.prototype.copy = function(a) {
            a.words = new Array(this.length);
            for(var h = 0; h < this.length; h++)a.words[h] = this.words[h];
            a.length = this.length, a.negative = this.negative, a.red = this.red;
        };
        function _(l, a) {
            l.words = a.words, l.length = a.length, l.negative = a.negative, l.red = a.red;
        }
        if (n.prototype._move = function(a) {
            _(a, this);
        }, n.prototype.clone = function() {
            var a = new n(null);
            return this.copy(a), a;
        }, n.prototype._expand = function(a) {
            for(; this.length < a;)this.words[this.length++] = 0;
            return this;
        }, n.prototype._strip = function() {
            for(; this.length > 1 && this.words[this.length - 1] === 0;)this.length--;
            return this._normSign();
        }, n.prototype._normSign = function() {
            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
        }, typeof Symbol < "u" && typeof Symbol.for == "function") try {
            n.prototype[Symbol.for("nodejs.util.inspect.custom")] = x;
        } catch (l) {
            n.prototype.inspect = x;
        }
        else n.prototype.inspect = x;
        function x() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var E = [
            "",
            "0",
            "00",
            "000",
            "0000",
            "00000",
            "000000",
            "0000000",
            "00000000",
            "000000000",
            "0000000000",
            "00000000000",
            "000000000000",
            "0000000000000",
            "00000000000000",
            "000000000000000",
            "0000000000000000",
            "00000000000000000",
            "000000000000000000",
            "0000000000000000000",
            "00000000000000000000",
            "000000000000000000000",
            "0000000000000000000000",
            "00000000000000000000000",
            "000000000000000000000000",
            "0000000000000000000000000"
        ], A = [
            0,
            0,
            25,
            16,
            12,
            11,
            10,
            9,
            8,
            8,
            7,
            7,
            7,
            7,
            6,
            6,
            6,
            6,
            6,
            6,
            6,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
        ], B = [
            0,
            0,
            33554432,
            43046721,
            16777216,
            48828125,
            60466176,
            40353607,
            16777216,
            43046721,
            1e7,
            19487171,
            35831808,
            62748517,
            7529536,
            11390625,
            16777216,
            24137569,
            34012224,
            47045881,
            64e6,
            4084101,
            5153632,
            6436343,
            7962624,
            9765625,
            11881376,
            14348907,
            17210368,
            20511149,
            243e5,
            28629151,
            33554432,
            39135393,
            45435424,
            52521875,
            60466176
        ];
        n.prototype.toString = function(a, h) {
            a = a || 10, h = h | 0 || 1;
            var p;
            if (a === 16 || a === "hex") {
                p = "";
                for(var y = 0, b = 0, s = 0; s < this.length; s++){
                    var g = this.words[s], w = ((g << y | b) & 16777215).toString(16);
                    b = g >>> 24 - y & 16777215, y += 2, y >= 26 && (y -= 26, s--), b !== 0 || s !== this.length - 1 ? p = E[6 - w.length] + w + p : p = w + p;
                }
                for(b !== 0 && (p = b.toString(16) + p); p.length % h !== 0;)p = "0" + p;
                return this.negative !== 0 && (p = "-" + p), p;
            }
            if (a === (a | 0) && a >= 2 && a <= 36) {
                var d = A[a], M = B[a];
                p = "";
                var k = this.clone();
                for(k.negative = 0; !k.isZero();){
                    var T = k.modrn(M).toString(a);
                    k = k.idivn(M), k.isZero() ? p = T + p : p = E[d - T.length] + T + p;
                }
                for(this.isZero() && (p = "0" + p); p.length % h !== 0;)p = "0" + p;
                return this.negative !== 0 && (p = "-" + p), p;
            }
            r(!1, "Base should be between 2 and 36");
        }, n.prototype.toNumber = function() {
            var a = this.words[0];
            return this.length === 2 ? a += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? a += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && r(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -a : a;
        }, n.prototype.toJSON = function() {
            return this.toString(16, 2);
        }, f && (n.prototype.toBuffer = function(a, h) {
            return this.toArrayLike(f, a, h);
        }), n.prototype.toArray = function(a, h) {
            return this.toArrayLike(Array, a, h);
        };
        var I = function(a, h) {
            return a.allocUnsafe ? a.allocUnsafe(h) : new a(h);
        };
        n.prototype.toArrayLike = function(a, h, p) {
            this._strip();
            var y = this.byteLength(), b = p || Math.max(1, y);
            r(y <= b, "byte array longer than desired length"), r(b > 0, "Requested array length <= 0");
            var s = I(a, b), g = h === "le" ? "LE" : "BE";
            return this["_toArrayLike" + g](s, y), s;
        }, n.prototype._toArrayLikeLE = function(a, h) {
            for(var p = 0, y = 0, b = 0, s = 0; b < this.length; b++){
                var g = this.words[b] << s | y;
                a[p++] = g & 255, p < a.length && (a[p++] = g >> 8 & 255), p < a.length && (a[p++] = g >> 16 & 255), s === 6 ? (p < a.length && (a[p++] = g >> 24 & 255), y = 0, s = 0) : (y = g >>> 24, s += 2);
            }
            if (p < a.length) for(a[p++] = y; p < a.length;)a[p++] = 0;
        }, n.prototype._toArrayLikeBE = function(a, h) {
            for(var p = a.length - 1, y = 0, b = 0, s = 0; b < this.length; b++){
                var g = this.words[b] << s | y;
                a[p--] = g & 255, p >= 0 && (a[p--] = g >> 8 & 255), p >= 0 && (a[p--] = g >> 16 & 255), s === 6 ? (p >= 0 && (a[p--] = g >> 24 & 255), y = 0, s = 0) : (y = g >>> 24, s += 2);
            }
            if (p >= 0) for(a[p--] = y; p >= 0;)a[p--] = 0;
        }, Math.clz32 ? n.prototype._countBits = function(a) {
            return 32 - Math.clz32(a);
        } : n.prototype._countBits = function(a) {
            var h = a, p = 0;
            return h >= 4096 && (p += 13, h >>>= 13), h >= 64 && (p += 7, h >>>= 7), h >= 8 && (p += 4, h >>>= 4), h >= 2 && (p += 2, h >>>= 2), p + h;
        }, n.prototype._zeroBits = function(a) {
            if (a === 0) return 26;
            var h = a, p = 0;
            return h & 8191 || (p += 13, h >>>= 13), h & 127 || (p += 7, h >>>= 7), h & 15 || (p += 4, h >>>= 4), h & 3 || (p += 2, h >>>= 2), h & 1 || p++, p;
        }, n.prototype.bitLength = function() {
            var a = this.words[this.length - 1], h = this._countBits(a);
            return (this.length - 1) * 26 + h;
        };
        function P(l) {
            for(var a = new Array(l.bitLength()), h = 0; h < a.length; h++){
                var p = h / 26 | 0, y = h % 26;
                a[h] = l.words[p] >>> y & 1;
            }
            return a;
        }
        n.prototype.zeroBits = function() {
            if (this.isZero()) return 0;
            for(var a = 0, h = 0; h < this.length; h++){
                var p = this._zeroBits(this.words[h]);
                if (a += p, p !== 26) break;
            }
            return a;
        }, n.prototype.byteLength = function() {
            return Math.ceil(this.bitLength() / 8);
        }, n.prototype.toTwos = function(a) {
            return this.negative !== 0 ? this.abs().inotn(a).iaddn(1) : this.clone();
        }, n.prototype.fromTwos = function(a) {
            return this.testn(a - 1) ? this.notn(a).iaddn(1).ineg() : this.clone();
        }, n.prototype.isNeg = function() {
            return this.negative !== 0;
        }, n.prototype.neg = function() {
            return this.clone().ineg();
        }, n.prototype.ineg = function() {
            return this.isZero() || (this.negative ^= 1), this;
        }, n.prototype.iuor = function(a) {
            for(; this.length < a.length;)this.words[this.length++] = 0;
            for(var h = 0; h < a.length; h++)this.words[h] = this.words[h] | a.words[h];
            return this._strip();
        }, n.prototype.ior = function(a) {
            return r((this.negative | a.negative) === 0), this.iuor(a);
        }, n.prototype.or = function(a) {
            return this.length > a.length ? this.clone().ior(a) : a.clone().ior(this);
        }, n.prototype.uor = function(a) {
            return this.length > a.length ? this.clone().iuor(a) : a.clone().iuor(this);
        }, n.prototype.iuand = function(a) {
            var h;
            this.length > a.length ? h = a : h = this;
            for(var p = 0; p < h.length; p++)this.words[p] = this.words[p] & a.words[p];
            return this.length = h.length, this._strip();
        }, n.prototype.iand = function(a) {
            return r((this.negative | a.negative) === 0), this.iuand(a);
        }, n.prototype.and = function(a) {
            return this.length > a.length ? this.clone().iand(a) : a.clone().iand(this);
        }, n.prototype.uand = function(a) {
            return this.length > a.length ? this.clone().iuand(a) : a.clone().iuand(this);
        }, n.prototype.iuxor = function(a) {
            var h, p;
            this.length > a.length ? (h = this, p = a) : (h = a, p = this);
            for(var y = 0; y < p.length; y++)this.words[y] = h.words[y] ^ p.words[y];
            if (this !== h) for(; y < h.length; y++)this.words[y] = h.words[y];
            return this.length = h.length, this._strip();
        }, n.prototype.ixor = function(a) {
            return r((this.negative | a.negative) === 0), this.iuxor(a);
        }, n.prototype.xor = function(a) {
            return this.length > a.length ? this.clone().ixor(a) : a.clone().ixor(this);
        }, n.prototype.uxor = function(a) {
            return this.length > a.length ? this.clone().iuxor(a) : a.clone().iuxor(this);
        }, n.prototype.inotn = function(a) {
            r(typeof a == "number" && a >= 0);
            var h = Math.ceil(a / 26) | 0, p = a % 26;
            this._expand(h), p > 0 && h--;
            for(var y = 0; y < h; y++)this.words[y] = ~this.words[y] & 67108863;
            return p > 0 && (this.words[y] = ~this.words[y] & 67108863 >> 26 - p), this._strip();
        }, n.prototype.notn = function(a) {
            return this.clone().inotn(a);
        }, n.prototype.setn = function(a, h) {
            r(typeof a == "number" && a >= 0);
            var p = a / 26 | 0, y = a % 26;
            return this._expand(p + 1), h ? this.words[p] = this.words[p] | 1 << y : this.words[p] = this.words[p] & ~(1 << y), this._strip();
        }, n.prototype.iadd = function(a) {
            var h;
            if (this.negative !== 0 && a.negative === 0) return this.negative = 0, h = this.isub(a), this.negative ^= 1, this._normSign();
            if (this.negative === 0 && a.negative !== 0) return a.negative = 0, h = this.isub(a), a.negative = 1, h._normSign();
            var p, y;
            this.length > a.length ? (p = this, y = a) : (p = a, y = this);
            for(var b = 0, s = 0; s < y.length; s++)h = (p.words[s] | 0) + (y.words[s] | 0) + b, this.words[s] = h & 67108863, b = h >>> 26;
            for(; b !== 0 && s < p.length; s++)h = (p.words[s] | 0) + b, this.words[s] = h & 67108863, b = h >>> 26;
            if (this.length = p.length, b !== 0) this.words[this.length] = b, this.length++;
            else if (p !== this) for(; s < p.length; s++)this.words[s] = p.words[s];
            return this;
        }, n.prototype.add = function(a) {
            var h;
            return a.negative !== 0 && this.negative === 0 ? (a.negative = 0, h = this.sub(a), a.negative ^= 1, h) : a.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = a.sub(this), this.negative = 1, h) : this.length > a.length ? this.clone().iadd(a) : a.clone().iadd(this);
        }, n.prototype.isub = function(a) {
            if (a.negative !== 0) {
                a.negative = 0;
                var h = this.iadd(a);
                return a.negative = 1, h._normSign();
            } else if (this.negative !== 0) return this.negative = 0, this.iadd(a), this.negative = 1, this._normSign();
            var p = this.cmp(a);
            if (p === 0) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
            var y, b;
            p > 0 ? (y = this, b = a) : (y = a, b = this);
            for(var s = 0, g = 0; g < b.length; g++)h = (y.words[g] | 0) - (b.words[g] | 0) + s, s = h >> 26, this.words[g] = h & 67108863;
            for(; s !== 0 && g < y.length; g++)h = (y.words[g] | 0) + s, s = h >> 26, this.words[g] = h & 67108863;
            if (s === 0 && g < y.length && y !== this) for(; g < y.length; g++)this.words[g] = y.words[g];
            return this.length = Math.max(this.length, g), y !== this && (this.negative = 1), this._strip();
        }, n.prototype.sub = function(a) {
            return this.clone().isub(a);
        };
        function F(l, a, h) {
            h.negative = a.negative ^ l.negative;
            var p = l.length + a.length | 0;
            h.length = p, p = p - 1 | 0;
            var y = l.words[0] | 0, b = a.words[0] | 0, s = y * b, g = s & 67108863, w = s / 67108864 | 0;
            h.words[0] = g;
            for(var d = 1; d < p; d++){
                for(var M = w >>> 26, k = w & 67108863, T = Math.min(d, a.length - 1), C = Math.max(0, d - l.length + 1); C <= T; C++){
                    var N = d - C | 0;
                    y = l.words[N] | 0, b = a.words[C] | 0, s = y * b + k, M += s / 67108864 | 0, k = s & 67108863;
                }
                h.words[d] = k | 0, w = M | 0;
            }
            return w !== 0 ? h.words[d] = w | 0 : h.length--, h._strip();
        }
        var D = function(a, h, p) {
            var y = a.words, b = h.words, s = p.words, g = 0, w, d, M, k = y[0] | 0, T = k & 8191, C = k >>> 13, N = y[1] | 0, L = N & 8191, O = N >>> 13, It = y[2] | 0, U = It & 8191, H = It >>> 13, hn = y[3] | 0, j = hn & 8191, K = hn >>> 13, cn = y[4] | 0, W = cn & 8191, V = cn >>> 13, un = y[5] | 0, G = un & 8191, Z = un >>> 13, dn = y[6] | 0, X = dn & 8191, Y = dn >>> 13, ln = y[7] | 0, J = ln & 8191, $ = ln >>> 13, pn = y[8] | 0, Q = pn & 8191, ee = pn >>> 13, bn = y[9] | 0, te = bn & 8191, re = bn >>> 13, vn = b[0] | 0, ie = vn & 8191, ne = vn >>> 13, yn = b[1] | 0, fe = yn & 8191, ae = yn >>> 13, mn = b[2] | 0, oe = mn & 8191, se = mn >>> 13, gn = b[3] | 0, he = gn & 8191, ce = gn >>> 13, _n = b[4] | 0, ue = _n & 8191, de = _n >>> 13, wn = b[5] | 0, le = wn & 8191, pe = wn >>> 13, xn = b[6] | 0, be = xn & 8191, ve = xn >>> 13, Mn = b[7] | 0, ye = Mn & 8191, me = Mn >>> 13, En = b[8] | 0, ge = En & 8191, _e = En >>> 13, Ei = b[9] | 0, De = Ei & 8191, Le = Ei >>> 13;
            p.negative = a.negative ^ h.negative, p.length = 19, w = Math.imul(T, ie), d = Math.imul(T, ne), d = d + Math.imul(C, ie) | 0, M = Math.imul(C, ne);
            var kr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (kr >>> 26) | 0, kr &= 67108863, w = Math.imul(L, ie), d = Math.imul(L, ne), d = d + Math.imul(O, ie) | 0, M = Math.imul(O, ne), w = w + Math.imul(T, fe) | 0, d = d + Math.imul(T, ae) | 0, d = d + Math.imul(C, fe) | 0, M = M + Math.imul(C, ae) | 0;
            var Cr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Cr >>> 26) | 0, Cr &= 67108863, w = Math.imul(U, ie), d = Math.imul(U, ne), d = d + Math.imul(H, ie) | 0, M = Math.imul(H, ne), w = w + Math.imul(L, fe) | 0, d = d + Math.imul(L, ae) | 0, d = d + Math.imul(O, fe) | 0, M = M + Math.imul(O, ae) | 0, w = w + Math.imul(T, oe) | 0, d = d + Math.imul(T, se) | 0, d = d + Math.imul(C, oe) | 0, M = M + Math.imul(C, se) | 0;
            var Tr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Tr >>> 26) | 0, Tr &= 67108863, w = Math.imul(j, ie), d = Math.imul(j, ne), d = d + Math.imul(K, ie) | 0, M = Math.imul(K, ne), w = w + Math.imul(U, fe) | 0, d = d + Math.imul(U, ae) | 0, d = d + Math.imul(H, fe) | 0, M = M + Math.imul(H, ae) | 0, w = w + Math.imul(L, oe) | 0, d = d + Math.imul(L, se) | 0, d = d + Math.imul(O, oe) | 0, M = M + Math.imul(O, se) | 0, w = w + Math.imul(T, he) | 0, d = d + Math.imul(T, ce) | 0, d = d + Math.imul(C, he) | 0, M = M + Math.imul(C, ce) | 0;
            var Pr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Pr >>> 26) | 0, Pr &= 67108863, w = Math.imul(W, ie), d = Math.imul(W, ne), d = d + Math.imul(V, ie) | 0, M = Math.imul(V, ne), w = w + Math.imul(j, fe) | 0, d = d + Math.imul(j, ae) | 0, d = d + Math.imul(K, fe) | 0, M = M + Math.imul(K, ae) | 0, w = w + Math.imul(U, oe) | 0, d = d + Math.imul(U, se) | 0, d = d + Math.imul(H, oe) | 0, M = M + Math.imul(H, se) | 0, w = w + Math.imul(L, he) | 0, d = d + Math.imul(L, ce) | 0, d = d + Math.imul(O, he) | 0, M = M + Math.imul(O, ce) | 0, w = w + Math.imul(T, ue) | 0, d = d + Math.imul(T, de) | 0, d = d + Math.imul(C, ue) | 0, M = M + Math.imul(C, de) | 0;
            var Dr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Dr >>> 26) | 0, Dr &= 67108863, w = Math.imul(G, ie), d = Math.imul(G, ne), d = d + Math.imul(Z, ie) | 0, M = Math.imul(Z, ne), w = w + Math.imul(W, fe) | 0, d = d + Math.imul(W, ae) | 0, d = d + Math.imul(V, fe) | 0, M = M + Math.imul(V, ae) | 0, w = w + Math.imul(j, oe) | 0, d = d + Math.imul(j, se) | 0, d = d + Math.imul(K, oe) | 0, M = M + Math.imul(K, se) | 0, w = w + Math.imul(U, he) | 0, d = d + Math.imul(U, ce) | 0, d = d + Math.imul(H, he) | 0, M = M + Math.imul(H, ce) | 0, w = w + Math.imul(L, ue) | 0, d = d + Math.imul(L, de) | 0, d = d + Math.imul(O, ue) | 0, M = M + Math.imul(O, de) | 0, w = w + Math.imul(T, le) | 0, d = d + Math.imul(T, pe) | 0, d = d + Math.imul(C, le) | 0, M = M + Math.imul(C, pe) | 0;
            var Lr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Lr >>> 26) | 0, Lr &= 67108863, w = Math.imul(X, ie), d = Math.imul(X, ne), d = d + Math.imul(Y, ie) | 0, M = Math.imul(Y, ne), w = w + Math.imul(G, fe) | 0, d = d + Math.imul(G, ae) | 0, d = d + Math.imul(Z, fe) | 0, M = M + Math.imul(Z, ae) | 0, w = w + Math.imul(W, oe) | 0, d = d + Math.imul(W, se) | 0, d = d + Math.imul(V, oe) | 0, M = M + Math.imul(V, se) | 0, w = w + Math.imul(j, he) | 0, d = d + Math.imul(j, ce) | 0, d = d + Math.imul(K, he) | 0, M = M + Math.imul(K, ce) | 0, w = w + Math.imul(U, ue) | 0, d = d + Math.imul(U, de) | 0, d = d + Math.imul(H, ue) | 0, M = M + Math.imul(H, de) | 0, w = w + Math.imul(L, le) | 0, d = d + Math.imul(L, pe) | 0, d = d + Math.imul(O, le) | 0, M = M + Math.imul(O, pe) | 0, w = w + Math.imul(T, be) | 0, d = d + Math.imul(T, ve) | 0, d = d + Math.imul(C, be) | 0, M = M + Math.imul(C, ve) | 0;
            var Nr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Nr >>> 26) | 0, Nr &= 67108863, w = Math.imul(J, ie), d = Math.imul(J, ne), d = d + Math.imul($, ie) | 0, M = Math.imul($, ne), w = w + Math.imul(X, fe) | 0, d = d + Math.imul(X, ae) | 0, d = d + Math.imul(Y, fe) | 0, M = M + Math.imul(Y, ae) | 0, w = w + Math.imul(G, oe) | 0, d = d + Math.imul(G, se) | 0, d = d + Math.imul(Z, oe) | 0, M = M + Math.imul(Z, se) | 0, w = w + Math.imul(W, he) | 0, d = d + Math.imul(W, ce) | 0, d = d + Math.imul(V, he) | 0, M = M + Math.imul(V, ce) | 0, w = w + Math.imul(j, ue) | 0, d = d + Math.imul(j, de) | 0, d = d + Math.imul(K, ue) | 0, M = M + Math.imul(K, de) | 0, w = w + Math.imul(U, le) | 0, d = d + Math.imul(U, pe) | 0, d = d + Math.imul(H, le) | 0, M = M + Math.imul(H, pe) | 0, w = w + Math.imul(L, be) | 0, d = d + Math.imul(L, ve) | 0, d = d + Math.imul(O, be) | 0, M = M + Math.imul(O, ve) | 0, w = w + Math.imul(T, ye) | 0, d = d + Math.imul(T, me) | 0, d = d + Math.imul(C, ye) | 0, M = M + Math.imul(C, me) | 0;
            var Or = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Or >>> 26) | 0, Or &= 67108863, w = Math.imul(Q, ie), d = Math.imul(Q, ne), d = d + Math.imul(ee, ie) | 0, M = Math.imul(ee, ne), w = w + Math.imul(J, fe) | 0, d = d + Math.imul(J, ae) | 0, d = d + Math.imul($, fe) | 0, M = M + Math.imul($, ae) | 0, w = w + Math.imul(X, oe) | 0, d = d + Math.imul(X, se) | 0, d = d + Math.imul(Y, oe) | 0, M = M + Math.imul(Y, se) | 0, w = w + Math.imul(G, he) | 0, d = d + Math.imul(G, ce) | 0, d = d + Math.imul(Z, he) | 0, M = M + Math.imul(Z, ce) | 0, w = w + Math.imul(W, ue) | 0, d = d + Math.imul(W, de) | 0, d = d + Math.imul(V, ue) | 0, M = M + Math.imul(V, de) | 0, w = w + Math.imul(j, le) | 0, d = d + Math.imul(j, pe) | 0, d = d + Math.imul(K, le) | 0, M = M + Math.imul(K, pe) | 0, w = w + Math.imul(U, be) | 0, d = d + Math.imul(U, ve) | 0, d = d + Math.imul(H, be) | 0, M = M + Math.imul(H, ve) | 0, w = w + Math.imul(L, ye) | 0, d = d + Math.imul(L, me) | 0, d = d + Math.imul(O, ye) | 0, M = M + Math.imul(O, me) | 0, w = w + Math.imul(T, ge) | 0, d = d + Math.imul(T, _e) | 0, d = d + Math.imul(C, ge) | 0, M = M + Math.imul(C, _e) | 0;
            var Fr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Fr >>> 26) | 0, Fr &= 67108863, w = Math.imul(te, ie), d = Math.imul(te, ne), d = d + Math.imul(re, ie) | 0, M = Math.imul(re, ne), w = w + Math.imul(Q, fe) | 0, d = d + Math.imul(Q, ae) | 0, d = d + Math.imul(ee, fe) | 0, M = M + Math.imul(ee, ae) | 0, w = w + Math.imul(J, oe) | 0, d = d + Math.imul(J, se) | 0, d = d + Math.imul($, oe) | 0, M = M + Math.imul($, se) | 0, w = w + Math.imul(X, he) | 0, d = d + Math.imul(X, ce) | 0, d = d + Math.imul(Y, he) | 0, M = M + Math.imul(Y, ce) | 0, w = w + Math.imul(G, ue) | 0, d = d + Math.imul(G, de) | 0, d = d + Math.imul(Z, ue) | 0, M = M + Math.imul(Z, de) | 0, w = w + Math.imul(W, le) | 0, d = d + Math.imul(W, pe) | 0, d = d + Math.imul(V, le) | 0, M = M + Math.imul(V, pe) | 0, w = w + Math.imul(j, be) | 0, d = d + Math.imul(j, ve) | 0, d = d + Math.imul(K, be) | 0, M = M + Math.imul(K, ve) | 0, w = w + Math.imul(U, ye) | 0, d = d + Math.imul(U, me) | 0, d = d + Math.imul(H, ye) | 0, M = M + Math.imul(H, me) | 0, w = w + Math.imul(L, ge) | 0, d = d + Math.imul(L, _e) | 0, d = d + Math.imul(O, ge) | 0, M = M + Math.imul(O, _e) | 0, w = w + Math.imul(T, De) | 0, d = d + Math.imul(T, Le) | 0, d = d + Math.imul(C, De) | 0, M = M + Math.imul(C, Le) | 0;
            var Ur = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Ur >>> 26) | 0, Ur &= 67108863, w = Math.imul(te, fe), d = Math.imul(te, ae), d = d + Math.imul(re, fe) | 0, M = Math.imul(re, ae), w = w + Math.imul(Q, oe) | 0, d = d + Math.imul(Q, se) | 0, d = d + Math.imul(ee, oe) | 0, M = M + Math.imul(ee, se) | 0, w = w + Math.imul(J, he) | 0, d = d + Math.imul(J, ce) | 0, d = d + Math.imul($, he) | 0, M = M + Math.imul($, ce) | 0, w = w + Math.imul(X, ue) | 0, d = d + Math.imul(X, de) | 0, d = d + Math.imul(Y, ue) | 0, M = M + Math.imul(Y, de) | 0, w = w + Math.imul(G, le) | 0, d = d + Math.imul(G, pe) | 0, d = d + Math.imul(Z, le) | 0, M = M + Math.imul(Z, pe) | 0, w = w + Math.imul(W, be) | 0, d = d + Math.imul(W, ve) | 0, d = d + Math.imul(V, be) | 0, M = M + Math.imul(V, ve) | 0, w = w + Math.imul(j, ye) | 0, d = d + Math.imul(j, me) | 0, d = d + Math.imul(K, ye) | 0, M = M + Math.imul(K, me) | 0, w = w + Math.imul(U, ge) | 0, d = d + Math.imul(U, _e) | 0, d = d + Math.imul(H, ge) | 0, M = M + Math.imul(H, _e) | 0, w = w + Math.imul(L, De) | 0, d = d + Math.imul(L, Le) | 0, d = d + Math.imul(O, De) | 0, M = M + Math.imul(O, Le) | 0;
            var zr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (zr >>> 26) | 0, zr &= 67108863, w = Math.imul(te, oe), d = Math.imul(te, se), d = d + Math.imul(re, oe) | 0, M = Math.imul(re, se), w = w + Math.imul(Q, he) | 0, d = d + Math.imul(Q, ce) | 0, d = d + Math.imul(ee, he) | 0, M = M + Math.imul(ee, ce) | 0, w = w + Math.imul(J, ue) | 0, d = d + Math.imul(J, de) | 0, d = d + Math.imul($, ue) | 0, M = M + Math.imul($, de) | 0, w = w + Math.imul(X, le) | 0, d = d + Math.imul(X, pe) | 0, d = d + Math.imul(Y, le) | 0, M = M + Math.imul(Y, pe) | 0, w = w + Math.imul(G, be) | 0, d = d + Math.imul(G, ve) | 0, d = d + Math.imul(Z, be) | 0, M = M + Math.imul(Z, ve) | 0, w = w + Math.imul(W, ye) | 0, d = d + Math.imul(W, me) | 0, d = d + Math.imul(V, ye) | 0, M = M + Math.imul(V, me) | 0, w = w + Math.imul(j, ge) | 0, d = d + Math.imul(j, _e) | 0, d = d + Math.imul(K, ge) | 0, M = M + Math.imul(K, _e) | 0, w = w + Math.imul(U, De) | 0, d = d + Math.imul(U, Le) | 0, d = d + Math.imul(H, De) | 0, M = M + Math.imul(H, Le) | 0;
            var Hr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Hr >>> 26) | 0, Hr &= 67108863, w = Math.imul(te, he), d = Math.imul(te, ce), d = d + Math.imul(re, he) | 0, M = Math.imul(re, ce), w = w + Math.imul(Q, ue) | 0, d = d + Math.imul(Q, de) | 0, d = d + Math.imul(ee, ue) | 0, M = M + Math.imul(ee, de) | 0, w = w + Math.imul(J, le) | 0, d = d + Math.imul(J, pe) | 0, d = d + Math.imul($, le) | 0, M = M + Math.imul($, pe) | 0, w = w + Math.imul(X, be) | 0, d = d + Math.imul(X, ve) | 0, d = d + Math.imul(Y, be) | 0, M = M + Math.imul(Y, ve) | 0, w = w + Math.imul(G, ye) | 0, d = d + Math.imul(G, me) | 0, d = d + Math.imul(Z, ye) | 0, M = M + Math.imul(Z, me) | 0, w = w + Math.imul(W, ge) | 0, d = d + Math.imul(W, _e) | 0, d = d + Math.imul(V, ge) | 0, M = M + Math.imul(V, _e) | 0, w = w + Math.imul(j, De) | 0, d = d + Math.imul(j, Le) | 0, d = d + Math.imul(K, De) | 0, M = M + Math.imul(K, Le) | 0;
            var jr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (jr >>> 26) | 0, jr &= 67108863, w = Math.imul(te, ue), d = Math.imul(te, de), d = d + Math.imul(re, ue) | 0, M = Math.imul(re, de), w = w + Math.imul(Q, le) | 0, d = d + Math.imul(Q, pe) | 0, d = d + Math.imul(ee, le) | 0, M = M + Math.imul(ee, pe) | 0, w = w + Math.imul(J, be) | 0, d = d + Math.imul(J, ve) | 0, d = d + Math.imul($, be) | 0, M = M + Math.imul($, ve) | 0, w = w + Math.imul(X, ye) | 0, d = d + Math.imul(X, me) | 0, d = d + Math.imul(Y, ye) | 0, M = M + Math.imul(Y, me) | 0, w = w + Math.imul(G, ge) | 0, d = d + Math.imul(G, _e) | 0, d = d + Math.imul(Z, ge) | 0, M = M + Math.imul(Z, _e) | 0, w = w + Math.imul(W, De) | 0, d = d + Math.imul(W, Le) | 0, d = d + Math.imul(V, De) | 0, M = M + Math.imul(V, Le) | 0;
            var Kr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Kr >>> 26) | 0, Kr &= 67108863, w = Math.imul(te, le), d = Math.imul(te, pe), d = d + Math.imul(re, le) | 0, M = Math.imul(re, pe), w = w + Math.imul(Q, be) | 0, d = d + Math.imul(Q, ve) | 0, d = d + Math.imul(ee, be) | 0, M = M + Math.imul(ee, ve) | 0, w = w + Math.imul(J, ye) | 0, d = d + Math.imul(J, me) | 0, d = d + Math.imul($, ye) | 0, M = M + Math.imul($, me) | 0, w = w + Math.imul(X, ge) | 0, d = d + Math.imul(X, _e) | 0, d = d + Math.imul(Y, ge) | 0, M = M + Math.imul(Y, _e) | 0, w = w + Math.imul(G, De) | 0, d = d + Math.imul(G, Le) | 0, d = d + Math.imul(Z, De) | 0, M = M + Math.imul(Z, Le) | 0;
            var Wr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, w = Math.imul(te, be), d = Math.imul(te, ve), d = d + Math.imul(re, be) | 0, M = Math.imul(re, ve), w = w + Math.imul(Q, ye) | 0, d = d + Math.imul(Q, me) | 0, d = d + Math.imul(ee, ye) | 0, M = M + Math.imul(ee, me) | 0, w = w + Math.imul(J, ge) | 0, d = d + Math.imul(J, _e) | 0, d = d + Math.imul($, ge) | 0, M = M + Math.imul($, _e) | 0, w = w + Math.imul(X, De) | 0, d = d + Math.imul(X, Le) | 0, d = d + Math.imul(Y, De) | 0, M = M + Math.imul(Y, Le) | 0;
            var Vr = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Vr >>> 26) | 0, Vr &= 67108863, w = Math.imul(te, ye), d = Math.imul(te, me), d = d + Math.imul(re, ye) | 0, M = Math.imul(re, me), w = w + Math.imul(Q, ge) | 0, d = d + Math.imul(Q, _e) | 0, d = d + Math.imul(ee, ge) | 0, M = M + Math.imul(ee, _e) | 0, w = w + Math.imul(J, De) | 0, d = d + Math.imul(J, Le) | 0, d = d + Math.imul($, De) | 0, M = M + Math.imul($, Le) | 0;
            var Ya = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Ya >>> 26) | 0, Ya &= 67108863, w = Math.imul(te, ge), d = Math.imul(te, _e), d = d + Math.imul(re, ge) | 0, M = Math.imul(re, _e), w = w + Math.imul(Q, De) | 0, d = d + Math.imul(Q, Le) | 0, d = d + Math.imul(ee, De) | 0, M = M + Math.imul(ee, Le) | 0;
            var Ja = (g + w | 0) + ((d & 8191) << 13) | 0;
            g = (M + (d >>> 13) | 0) + (Ja >>> 26) | 0, Ja &= 67108863, w = Math.imul(te, De), d = Math.imul(te, Le), d = d + Math.imul(re, De) | 0, M = Math.imul(re, Le);
            var $a = (g + w | 0) + ((d & 8191) << 13) | 0;
            return g = (M + (d >>> 13) | 0) + ($a >>> 26) | 0, $a &= 67108863, s[0] = kr, s[1] = Cr, s[2] = Tr, s[3] = Pr, s[4] = Dr, s[5] = Lr, s[6] = Nr, s[7] = Or, s[8] = Fr, s[9] = Ur, s[10] = zr, s[11] = Hr, s[12] = jr, s[13] = Kr, s[14] = Wr, s[15] = Vr, s[16] = Ya, s[17] = Ja, s[18] = $a, g !== 0 && (s[19] = g, p.length++), p;
        };
        Math.imul || (D = F);
        function z(l, a, h) {
            h.negative = a.negative ^ l.negative, h.length = l.length + a.length;
            for(var p = 0, y = 0, b = 0; b < h.length - 1; b++){
                var s = y;
                y = 0;
                for(var g = p & 67108863, w = Math.min(b, a.length - 1), d = Math.max(0, b - l.length + 1); d <= w; d++){
                    var M = b - d, k = l.words[M] | 0, T = a.words[d] | 0, C = k * T, N = C & 67108863;
                    s = s + (C / 67108864 | 0) | 0, N = N + g | 0, g = N & 67108863, s = s + (N >>> 26) | 0, y += s >>> 26, s &= 67108863;
                }
                h.words[b] = g, p = s, s = y;
            }
            return p !== 0 ? h.words[b] = p : h.length--, h._strip();
        }
        function Ae(l, a, h) {
            return z(l, a, h);
        }
        n.prototype.mulTo = function(a, h) {
            var p, y = this.length + a.length;
            return this.length === 10 && a.length === 10 ? p = D(this, a, h) : y < 63 ? p = F(this, a, h) : y < 1024 ? p = z(this, a, h) : p = Ae(this, a, h), p;
        };
        function qe(l, a) {
            this.x = l, this.y = a;
        }
        qe.prototype.makeRBT = function(a) {
            for(var h = new Array(a), p = n.prototype._countBits(a) - 1, y = 0; y < a; y++)h[y] = this.revBin(y, p, a);
            return h;
        }, qe.prototype.revBin = function(a, h, p) {
            if (a === 0 || a === p - 1) return a;
            for(var y = 0, b = 0; b < h; b++)y |= (a & 1) << h - b - 1, a >>= 1;
            return y;
        }, qe.prototype.permute = function(a, h, p, y, b, s) {
            for(var g = 0; g < s; g++)y[g] = h[a[g]], b[g] = p[a[g]];
        }, qe.prototype.transform = function(a, h, p, y, b, s) {
            this.permute(s, a, h, p, y, b);
            for(var g = 1; g < b; g <<= 1)for(var w = g << 1, d = Math.cos(2 * Math.PI / w), M = Math.sin(2 * Math.PI / w), k = 0; k < b; k += w)for(var T = d, C = M, N = 0; N < g; N++){
                var L = p[k + N], O = y[k + N], It = p[k + N + g], U = y[k + N + g], H = T * It - C * U;
                U = T * U + C * It, It = H, p[k + N] = L + It, y[k + N] = O + U, p[k + N + g] = L - It, y[k + N + g] = O - U, N !== w && (H = d * T - M * C, C = d * C + M * T, T = H);
            }
        }, qe.prototype.guessLen13b = function(a, h) {
            var p = Math.max(h, a) | 1, y = p & 1, b = 0;
            for(p = p / 2 | 0; p; p = p >>> 1)b++;
            return 1 << b + 1 + y;
        }, qe.prototype.conjugate = function(a, h, p) {
            if (!(p <= 1)) for(var y = 0; y < p / 2; y++){
                var b = a[y];
                a[y] = a[p - y - 1], a[p - y - 1] = b, b = h[y], h[y] = -h[p - y - 1], h[p - y - 1] = -b;
            }
        }, qe.prototype.normalize13b = function(a, h) {
            for(var p = 0, y = 0; y < h / 2; y++){
                var b = Math.round(a[2 * y + 1] / h) * 8192 + Math.round(a[2 * y] / h) + p;
                a[y] = b & 67108863, b < 67108864 ? p = 0 : p = b / 67108864 | 0;
            }
            return a;
        }, qe.prototype.convert13b = function(a, h, p, y) {
            for(var b = 0, s = 0; s < h; s++)b = b + (a[s] | 0), p[2 * s] = b & 8191, b = b >>> 13, p[2 * s + 1] = b & 8191, b = b >>> 13;
            for(s = 2 * h; s < y; ++s)p[s] = 0;
            r(b === 0), r((b & -8192) === 0);
        }, qe.prototype.stub = function(a) {
            for(var h = new Array(a), p = 0; p < a; p++)h[p] = 0;
            return h;
        }, qe.prototype.mulp = function(a, h, p) {
            var y = 2 * this.guessLen13b(a.length, h.length), b = this.makeRBT(y), s = this.stub(y), g = new Array(y), w = new Array(y), d = new Array(y), M = new Array(y), k = new Array(y), T = new Array(y), C = p.words;
            C.length = y, this.convert13b(a.words, a.length, g, y), this.convert13b(h.words, h.length, M, y), this.transform(g, s, w, d, y, b), this.transform(M, s, k, T, y, b);
            for(var N = 0; N < y; N++){
                var L = w[N] * k[N] - d[N] * T[N];
                d[N] = w[N] * T[N] + d[N] * k[N], w[N] = L;
            }
            return this.conjugate(w, d, y), this.transform(w, d, C, s, y, b), this.conjugate(C, s, y), this.normalize13b(C, y), p.negative = a.negative ^ h.negative, p.length = a.length + h.length, p._strip();
        }, n.prototype.mul = function(a) {
            var h = new n(null);
            return h.words = new Array(this.length + a.length), this.mulTo(a, h);
        }, n.prototype.mulf = function(a) {
            var h = new n(null);
            return h.words = new Array(this.length + a.length), Ae(this, a, h);
        }, n.prototype.imul = function(a) {
            return this.clone().mulTo(a, this);
        }, n.prototype.imuln = function(a) {
            var h = a < 0;
            h && (a = -a), r(typeof a == "number"), r(a < 67108864);
            for(var p = 0, y = 0; y < this.length; y++){
                var b = (this.words[y] | 0) * a, s = (b & 67108863) + (p & 67108863);
                p >>= 26, p += b / 67108864 | 0, p += s >>> 26, this.words[y] = s & 67108863;
            }
            return p !== 0 && (this.words[y] = p, this.length++), h ? this.ineg() : this;
        }, n.prototype.muln = function(a) {
            return this.clone().imuln(a);
        }, n.prototype.sqr = function() {
            return this.mul(this);
        }, n.prototype.isqr = function() {
            return this.imul(this.clone());
        }, n.prototype.pow = function(a) {
            var h = P(a);
            if (h.length === 0) return new n(1);
            for(var p = this, y = 0; y < h.length && h[y] === 0; y++, p = p.sqr());
            if (++y < h.length) for(var b = p.sqr(); y < h.length; y++, b = b.sqr())h[y] !== 0 && (p = p.mul(b));
            return p;
        }, n.prototype.iushln = function(a) {
            r(typeof a == "number" && a >= 0);
            var h = a % 26, p = (a - h) / 26, y = 67108863 >>> 26 - h << 26 - h, b;
            if (h !== 0) {
                var s = 0;
                for(b = 0; b < this.length; b++){
                    var g = this.words[b] & y, w = (this.words[b] | 0) - g << h;
                    this.words[b] = w | s, s = g >>> 26 - h;
                }
                s && (this.words[b] = s, this.length++);
            }
            if (p !== 0) {
                for(b = this.length - 1; b >= 0; b--)this.words[b + p] = this.words[b];
                for(b = 0; b < p; b++)this.words[b] = 0;
                this.length += p;
            }
            return this._strip();
        }, n.prototype.ishln = function(a) {
            return r(this.negative === 0), this.iushln(a);
        }, n.prototype.iushrn = function(a, h, p) {
            r(typeof a == "number" && a >= 0);
            var y;
            h ? y = (h - h % 26) / 26 : y = 0;
            var b = a % 26, s = Math.min((a - b) / 26, this.length), g = 67108863 ^ 67108863 >>> b << b, w = p;
            if (y -= s, y = Math.max(0, y), w) {
                for(var d = 0; d < s; d++)w.words[d] = this.words[d];
                w.length = s;
            }
            if (s !== 0) {
                if (this.length > s) for(this.length -= s, d = 0; d < this.length; d++)this.words[d] = this.words[d + s];
                else this.words[0] = 0, this.length = 1;
            }
            var M = 0;
            for(d = this.length - 1; d >= 0 && (M !== 0 || d >= y); d--){
                var k = this.words[d] | 0;
                this.words[d] = M << 26 - b | k >>> b, M = k & g;
            }
            return w && M !== 0 && (w.words[w.length++] = M), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
        }, n.prototype.ishrn = function(a, h, p) {
            return r(this.negative === 0), this.iushrn(a, h, p);
        }, n.prototype.shln = function(a) {
            return this.clone().ishln(a);
        }, n.prototype.ushln = function(a) {
            return this.clone().iushln(a);
        }, n.prototype.shrn = function(a) {
            return this.clone().ishrn(a);
        }, n.prototype.ushrn = function(a) {
            return this.clone().iushrn(a);
        }, n.prototype.testn = function(a) {
            r(typeof a == "number" && a >= 0);
            var h = a % 26, p = (a - h) / 26, y = 1 << h;
            if (this.length <= p) return !1;
            var b = this.words[p];
            return !!(b & y);
        }, n.prototype.imaskn = function(a) {
            r(typeof a == "number" && a >= 0);
            var h = a % 26, p = (a - h) / 26;
            if (r(this.negative === 0, "imaskn works only with positive numbers"), this.length <= p) return this;
            if (h !== 0 && p++, this.length = Math.min(p, this.length), h !== 0) {
                var y = 67108863 ^ 67108863 >>> h << h;
                this.words[this.length - 1] &= y;
            }
            return this._strip();
        }, n.prototype.maskn = function(a) {
            return this.clone().imaskn(a);
        }, n.prototype.iaddn = function(a) {
            return r(typeof a == "number"), r(a < 67108864), a < 0 ? this.isubn(-a) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= a ? (this.words[0] = a - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(a), this.negative = 1, this) : this._iaddn(a);
        }, n.prototype._iaddn = function(a) {
            this.words[0] += a;
            for(var h = 0; h < this.length && this.words[h] >= 67108864; h++)this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
            return this.length = Math.max(this.length, h + 1), this;
        }, n.prototype.isubn = function(a) {
            if (r(typeof a == "number"), r(a < 67108864), a < 0) return this.iaddn(-a);
            if (this.negative !== 0) return this.negative = 0, this.iaddn(a), this.negative = 1, this;
            if (this.words[0] -= a, this.length === 1 && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
            else for(var h = 0; h < this.length && this.words[h] < 0; h++)this.words[h] += 67108864, this.words[h + 1] -= 1;
            return this._strip();
        }, n.prototype.addn = function(a) {
            return this.clone().iaddn(a);
        }, n.prototype.subn = function(a) {
            return this.clone().isubn(a);
        }, n.prototype.iabs = function() {
            return this.negative = 0, this;
        }, n.prototype.abs = function() {
            return this.clone().iabs();
        }, n.prototype._ishlnsubmul = function(a, h, p) {
            var y = a.length + p, b;
            this._expand(y);
            var s, g = 0;
            for(b = 0; b < a.length; b++){
                s = (this.words[b + p] | 0) + g;
                var w = (a.words[b] | 0) * h;
                s -= w & 67108863, g = (s >> 26) - (w / 67108864 | 0), this.words[b + p] = s & 67108863;
            }
            for(; b < this.length - p; b++)s = (this.words[b + p] | 0) + g, g = s >> 26, this.words[b + p] = s & 67108863;
            if (g === 0) return this._strip();
            for(r(g === -1), g = 0, b = 0; b < this.length; b++)s = -(this.words[b] | 0) + g, g = s >> 26, this.words[b] = s & 67108863;
            return this.negative = 1, this._strip();
        }, n.prototype._wordDiv = function(a, h) {
            var p = this.length - a.length, y = this.clone(), b = a, s = b.words[b.length - 1] | 0, g = this._countBits(s);
            p = 26 - g, p !== 0 && (b = b.ushln(p), y.iushln(p), s = b.words[b.length - 1] | 0);
            var w = y.length - b.length, d;
            if (h !== "mod") {
                d = new n(null), d.length = w + 1, d.words = new Array(d.length);
                for(var M = 0; M < d.length; M++)d.words[M] = 0;
            }
            var k = y.clone()._ishlnsubmul(b, 1, w);
            k.negative === 0 && (y = k, d && (d.words[w] = 1));
            for(var T = w - 1; T >= 0; T--){
                var C = (y.words[b.length + T] | 0) * 67108864 + (y.words[b.length + T - 1] | 0);
                for(C = Math.min(C / s | 0, 67108863), y._ishlnsubmul(b, C, T); y.negative !== 0;)C--, y.negative = 0, y._ishlnsubmul(b, 1, T), y.isZero() || (y.negative ^= 1);
                d && (d.words[T] = C);
            }
            return d && d._strip(), y._strip(), h !== "div" && p !== 0 && y.iushrn(p), {
                div: d || null,
                mod: y
            };
        }, n.prototype.divmod = function(a, h, p) {
            if (r(!a.isZero()), this.isZero()) return {
                div: new n(0),
                mod: new n(0)
            };
            var y, b, s;
            return this.negative !== 0 && a.negative === 0 ? (s = this.neg().divmod(a, h), h !== "mod" && (y = s.div.neg()), h !== "div" && (b = s.mod.neg(), p && b.negative !== 0 && b.iadd(a)), {
                div: y,
                mod: b
            }) : this.negative === 0 && a.negative !== 0 ? (s = this.divmod(a.neg(), h), h !== "mod" && (y = s.div.neg()), {
                div: y,
                mod: s.mod
            }) : this.negative & a.negative ? (s = this.neg().divmod(a.neg(), h), h !== "div" && (b = s.mod.neg(), p && b.negative !== 0 && b.isub(a)), {
                div: s.div,
                mod: b
            }) : a.length > this.length || this.cmp(a) < 0 ? {
                div: new n(0),
                mod: this
            } : a.length === 1 ? h === "div" ? {
                div: this.divn(a.words[0]),
                mod: null
            } : h === "mod" ? {
                div: null,
                mod: new n(this.modrn(a.words[0]))
            } : {
                div: this.divn(a.words[0]),
                mod: new n(this.modrn(a.words[0]))
            } : this._wordDiv(a, h);
        }, n.prototype.div = function(a) {
            return this.divmod(a, "div", !1).div;
        }, n.prototype.mod = function(a) {
            return this.divmod(a, "mod", !1).mod;
        }, n.prototype.umod = function(a) {
            return this.divmod(a, "mod", !0).mod;
        }, n.prototype.divRound = function(a) {
            var h = this.divmod(a);
            if (h.mod.isZero()) return h.div;
            var p = h.div.negative !== 0 ? h.mod.isub(a) : h.mod, y = a.ushrn(1), b = a.andln(1), s = p.cmp(y);
            return s < 0 || b === 1 && s === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
        }, n.prototype.modrn = function(a) {
            var h = a < 0;
            h && (a = -a), r(a <= 67108863);
            for(var p = 67108864 % a, y = 0, b = this.length - 1; b >= 0; b--)y = (p * y + (this.words[b] | 0)) % a;
            return h ? -y : y;
        }, n.prototype.modn = function(a) {
            return this.modrn(a);
        }, n.prototype.idivn = function(a) {
            var h = a < 0;
            h && (a = -a), r(a <= 67108863);
            for(var p = 0, y = this.length - 1; y >= 0; y--){
                var b = (this.words[y] | 0) + p * 67108864;
                this.words[y] = b / a | 0, p = b % a;
            }
            return this._strip(), h ? this.ineg() : this;
        }, n.prototype.divn = function(a) {
            return this.clone().idivn(a);
        }, n.prototype.egcd = function(a) {
            r(a.negative === 0), r(!a.isZero());
            var h = this, p = a.clone();
            h.negative !== 0 ? h = h.umod(a) : h = h.clone();
            for(var y = new n(1), b = new n(0), s = new n(0), g = new n(1), w = 0; h.isEven() && p.isEven();)h.iushrn(1), p.iushrn(1), ++w;
            for(var d = p.clone(), M = h.clone(); !h.isZero();){
                for(var k = 0, T = 1; !(h.words[0] & T) && k < 26; ++k, T <<= 1);
                if (k > 0) for(h.iushrn(k); k-- > 0;)(y.isOdd() || b.isOdd()) && (y.iadd(d), b.isub(M)), y.iushrn(1), b.iushrn(1);
                for(var C = 0, N = 1; !(p.words[0] & N) && C < 26; ++C, N <<= 1);
                if (C > 0) for(p.iushrn(C); C-- > 0;)(s.isOdd() || g.isOdd()) && (s.iadd(d), g.isub(M)), s.iushrn(1), g.iushrn(1);
                h.cmp(p) >= 0 ? (h.isub(p), y.isub(s), b.isub(g)) : (p.isub(h), s.isub(y), g.isub(b));
            }
            return {
                a: s,
                b: g,
                gcd: p.iushln(w)
            };
        }, n.prototype._invmp = function(a) {
            r(a.negative === 0), r(!a.isZero());
            var h = this, p = a.clone();
            h.negative !== 0 ? h = h.umod(a) : h = h.clone();
            for(var y = new n(1), b = new n(0), s = p.clone(); h.cmpn(1) > 0 && p.cmpn(1) > 0;){
                for(var g = 0, w = 1; !(h.words[0] & w) && g < 26; ++g, w <<= 1);
                if (g > 0) for(h.iushrn(g); g-- > 0;)y.isOdd() && y.iadd(s), y.iushrn(1);
                for(var d = 0, M = 1; !(p.words[0] & M) && d < 26; ++d, M <<= 1);
                if (d > 0) for(p.iushrn(d); d-- > 0;)b.isOdd() && b.iadd(s), b.iushrn(1);
                h.cmp(p) >= 0 ? (h.isub(p), y.isub(b)) : (p.isub(h), b.isub(y));
            }
            var k;
            return h.cmpn(1) === 0 ? k = y : k = b, k.cmpn(0) < 0 && k.iadd(a), k;
        }, n.prototype.gcd = function(a) {
            if (this.isZero()) return a.abs();
            if (a.isZero()) return this.abs();
            var h = this.clone(), p = a.clone();
            h.negative = 0, p.negative = 0;
            for(var y = 0; h.isEven() && p.isEven(); y++)h.iushrn(1), p.iushrn(1);
            do {
                for(; h.isEven();)h.iushrn(1);
                for(; p.isEven();)p.iushrn(1);
                var b = h.cmp(p);
                if (b < 0) {
                    var s = h;
                    h = p, p = s;
                } else if (b === 0 || p.cmpn(1) === 0) break;
                h.isub(p);
            }while (!0);
            return p.iushln(y);
        }, n.prototype.invm = function(a) {
            return this.egcd(a).a.umod(a);
        }, n.prototype.isEven = function() {
            return (this.words[0] & 1) === 0;
        }, n.prototype.isOdd = function() {
            return (this.words[0] & 1) === 1;
        }, n.prototype.andln = function(a) {
            return this.words[0] & a;
        }, n.prototype.bincn = function(a) {
            r(typeof a == "number");
            var h = a % 26, p = (a - h) / 26, y = 1 << h;
            if (this.length <= p) return this._expand(p + 1), this.words[p] |= y, this;
            for(var b = y, s = p; b !== 0 && s < this.length; s++){
                var g = this.words[s] | 0;
                g += b, b = g >>> 26, g &= 67108863, this.words[s] = g;
            }
            return b !== 0 && (this.words[s] = b, this.length++), this;
        }, n.prototype.isZero = function() {
            return this.length === 1 && this.words[0] === 0;
        }, n.prototype.cmpn = function(a) {
            var h = a < 0;
            if (this.negative !== 0 && !h) return -1;
            if (this.negative === 0 && h) return 1;
            this._strip();
            var p;
            if (this.length > 1) p = 1;
            else {
                h && (a = -a), r(a <= 67108863, "Number is too big");
                var y = this.words[0] | 0;
                p = y === a ? 0 : y < a ? -1 : 1;
            }
            return this.negative !== 0 ? -p | 0 : p;
        }, n.prototype.cmp = function(a) {
            if (this.negative !== 0 && a.negative === 0) return -1;
            if (this.negative === 0 && a.negative !== 0) return 1;
            var h = this.ucmp(a);
            return this.negative !== 0 ? -h | 0 : h;
        }, n.prototype.ucmp = function(a) {
            if (this.length > a.length) return 1;
            if (this.length < a.length) return -1;
            for(var h = 0, p = this.length - 1; p >= 0; p--){
                var y = this.words[p] | 0, b = a.words[p] | 0;
                if (y !== b) {
                    y < b ? h = -1 : y > b && (h = 1);
                    break;
                }
            }
            return h;
        }, n.prototype.gtn = function(a) {
            return this.cmpn(a) === 1;
        }, n.prototype.gt = function(a) {
            return this.cmp(a) === 1;
        }, n.prototype.gten = function(a) {
            return this.cmpn(a) >= 0;
        }, n.prototype.gte = function(a) {
            return this.cmp(a) >= 0;
        }, n.prototype.ltn = function(a) {
            return this.cmpn(a) === -1;
        }, n.prototype.lt = function(a) {
            return this.cmp(a) === -1;
        }, n.prototype.lten = function(a) {
            return this.cmpn(a) <= 0;
        }, n.prototype.lte = function(a) {
            return this.cmp(a) <= 0;
        }, n.prototype.eqn = function(a) {
            return this.cmpn(a) === 0;
        }, n.prototype.eq = function(a) {
            return this.cmp(a) === 0;
        }, n.red = function(a) {
            return new c(a);
        }, n.prototype.toRed = function(a) {
            return r(!this.red, "Already a number in reduction context"), r(this.negative === 0, "red works only with positives"), a.convertTo(this)._forceRed(a);
        }, n.prototype.fromRed = function() {
            return r(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
        }, n.prototype._forceRed = function(a) {
            return this.red = a, this;
        }, n.prototype.forceRed = function(a) {
            return r(!this.red, "Already a number in reduction context"), this._forceRed(a);
        }, n.prototype.redAdd = function(a) {
            return r(this.red, "redAdd works only with red numbers"), this.red.add(this, a);
        }, n.prototype.redIAdd = function(a) {
            return r(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, a);
        }, n.prototype.redSub = function(a) {
            return r(this.red, "redSub works only with red numbers"), this.red.sub(this, a);
        }, n.prototype.redISub = function(a) {
            return r(this.red, "redISub works only with red numbers"), this.red.isub(this, a);
        }, n.prototype.redShl = function(a) {
            return r(this.red, "redShl works only with red numbers"), this.red.shl(this, a);
        }, n.prototype.redMul = function(a) {
            return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, a), this.red.mul(this, a);
        }, n.prototype.redIMul = function(a) {
            return r(this.red, "redMul works only with red numbers"), this.red._verify2(this, a), this.red.imul(this, a);
        }, n.prototype.redSqr = function() {
            return r(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
        }, n.prototype.redISqr = function() {
            return r(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
        }, n.prototype.redSqrt = function() {
            return r(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
        }, n.prototype.redInvm = function() {
            return r(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
        }, n.prototype.redNeg = function() {
            return r(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
        }, n.prototype.redPow = function(a) {
            return r(this.red && !a.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, a);
        };
        var Pe = {
            k256: null,
            p224: null,
            p192: null,
            p25519: null
        };
        function Re(l, a) {
            this.name = l, this.p = new n(a, 16), this.n = this.p.bitLength(), this.k = new n(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
        }
        Re.prototype._tmp = function() {
            var a = new n(null);
            return a.words = new Array(Math.ceil(this.n / 13)), a;
        }, Re.prototype.ireduce = function(a) {
            var h = a, p;
            do this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), p = h.bitLength();
            while (p > this.n);
            var y = p < this.n ? -1 : h.ucmp(this.p);
            return y === 0 ? (h.words[0] = 0, h.length = 1) : y > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
        }, Re.prototype.split = function(a, h) {
            a.iushrn(this.n, 0, h);
        }, Re.prototype.imulK = function(a) {
            return a.imul(this.k);
        };
        function Ue() {
            Re.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        i(Ue, Re), Ue.prototype.split = function(a, h) {
            for(var p = 4194303, y = Math.min(a.length, 9), b = 0; b < y; b++)h.words[b] = a.words[b];
            if (h.length = y, a.length <= 9) {
                a.words[0] = 0, a.length = 1;
                return;
            }
            var s = a.words[9];
            for(h.words[h.length++] = s & p, b = 10; b < a.length; b++){
                var g = a.words[b] | 0;
                a.words[b - 10] = (g & p) << 4 | s >>> 22, s = g;
            }
            s >>>= 22, a.words[b - 10] = s, s === 0 && a.length > 10 ? a.length -= 10 : a.length -= 9;
        }, Ue.prototype.imulK = function(a) {
            a.words[a.length] = 0, a.words[a.length + 1] = 0, a.length += 2;
            for(var h = 0, p = 0; p < a.length; p++){
                var y = a.words[p] | 0;
                h += y * 977, a.words[p] = h & 67108863, h = y * 64 + (h / 67108864 | 0);
            }
            return a.words[a.length - 1] === 0 && (a.length--, a.words[a.length - 1] === 0 && a.length--), a;
        };
        function Se() {
            Re.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        i(Se, Re);
        function Fe() {
            Re.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        i(Fe, Re);
        function S() {
            Re.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        i(S, Re), S.prototype.imulK = function(a) {
            for(var h = 0, p = 0; p < a.length; p++){
                var y = (a.words[p] | 0) * 19 + h, b = y & 67108863;
                y >>>= 26, a.words[p] = b, h = y;
            }
            return h !== 0 && (a.words[a.length++] = h), a;
        }, n._prime = function(a) {
            if (Pe[a]) return Pe[a];
            var h;
            if (a === "k256") h = new Ue;
            else if (a === "p224") h = new Se;
            else if (a === "p192") h = new Fe;
            else if (a === "p25519") h = new S;
            else throw new Error("Unknown prime " + a);
            return Pe[a] = h, h;
        };
        function c(l) {
            if (typeof l == "string") {
                var a = n._prime(l);
                this.m = a.p, this.prime = a;
            } else r(l.gtn(1), "modulus must be greater than 1"), this.m = l, this.prime = null;
        }
        c.prototype._verify1 = function(a) {
            r(a.negative === 0, "red works only with positives"), r(a.red, "red works only with red numbers");
        }, c.prototype._verify2 = function(a, h) {
            r((a.negative | h.negative) === 0, "red works only with positives"), r(a.red && a.red === h.red, "red works only with red numbers");
        }, c.prototype.imod = function(a) {
            return this.prime ? this.prime.ireduce(a)._forceRed(this) : (_(a, a.umod(this.m)._forceRed(this)), a);
        }, c.prototype.neg = function(a) {
            return a.isZero() ? a.clone() : this.m.sub(a)._forceRed(this);
        }, c.prototype.add = function(a, h) {
            this._verify2(a, h);
            var p = a.add(h);
            return p.cmp(this.m) >= 0 && p.isub(this.m), p._forceRed(this);
        }, c.prototype.iadd = function(a, h) {
            this._verify2(a, h);
            var p = a.iadd(h);
            return p.cmp(this.m) >= 0 && p.isub(this.m), p;
        }, c.prototype.sub = function(a, h) {
            this._verify2(a, h);
            var p = a.sub(h);
            return p.cmpn(0) < 0 && p.iadd(this.m), p._forceRed(this);
        }, c.prototype.isub = function(a, h) {
            this._verify2(a, h);
            var p = a.isub(h);
            return p.cmpn(0) < 0 && p.iadd(this.m), p;
        }, c.prototype.shl = function(a, h) {
            return this._verify1(a), this.imod(a.ushln(h));
        }, c.prototype.imul = function(a, h) {
            return this._verify2(a, h), this.imod(a.imul(h));
        }, c.prototype.mul = function(a, h) {
            return this._verify2(a, h), this.imod(a.mul(h));
        }, c.prototype.isqr = function(a) {
            return this.imul(a, a.clone());
        }, c.prototype.sqr = function(a) {
            return this.mul(a, a);
        }, c.prototype.sqrt = function(a) {
            if (a.isZero()) return a.clone();
            var h = this.m.andln(3);
            if (r(h % 2 === 1), h === 3) {
                var p = this.m.add(new n(1)).iushrn(2);
                return this.pow(a, p);
            }
            for(var y = this.m.subn(1), b = 0; !y.isZero() && y.andln(1) === 0;)b++, y.iushrn(1);
            r(!y.isZero());
            var s = new n(1).toRed(this), g = s.redNeg(), w = this.m.subn(1).iushrn(1), d = this.m.bitLength();
            for(d = new n(2 * d * d).toRed(this); this.pow(d, w).cmp(g) !== 0;)d.redIAdd(g);
            for(var M = this.pow(d, y), k = this.pow(a, y.addn(1).iushrn(1)), T = this.pow(a, y), C = b; T.cmp(s) !== 0;){
                for(var N = T, L = 0; N.cmp(s) !== 0; L++)N = N.redSqr();
                r(L < C);
                var O = this.pow(M, new n(1).iushln(C - L - 1));
                k = k.redMul(O), M = O.redSqr(), T = T.redMul(M), C = L;
            }
            return k;
        }, c.prototype.invm = function(a) {
            var h = a._invmp(this.m);
            return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
        }, c.prototype.pow = function(a, h) {
            if (h.isZero()) return new n(1).toRed(this);
            if (h.cmpn(1) === 0) return a.clone();
            var p = 4, y = new Array(1 << p);
            y[0] = new n(1).toRed(this), y[1] = a;
            for(var b = 2; b < y.length; b++)y[b] = this.mul(y[b - 1], a);
            var s = y[0], g = 0, w = 0, d = h.bitLength() % 26;
            for(d === 0 && (d = 26), b = h.length - 1; b >= 0; b--){
                for(var M = h.words[b], k = d - 1; k >= 0; k--){
                    var T = M >> k & 1;
                    if (s !== y[0] && (s = this.sqr(s)), T === 0 && g === 0) {
                        w = 0;
                        continue;
                    }
                    g <<= 1, g |= T, w++, !(w !== p && (b !== 0 || k !== 0)) && (s = this.mul(s, y[g]), w = 0, g = 0);
                }
                d = 26;
            }
            return s;
        }, c.prototype.convertTo = function(a) {
            var h = a.umod(this.m);
            return h === a ? h.clone() : h;
        }, c.prototype.convertFrom = function(a) {
            var h = a.clone();
            return h.red = null, h;
        }, n.mont = function(a) {
            return new m(a);
        };
        function m(l) {
            c.call(this, l), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new n(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
        }
        i(m, c), m.prototype.convertTo = function(a) {
            return this.imod(a.ushln(this.shift));
        }, m.prototype.convertFrom = function(a) {
            var h = this.imod(a.mul(this.rinv));
            return h.red = null, h;
        }, m.prototype.imul = function(a, h) {
            if (a.isZero() || h.isZero()) return a.words[0] = 0, a.length = 1, a;
            var p = a.imul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), b = p.isub(y).iushrn(this.shift), s = b;
            return b.cmp(this.m) >= 0 ? s = b.isub(this.m) : b.cmpn(0) < 0 && (s = b.iadd(this.m)), s._forceRed(this);
        }, m.prototype.mul = function(a, h) {
            if (a.isZero() || h.isZero()) return new n(0)._forceRed(this);
            var p = a.mul(h), y = p.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), b = p.isub(y).iushrn(this.shift), s = b;
            return b.cmp(this.m) >= 0 ? s = b.isub(this.m) : b.cmpn(0) < 0 && (s = b.iadd(this.m)), s._forceRed(this);
        }, m.prototype.invm = function(a) {
            var h = this.imod(a._invmp(this.m).mul(this.r2));
            return h._forceRed(this);
        };
    })(typeof Oo > "u" || Oo, Dd);
});
var ma = q((Wy, Od)=>{
    var zi = ya(), E4 = Jr();
    function S4(t) {
        var e = Ld(t), r = e.toRed(zi.mont(t.modulus)).redPow(new zi(t.publicExponent)).fromRed();
        return {
            blinder: r,
            unblinder: e.invm(t.modulus)
        };
    }
    function Ld(t) {
        var e = t.modulus.byteLength(), r;
        do r = new zi(E4(e));
        while (r.cmp(t.modulus) >= 0 || !r.umod(t.prime1) || !r.umod(t.prime2));
        return r;
    }
    function Nd(t, e) {
        var r = S4(e), i = e.modulus.byteLength(), n = new zi(t).mul(r.blinder).umod(e.modulus), f = n.toRed(zi.mont(e.prime1)), o = n.toRed(zi.mont(e.prime2)), u = e.coefficient, v = e.prime1, _ = e.prime2, x = f.redPow(e.exponent1).fromRed(), E = o.redPow(e.exponent2).fromRed(), A = x.isub(E).imul(u).umod(v).imul(_);
        return E.iadd(A).imul(r.unblinder).umod(e.modulus).toArrayLike(Buffer, "be", i);
    }
    Nd.getr = Ld;
    Od.exports = Nd;
});
var Fd = q((Vy, A4)=>{
    A4.exports = {
        name: "elliptic",
        version: "6.5.4",
        description: "EC cryptography",
        main: "lib/elliptic.js",
        files: [
            "lib"
        ],
        scripts: {
            lint: "eslint lib test",
            "lint:fix": "npm run lint -- --fix",
            unit: "istanbul test _mocha --reporter=spec test/index.js",
            test: "npm run lint && npm run unit",
            version: "grunt dist && git add dist/"
        },
        repository: {
            type: "git",
            url: "git@github.com:indutny/elliptic"
        },
        keywords: [
            "EC",
            "Elliptic",
            "curve",
            "Cryptography"
        ],
        author: "Fedor Indutny <fedor@indutny.com>",
        license: "MIT",
        bugs: {
            url: "https://github.com/indutny/elliptic/issues"
        },
        homepage: "https://github.com/indutny/elliptic",
        devDependencies: {
            brfs: "^2.0.2",
            coveralls: "^3.1.0",
            eslint: "^7.6.0",
            grunt: "^1.2.1",
            "grunt-browserify": "^5.3.0",
            "grunt-cli": "^1.3.2",
            "grunt-contrib-connect": "^3.0.0",
            "grunt-contrib-copy": "^1.0.0",
            "grunt-contrib-uglify": "^5.0.0",
            "grunt-mocha-istanbul": "^5.0.2",
            "grunt-saucelabs": "^9.0.1",
            istanbul: "^0.4.5",
            mocha: "^8.0.1"
        },
        dependencies: {
            "bn.js": "^4.11.9",
            brorand: "^1.1.0",
            "hash.js": "^1.0.0",
            "hmac-drbg": "^1.0.1",
            inherits: "^2.0.4",
            "minimalistic-assert": "^1.0.1",
            "minimalistic-crypto-utils": "^1.0.1"
        }
    };
});
var Fo = q((Hd)=>{
    "use strict";
    var ga = Hd;
    function B4(t, e) {
        if (Array.isArray(t)) return t.slice();
        if (!t) return [];
        var r = [];
        if (typeof t != "string") {
            for(var i = 0; i < t.length; i++)r[i] = t[i] | 0;
            return r;
        }
        if (e === "hex") {
            t = t.replace(/[^a-z0-9]+/ig, ""), t.length % 2 !== 0 && (t = "0" + t);
            for(var i = 0; i < t.length; i += 2)r.push(parseInt(t[i] + t[i + 1], 16));
        } else for(var i = 0; i < t.length; i++){
            var n = t.charCodeAt(i), f = n >> 8, o = n & 255;
            f ? r.push(f, o) : r.push(o);
        }
        return r;
    }
    ga.toArray = B4;
    function Ud(t) {
        return t.length === 1 ? "0" + t : t;
    }
    ga.zero2 = Ud;
    function zd(t) {
        for(var e = "", r = 0; r < t.length; r++)e += Ud(t[r].toString(16));
        return e;
    }
    ga.toHex = zd;
    ga.encode = function(e, r) {
        return r === "hex" ? zd(e) : e;
    };
});
var ut = q((jd)=>{
    "use strict";
    var Pt = jd, q4 = je(), R4 = ct(), _a = Fo();
    Pt.assert = R4;
    Pt.toArray = _a.toArray;
    Pt.zero2 = _a.zero2;
    Pt.toHex = _a.toHex;
    Pt.encode = _a.encode;
    function I4(t, e, r) {
        var i = new Array(Math.max(t.bitLength(), r) + 1);
        i.fill(0);
        for(var n = 1 << e + 1, f = t.clone(), o = 0; o < i.length; o++){
            var u, v = f.andln(n - 1);
            f.isOdd() ? (v > (n >> 1) - 1 ? u = (n >> 1) - v : u = v, f.isubn(u)) : u = 0, i[o] = u, f.iushrn(1);
        }
        return i;
    }
    Pt.getNAF = I4;
    function k4(t, e) {
        var r = [
            [],
            []
        ];
        t = t.clone(), e = e.clone();
        for(var i = 0, n = 0, f; t.cmpn(-i) > 0 || e.cmpn(-n) > 0;){
            var o = t.andln(3) + i & 3, u = e.andln(3) + n & 3;
            o === 3 && (o = -1), u === 3 && (u = -1);
            var v;
            o & 1 ? (f = t.andln(7) + i & 7, (f === 3 || f === 5) && u === 2 ? v = -o : v = o) : v = 0, r[0].push(v);
            var _;
            u & 1 ? (f = e.andln(7) + n & 7, (f === 3 || f === 5) && o === 2 ? _ = -u : _ = u) : _ = 0, r[1].push(_), 2 * i === v + 1 && (i = 1 - i), 2 * n === _ + 1 && (n = 1 - n), t.iushrn(1), e.iushrn(1);
        }
        return r;
    }
    Pt.getJSF = k4;
    function C4(t, e, r) {
        var i = "_" + e;
        t.prototype[e] = function() {
            return this[i] !== void 0 ? this[i] : this[i] = r.call(this);
        };
    }
    Pt.cachedProperty = C4;
    function T4(t) {
        return typeof t == "string" ? Pt.toArray(t, "hex") : t;
    }
    Pt.parseBytes = T4;
    function P4(t) {
        return new q4(t, "hex", "le");
    }
    Pt.intFromLE = P4;
});
var rf = q((Xy, Kd)=>{
    "use strict";
    var li = je(), tf = ut(), wa = tf.getNAF, D4 = tf.getJSF, xa = tf.assert;
    function Ar(t, e) {
        this.type = t, this.p = new li(e.p, 16), this.red = e.prime ? li.red(e.prime) : li.mont(this.p), this.zero = new li(0).toRed(this.red), this.one = new li(1).toRed(this.red), this.two = new li(2).toRed(this.red), this.n = e.n && new li(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
        var r = this.n && this.p.div(this.n);
        !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
    }
    Kd.exports = Ar;
    Ar.prototype.point = function() {
        throw new Error("Not implemented");
    };
    Ar.prototype.validate = function() {
        throw new Error("Not implemented");
    };
    Ar.prototype._fixedNafMul = function(e, r) {
        xa(e.precomputed);
        var i = e._getDoubles(), n = wa(r, 1, this._bitLength), f = (1 << i.step + 1) - (i.step % 2 === 0 ? 2 : 1);
        f /= 3;
        var o = [], u, v;
        for(u = 0; u < n.length; u += i.step){
            v = 0;
            for(var _ = u + i.step - 1; _ >= u; _--)v = (v << 1) + n[_];
            o.push(v);
        }
        for(var x = this.jpoint(null, null, null), E = this.jpoint(null, null, null), A = f; A > 0; A--){
            for(u = 0; u < o.length; u++)v = o[u], v === A ? E = E.mixedAdd(i.points[u]) : v === -A && (E = E.mixedAdd(i.points[u].neg()));
            x = x.add(E);
        }
        return x.toP();
    };
    Ar.prototype._wnafMul = function(e, r) {
        var i = 4, n = e._getNAFPoints(i);
        i = n.wnd;
        for(var f = n.points, o = wa(r, i, this._bitLength), u = this.jpoint(null, null, null), v = o.length - 1; v >= 0; v--){
            for(var _ = 0; v >= 0 && o[v] === 0; v--)_++;
            if (v >= 0 && _++, u = u.dblp(_), v < 0) break;
            var x = o[v];
            xa(x !== 0), e.type === "affine" ? x > 0 ? u = u.mixedAdd(f[x - 1 >> 1]) : u = u.mixedAdd(f[-x - 1 >> 1].neg()) : x > 0 ? u = u.add(f[x - 1 >> 1]) : u = u.add(f[-x - 1 >> 1].neg());
        }
        return e.type === "affine" ? u.toP() : u;
    };
    Ar.prototype._wnafMulAdd = function(e, r, i, n, f) {
        var o = this._wnafT1, u = this._wnafT2, v = this._wnafT3, _ = 0, x, E, A;
        for(x = 0; x < n; x++){
            A = r[x];
            var B = A._getNAFPoints(e);
            o[x] = B.wnd, u[x] = B.points;
        }
        for(x = n - 1; x >= 1; x -= 2){
            var I = x - 1, P = x;
            if (o[I] !== 1 || o[P] !== 1) {
                v[I] = wa(i[I], o[I], this._bitLength), v[P] = wa(i[P], o[P], this._bitLength), _ = Math.max(v[I].length, _), _ = Math.max(v[P].length, _);
                continue;
            }
            var F = [
                r[I],
                null,
                null,
                r[P]
            ];
            r[I].y.cmp(r[P].y) === 0 ? (F[1] = r[I].add(r[P]), F[2] = r[I].toJ().mixedAdd(r[P].neg())) : r[I].y.cmp(r[P].y.redNeg()) === 0 ? (F[1] = r[I].toJ().mixedAdd(r[P]), F[2] = r[I].add(r[P].neg())) : (F[1] = r[I].toJ().mixedAdd(r[P]), F[2] = r[I].toJ().mixedAdd(r[P].neg()));
            var D = [
                -3,
                -1,
                -5,
                -7,
                0,
                7,
                5,
                1,
                3
            ], z = D4(i[I], i[P]);
            for(_ = Math.max(z[0].length, _), v[I] = new Array(_), v[P] = new Array(_), E = 0; E < _; E++){
                var Ae = z[0][E] | 0, qe = z[1][E] | 0;
                v[I][E] = D[(Ae + 1) * 3 + (qe + 1)], v[P][E] = 0, u[I] = F;
            }
        }
        var Pe = this.jpoint(null, null, null), Re = this._wnafT4;
        for(x = _; x >= 0; x--){
            for(var Ue = 0; x >= 0;){
                var Se = !0;
                for(E = 0; E < n; E++)Re[E] = v[E][x] | 0, Re[E] !== 0 && (Se = !1);
                if (!Se) break;
                Ue++, x--;
            }
            if (x >= 0 && Ue++, Pe = Pe.dblp(Ue), x < 0) break;
            for(E = 0; E < n; E++){
                var Fe = Re[E];
                Fe !== 0 && (Fe > 0 ? A = u[E][Fe - 1 >> 1] : Fe < 0 && (A = u[E][-Fe - 1 >> 1].neg()), A.type === "affine" ? Pe = Pe.mixedAdd(A) : Pe = Pe.add(A));
            }
        }
        for(x = 0; x < n; x++)u[x] = null;
        return f ? Pe : Pe.toP();
    };
    function xt(t, e) {
        this.curve = t, this.type = e, this.precomputed = null;
    }
    Ar.BasePoint = xt;
    xt.prototype.eq = function() {
        throw new Error("Not implemented");
    };
    xt.prototype.validate = function() {
        return this.curve.validate(this);
    };
    Ar.prototype.decodePoint = function(e, r) {
        e = tf.toArray(e, r);
        var i = this.p.byteLength();
        if ((e[0] === 4 || e[0] === 6 || e[0] === 7) && e.length - 1 === 2 * i) {
            e[0] === 6 ? xa(e[e.length - 1] % 2 === 0) : e[0] === 7 && xa(e[e.length - 1] % 2 === 1);
            var n = this.point(e.slice(1, 1 + i), e.slice(1 + i, 1 + 2 * i));
            return n;
        } else if ((e[0] === 2 || e[0] === 3) && e.length - 1 === i) return this.pointFromX(e.slice(1, 1 + i), e[0] === 3);
        throw new Error("Unknown point format");
    };
    xt.prototype.encodeCompressed = function(e) {
        return this.encode(e, !0);
    };
    xt.prototype._encode = function(e) {
        var r = this.curve.p.byteLength(), i = this.getX().toArray("be", r);
        return e ? [
            this.getY().isEven() ? 2 : 3
        ].concat(i) : [
            4
        ].concat(i, this.getY().toArray("be", r));
    };
    xt.prototype.encode = function(e, r) {
        return tf.encode(this._encode(r), e);
    };
    xt.prototype.precompute = function(e) {
        if (this.precomputed) return this;
        var r = {
            doubles: null,
            naf: null,
            beta: null
        };
        return r.naf = this._getNAFPoints(8), r.doubles = this._getDoubles(4, e), r.beta = this._getBeta(), this.precomputed = r, this;
    };
    xt.prototype._hasDoubles = function(e) {
        if (!this.precomputed) return !1;
        var r = this.precomputed.doubles;
        return r ? r.points.length >= Math.ceil((e.bitLength() + 1) / r.step) : !1;
    };
    xt.prototype._getDoubles = function(e, r) {
        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
        for(var i = [
            this
        ], n = this, f = 0; f < r; f += e){
            for(var o = 0; o < e; o++)n = n.dbl();
            i.push(n);
        }
        return {
            step: e,
            points: i
        };
    };
    xt.prototype._getNAFPoints = function(e) {
        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
        for(var r = [
            this
        ], i = (1 << e) - 1, n = i === 1 ? null : this.dbl(), f = 1; f < i; f++)r[f] = r[f - 1].add(n);
        return {
            wnd: e,
            points: r
        };
    };
    xt.prototype._getBeta = function() {
        return null;
    };
    xt.prototype.dblp = function(e) {
        for(var r = this, i = 0; i < e; i++)r = r.dbl();
        return r;
    };
});
var Vd = q((Yy, Wd)=>{
    "use strict";
    var L4 = ut(), Oe = je(), Uo = xe(), Hi = rf(), N4 = L4.assert;
    function Mt(t) {
        Hi.call(this, "short", t), this.a = new Oe(t.a, 16).toRed(this.red), this.b = new Oe(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
    }
    Uo(Mt, Hi);
    Wd.exports = Mt;
    Mt.prototype._getEndomorphism = function(e) {
        if (!(!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)) {
            var r, i;
            if (e.beta) r = new Oe(e.beta, 16).toRed(this.red);
            else {
                var n = this._getEndoRoots(this.p);
                r = n[0].cmp(n[1]) < 0 ? n[0] : n[1], r = r.toRed(this.red);
            }
            if (e.lambda) i = new Oe(e.lambda, 16);
            else {
                var f = this._getEndoRoots(this.n);
                this.g.mul(f[0]).x.cmp(this.g.x.redMul(r)) === 0 ? i = f[0] : (i = f[1], N4(this.g.mul(i).x.cmp(this.g.x.redMul(r)) === 0));
            }
            var o;
            return e.basis ? o = e.basis.map(function(u) {
                return {
                    a: new Oe(u.a, 16),
                    b: new Oe(u.b, 16)
                };
            }) : o = this._getEndoBasis(i), {
                beta: r,
                lambda: i,
                basis: o
            };
        }
    };
    Mt.prototype._getEndoRoots = function(e) {
        var r = e === this.p ? this.red : Oe.mont(e), i = new Oe(2).toRed(r).redInvm(), n = i.redNeg(), f = new Oe(3).toRed(r).redNeg().redSqrt().redMul(i), o = n.redAdd(f).fromRed(), u = n.redSub(f).fromRed();
        return [
            o,
            u
        ];
    };
    Mt.prototype._getEndoBasis = function(e) {
        for(var r = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), i = e, n = this.n.clone(), f = new Oe(1), o = new Oe(0), u = new Oe(0), v = new Oe(1), _, x, E, A, B, I, P, F = 0, D, z; i.cmpn(0) !== 0;){
            var Ae = n.div(i);
            D = n.sub(Ae.mul(i)), z = u.sub(Ae.mul(f));
            var qe = v.sub(Ae.mul(o));
            if (!E && D.cmp(r) < 0) _ = P.neg(), x = f, E = D.neg(), A = z;
            else if (E && ++F === 2) break;
            P = D, n = i, i = D, u = f, f = z, v = o, o = qe;
        }
        B = D.neg(), I = z;
        var Pe = E.sqr().add(A.sqr()), Re = B.sqr().add(I.sqr());
        return Re.cmp(Pe) >= 0 && (B = _, I = x), E.negative && (E = E.neg(), A = A.neg()), B.negative && (B = B.neg(), I = I.neg()), [
            {
                a: E,
                b: A
            },
            {
                a: B,
                b: I
            }
        ];
    };
    Mt.prototype._endoSplit = function(e) {
        var r = this.endo.basis, i = r[0], n = r[1], f = n.b.mul(e).divRound(this.n), o = i.b.neg().mul(e).divRound(this.n), u = f.mul(i.a), v = o.mul(n.a), _ = f.mul(i.b), x = o.mul(n.b), E = e.sub(u).sub(v), A = _.add(x).neg();
        return {
            k1: E,
            k2: A
        };
    };
    Mt.prototype.pointFromX = function(e, r) {
        e = new Oe(e, 16), e.red || (e = e.toRed(this.red));
        var i = e.redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = i.redSqrt();
        if (n.redSqr().redSub(i).cmp(this.zero) !== 0) throw new Error("invalid point");
        var f = n.fromRed().isOdd();
        return (r && !f || !r && f) && (n = n.redNeg()), this.point(e, n);
    };
    Mt.prototype.validate = function(e) {
        if (e.inf) return !0;
        var r = e.x, i = e.y, n = this.a.redMul(r), f = r.redSqr().redMul(r).redIAdd(n).redIAdd(this.b);
        return i.redSqr().redISub(f).cmpn(0) === 0;
    };
    Mt.prototype._endoWnafMulAdd = function(e, r, i) {
        for(var n = this._endoWnafT1, f = this._endoWnafT2, o = 0; o < e.length; o++){
            var u = this._endoSplit(r[o]), v = e[o], _ = v._getBeta();
            u.k1.negative && (u.k1.ineg(), v = v.neg(!0)), u.k2.negative && (u.k2.ineg(), _ = _.neg(!0)), n[o * 2] = v, n[o * 2 + 1] = _, f[o * 2] = u.k1, f[o * 2 + 1] = u.k2;
        }
        for(var x = this._wnafMulAdd(1, n, f, o * 2, i), E = 0; E < o * 2; E++)n[E] = null, f[E] = null;
        return x;
    };
    function Ve(t, e, r, i) {
        Hi.BasePoint.call(this, t, "affine"), e === null && r === null ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new Oe(e, 16), this.y = new Oe(r, 16), i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
    }
    Uo(Ve, Hi.BasePoint);
    Mt.prototype.point = function(e, r, i) {
        return new Ve(this, e, r, i);
    };
    Mt.prototype.pointFromJSON = function(e, r) {
        return Ve.fromJSON(this, e, r);
    };
    Ve.prototype._getBeta = function() {
        if (this.curve.endo) {
            var e = this.precomputed;
            if (e && e.beta) return e.beta;
            var r = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (e) {
                var i = this.curve, n = function(f) {
                    return i.point(f.x.redMul(i.endo.beta), f.y);
                };
                e.beta = r, r.precomputed = {
                    beta: null,
                    naf: e.naf && {
                        wnd: e.naf.wnd,
                        points: e.naf.points.map(n)
                    },
                    doubles: e.doubles && {
                        step: e.doubles.step,
                        points: e.doubles.points.map(n)
                    }
                };
            }
            return r;
        }
    };
    Ve.prototype.toJSON = function() {
        return this.precomputed ? [
            this.x,
            this.y,
            this.precomputed && {
                doubles: this.precomputed.doubles && {
                    step: this.precomputed.doubles.step,
                    points: this.precomputed.doubles.points.slice(1)
                },
                naf: this.precomputed.naf && {
                    wnd: this.precomputed.naf.wnd,
                    points: this.precomputed.naf.points.slice(1)
                }
            }
        ] : [
            this.x,
            this.y
        ];
    };
    Ve.fromJSON = function(e, r, i) {
        typeof r == "string" && (r = JSON.parse(r));
        var n = e.point(r[0], r[1], i);
        if (!r[2]) return n;
        function f(u) {
            return e.point(u[0], u[1], i);
        }
        var o = r[2];
        return n.precomputed = {
            beta: null,
            doubles: o.doubles && {
                step: o.doubles.step,
                points: [
                    n
                ].concat(o.doubles.points.map(f))
            },
            naf: o.naf && {
                wnd: o.naf.wnd,
                points: [
                    n
                ].concat(o.naf.points.map(f))
            }
        }, n;
    };
    Ve.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
    };
    Ve.prototype.isInfinity = function() {
        return this.inf;
    };
    Ve.prototype.add = function(e) {
        if (this.inf) return e;
        if (e.inf) return this;
        if (this.eq(e)) return this.dbl();
        if (this.neg().eq(e)) return this.curve.point(null, null);
        if (this.x.cmp(e.x) === 0) return this.curve.point(null, null);
        var r = this.y.redSub(e.y);
        r.cmpn(0) !== 0 && (r = r.redMul(this.x.redSub(e.x).redInvm()));
        var i = r.redSqr().redISub(this.x).redISub(e.x), n = r.redMul(this.x.redSub(i)).redISub(this.y);
        return this.curve.point(i, n);
    };
    Ve.prototype.dbl = function() {
        if (this.inf) return this;
        var e = this.y.redAdd(this.y);
        if (e.cmpn(0) === 0) return this.curve.point(null, null);
        var r = this.curve.a, i = this.x.redSqr(), n = e.redInvm(), f = i.redAdd(i).redIAdd(i).redIAdd(r).redMul(n), o = f.redSqr().redISub(this.x.redAdd(this.x)), u = f.redMul(this.x.redSub(o)).redISub(this.y);
        return this.curve.point(o, u);
    };
    Ve.prototype.getX = function() {
        return this.x.fromRed();
    };
    Ve.prototype.getY = function() {
        return this.y.fromRed();
    };
    Ve.prototype.mul = function(e) {
        return e = new Oe(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([
            this
        ], [
            e
        ]) : this.curve._wnafMul(this, e);
    };
    Ve.prototype.mulAdd = function(e, r, i) {
        var n = [
            this,
            r
        ], f = [
            e,
            i
        ];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, f) : this.curve._wnafMulAdd(1, n, f, 2);
    };
    Ve.prototype.jmulAdd = function(e, r, i) {
        var n = [
            this,
            r
        ], f = [
            e,
            i
        ];
        return this.curve.endo ? this.curve._endoWnafMulAdd(n, f, !0) : this.curve._wnafMulAdd(1, n, f, 2, !0);
    };
    Ve.prototype.eq = function(e) {
        return this === e || this.inf === e.inf && (this.inf || this.x.cmp(e.x) === 0 && this.y.cmp(e.y) === 0);
    };
    Ve.prototype.neg = function(e) {
        if (this.inf) return this;
        var r = this.curve.point(this.x, this.y.redNeg());
        if (e && this.precomputed) {
            var i = this.precomputed, n = function(f) {
                return f.neg();
            };
            r.precomputed = {
                naf: i.naf && {
                    wnd: i.naf.wnd,
                    points: i.naf.points.map(n)
                },
                doubles: i.doubles && {
                    step: i.doubles.step,
                    points: i.doubles.points.map(n)
                }
            };
        }
        return r;
    };
    Ve.prototype.toJ = function() {
        if (this.inf) return this.curve.jpoint(null, null, null);
        var e = this.curve.jpoint(this.x, this.y, this.curve.one);
        return e;
    };
    function Ye(t, e, r, i) {
        Hi.BasePoint.call(this, t, "jacobian"), e === null && r === null && i === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new Oe(0)) : (this.x = new Oe(e, 16), this.y = new Oe(r, 16), this.z = new Oe(i, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
    }
    Uo(Ye, Hi.BasePoint);
    Mt.prototype.jpoint = function(e, r, i) {
        return new Ye(this, e, r, i);
    };
    Ye.prototype.toP = function() {
        if (this.isInfinity()) return this.curve.point(null, null);
        var e = this.z.redInvm(), r = e.redSqr(), i = this.x.redMul(r), n = this.y.redMul(r).redMul(e);
        return this.curve.point(i, n);
    };
    Ye.prototype.neg = function() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };
    Ye.prototype.add = function(e) {
        if (this.isInfinity()) return e;
        if (e.isInfinity()) return this;
        var r = e.z.redSqr(), i = this.z.redSqr(), n = this.x.redMul(r), f = e.x.redMul(i), o = this.y.redMul(r.redMul(e.z)), u = e.y.redMul(i.redMul(this.z)), v = n.redSub(f), _ = o.redSub(u);
        if (v.cmpn(0) === 0) return _.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
        var x = v.redSqr(), E = x.redMul(v), A = n.redMul(x), B = _.redSqr().redIAdd(E).redISub(A).redISub(A), I = _.redMul(A.redISub(B)).redISub(o.redMul(E)), P = this.z.redMul(e.z).redMul(v);
        return this.curve.jpoint(B, I, P);
    };
    Ye.prototype.mixedAdd = function(e) {
        if (this.isInfinity()) return e.toJ();
        if (e.isInfinity()) return this;
        var r = this.z.redSqr(), i = this.x, n = e.x.redMul(r), f = this.y, o = e.y.redMul(r).redMul(this.z), u = i.redSub(n), v = f.redSub(o);
        if (u.cmpn(0) === 0) return v.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
        var _ = u.redSqr(), x = _.redMul(u), E = i.redMul(_), A = v.redSqr().redIAdd(x).redISub(E).redISub(E), B = v.redMul(E.redISub(A)).redISub(f.redMul(x)), I = this.z.redMul(u);
        return this.curve.jpoint(A, B, I);
    };
    Ye.prototype.dblp = function(e) {
        if (e === 0) return this;
        if (this.isInfinity()) return this;
        if (!e) return this.dbl();
        var r;
        if (this.curve.zeroA || this.curve.threeA) {
            var i = this;
            for(r = 0; r < e; r++)i = i.dbl();
            return i;
        }
        var n = this.curve.a, f = this.curve.tinv, o = this.x, u = this.y, v = this.z, _ = v.redSqr().redSqr(), x = u.redAdd(u);
        for(r = 0; r < e; r++){
            var E = o.redSqr(), A = x.redSqr(), B = A.redSqr(), I = E.redAdd(E).redIAdd(E).redIAdd(n.redMul(_)), P = o.redMul(A), F = I.redSqr().redISub(P.redAdd(P)), D = P.redISub(F), z = I.redMul(D);
            z = z.redIAdd(z).redISub(B);
            var Ae = x.redMul(v);
            r + 1 < e && (_ = _.redMul(B)), o = F, v = Ae, x = z;
        }
        return this.curve.jpoint(o, x.redMul(f), v);
    };
    Ye.prototype.dbl = function() {
        return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
    };
    Ye.prototype._zeroDbl = function() {
        var e, r, i;
        if (this.zOne) {
            var n = this.x.redSqr(), f = this.y.redSqr(), o = f.redSqr(), u = this.x.redAdd(f).redSqr().redISub(n).redISub(o);
            u = u.redIAdd(u);
            var v = n.redAdd(n).redIAdd(n), _ = v.redSqr().redISub(u).redISub(u), x = o.redIAdd(o);
            x = x.redIAdd(x), x = x.redIAdd(x), e = _, r = v.redMul(u.redISub(_)).redISub(x), i = this.y.redAdd(this.y);
        } else {
            var E = this.x.redSqr(), A = this.y.redSqr(), B = A.redSqr(), I = this.x.redAdd(A).redSqr().redISub(E).redISub(B);
            I = I.redIAdd(I);
            var P = E.redAdd(E).redIAdd(E), F = P.redSqr(), D = B.redIAdd(B);
            D = D.redIAdd(D), D = D.redIAdd(D), e = F.redISub(I).redISub(I), r = P.redMul(I.redISub(e)).redISub(D), i = this.y.redMul(this.z), i = i.redIAdd(i);
        }
        return this.curve.jpoint(e, r, i);
    };
    Ye.prototype._threeDbl = function() {
        var e, r, i;
        if (this.zOne) {
            var n = this.x.redSqr(), f = this.y.redSqr(), o = f.redSqr(), u = this.x.redAdd(f).redSqr().redISub(n).redISub(o);
            u = u.redIAdd(u);
            var v = n.redAdd(n).redIAdd(n).redIAdd(this.curve.a), _ = v.redSqr().redISub(u).redISub(u);
            e = _;
            var x = o.redIAdd(o);
            x = x.redIAdd(x), x = x.redIAdd(x), r = v.redMul(u.redISub(_)).redISub(x), i = this.y.redAdd(this.y);
        } else {
            var E = this.z.redSqr(), A = this.y.redSqr(), B = this.x.redMul(A), I = this.x.redSub(E).redMul(this.x.redAdd(E));
            I = I.redAdd(I).redIAdd(I);
            var P = B.redIAdd(B);
            P = P.redIAdd(P);
            var F = P.redAdd(P);
            e = I.redSqr().redISub(F), i = this.y.redAdd(this.z).redSqr().redISub(A).redISub(E);
            var D = A.redSqr();
            D = D.redIAdd(D), D = D.redIAdd(D), D = D.redIAdd(D), r = I.redMul(P.redISub(e)).redISub(D);
        }
        return this.curve.jpoint(e, r, i);
    };
    Ye.prototype._dbl = function() {
        var e = this.curve.a, r = this.x, i = this.y, n = this.z, f = n.redSqr().redSqr(), o = r.redSqr(), u = i.redSqr(), v = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(f)), _ = r.redAdd(r);
        _ = _.redIAdd(_);
        var x = _.redMul(u), E = v.redSqr().redISub(x.redAdd(x)), A = x.redISub(E), B = u.redSqr();
        B = B.redIAdd(B), B = B.redIAdd(B), B = B.redIAdd(B);
        var I = v.redMul(A).redISub(B), P = i.redAdd(i).redMul(n);
        return this.curve.jpoint(E, I, P);
    };
    Ye.prototype.trpl = function() {
        if (!this.curve.zeroA) return this.dbl().add(this);
        var e = this.x.redSqr(), r = this.y.redSqr(), i = this.z.redSqr(), n = r.redSqr(), f = e.redAdd(e).redIAdd(e), o = f.redSqr(), u = this.x.redAdd(r).redSqr().redISub(e).redISub(n);
        u = u.redIAdd(u), u = u.redAdd(u).redIAdd(u), u = u.redISub(o);
        var v = u.redSqr(), _ = n.redIAdd(n);
        _ = _.redIAdd(_), _ = _.redIAdd(_), _ = _.redIAdd(_);
        var x = f.redIAdd(u).redSqr().redISub(o).redISub(v).redISub(_), E = r.redMul(x);
        E = E.redIAdd(E), E = E.redIAdd(E);
        var A = this.x.redMul(v).redISub(E);
        A = A.redIAdd(A), A = A.redIAdd(A);
        var B = this.y.redMul(x.redMul(_.redISub(x)).redISub(u.redMul(v)));
        B = B.redIAdd(B), B = B.redIAdd(B), B = B.redIAdd(B);
        var I = this.z.redAdd(u).redSqr().redISub(i).redISub(v);
        return this.curve.jpoint(A, B, I);
    };
    Ye.prototype.mul = function(e, r) {
        return e = new Oe(e, r), this.curve._wnafMul(this, e);
    };
    Ye.prototype.eq = function(e) {
        if (e.type === "affine") return this.eq(e.toJ());
        if (this === e) return !0;
        var r = this.z.redSqr(), i = e.z.redSqr();
        if (this.x.redMul(i).redISub(e.x.redMul(r)).cmpn(0) !== 0) return !1;
        var n = r.redMul(this.z), f = i.redMul(e.z);
        return this.y.redMul(f).redISub(e.y.redMul(n)).cmpn(0) === 0;
    };
    Ye.prototype.eqXToP = function(e) {
        var r = this.z.redSqr(), i = e.toRed(this.curve.red).redMul(r);
        if (this.x.cmp(i) === 0) return !0;
        for(var n = e.clone(), f = this.curve.redN.redMul(r);;){
            if (n.iadd(this.curve.n), n.cmp(this.curve.p) >= 0) return !1;
            if (i.redIAdd(f), this.x.cmp(i) === 0) return !0;
        }
    };
    Ye.prototype.inspect = function() {
        return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
    };
    Ye.prototype.isInfinity = function() {
        return this.z.cmpn(0) === 0;
    };
});
var Xd = q((Jy, Zd)=>{
    "use strict";
    var ji = je(), Gd = xe(), Ma = rf(), O4 = ut();
    function Ki(t) {
        Ma.call(this, "mont", t), this.a = new ji(t.a, 16).toRed(this.red), this.b = new ji(t.b, 16).toRed(this.red), this.i4 = new ji(4).toRed(this.red).redInvm(), this.two = new ji(2).toRed(this.red), this.a24 = this.i4.redMul(this.a.redAdd(this.two));
    }
    Gd(Ki, Ma);
    Zd.exports = Ki;
    Ki.prototype.validate = function(e) {
        var r = e.normalize().x, i = r.redSqr(), n = i.redMul(r).redAdd(i.redMul(this.a)).redAdd(r), f = n.redSqrt();
        return f.redSqr().cmp(n) === 0;
    };
    function Ge(t, e, r) {
        Ma.BasePoint.call(this, t, "projective"), e === null && r === null ? (this.x = this.curve.one, this.z = this.curve.zero) : (this.x = new ji(e, 16), this.z = new ji(r, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)));
    }
    Gd(Ge, Ma.BasePoint);
    Ki.prototype.decodePoint = function(e, r) {
        return this.point(O4.toArray(e, r), 1);
    };
    Ki.prototype.point = function(e, r) {
        return new Ge(this, e, r);
    };
    Ki.prototype.pointFromJSON = function(e) {
        return Ge.fromJSON(this, e);
    };
    Ge.prototype.precompute = function() {};
    Ge.prototype._encode = function() {
        return this.getX().toArray("be", this.curve.p.byteLength());
    };
    Ge.fromJSON = function(e, r) {
        return new Ge(e, r[0], r[1] || e.one);
    };
    Ge.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Ge.prototype.isInfinity = function() {
        return this.z.cmpn(0) === 0;
    };
    Ge.prototype.dbl = function() {
        var e = this.x.redAdd(this.z), r = e.redSqr(), i = this.x.redSub(this.z), n = i.redSqr(), f = r.redSub(n), o = r.redMul(n), u = f.redMul(n.redAdd(this.curve.a24.redMul(f)));
        return this.curve.point(o, u);
    };
    Ge.prototype.add = function() {
        throw new Error("Not supported on Montgomery curve");
    };
    Ge.prototype.diffAdd = function(e, r) {
        var i = this.x.redAdd(this.z), n = this.x.redSub(this.z), f = e.x.redAdd(e.z), o = e.x.redSub(e.z), u = o.redMul(i), v = f.redMul(n), _ = r.z.redMul(u.redAdd(v).redSqr()), x = r.x.redMul(u.redISub(v).redSqr());
        return this.curve.point(_, x);
    };
    Ge.prototype.mul = function(e) {
        for(var r = e.clone(), i = this, n = this.curve.point(null, null), f = this, o = []; r.cmpn(0) !== 0; r.iushrn(1))o.push(r.andln(1));
        for(var u = o.length - 1; u >= 0; u--)o[u] === 0 ? (i = i.diffAdd(n, f), n = n.dbl()) : (n = i.diffAdd(n, f), i = i.dbl());
        return n;
    };
    Ge.prototype.mulAdd = function() {
        throw new Error("Not supported on Montgomery curve");
    };
    Ge.prototype.jumlAdd = function() {
        throw new Error("Not supported on Montgomery curve");
    };
    Ge.prototype.eq = function(e) {
        return this.getX().cmp(e.getX()) === 0;
    };
    Ge.prototype.normalize = function() {
        return this.x = this.x.redMul(this.z.redInvm()), this.z = this.curve.one, this;
    };
    Ge.prototype.getX = function() {
        return this.normalize(), this.x.fromRed();
    };
});
var $d = q(($y, Jd)=>{
    "use strict";
    var F4 = ut(), ur = je(), Yd = xe(), Ea = rf(), U4 = F4.assert;
    function Zt(t) {
        this.twisted = (t.a | 0) !== 1, this.mOneA = this.twisted && (t.a | 0) === -1, this.extended = this.mOneA, Ea.call(this, "edwards", t), this.a = new ur(t.a, 16).umod(this.red.m), this.a = this.a.toRed(this.red), this.c = new ur(t.c, 16).toRed(this.red), this.c2 = this.c.redSqr(), this.d = new ur(t.d, 16).toRed(this.red), this.dd = this.d.redAdd(this.d), U4(!this.twisted || this.c.fromRed().cmpn(1) === 0), this.oneC = (t.c | 0) === 1;
    }
    Yd(Zt, Ea);
    Jd.exports = Zt;
    Zt.prototype._mulA = function(e) {
        return this.mOneA ? e.redNeg() : this.a.redMul(e);
    };
    Zt.prototype._mulC = function(e) {
        return this.oneC ? e : this.c.redMul(e);
    };
    Zt.prototype.jpoint = function(e, r, i, n) {
        return this.point(e, r, i, n);
    };
    Zt.prototype.pointFromX = function(e, r) {
        e = new ur(e, 16), e.red || (e = e.toRed(this.red));
        var i = e.redSqr(), n = this.c2.redSub(this.a.redMul(i)), f = this.one.redSub(this.c2.redMul(this.d).redMul(i)), o = n.redMul(f.redInvm()), u = o.redSqrt();
        if (u.redSqr().redSub(o).cmp(this.zero) !== 0) throw new Error("invalid point");
        var v = u.fromRed().isOdd();
        return (r && !v || !r && v) && (u = u.redNeg()), this.point(e, u);
    };
    Zt.prototype.pointFromY = function(e, r) {
        e = new ur(e, 16), e.red || (e = e.toRed(this.red));
        var i = e.redSqr(), n = i.redSub(this.c2), f = i.redMul(this.d).redMul(this.c2).redSub(this.a), o = n.redMul(f.redInvm());
        if (o.cmp(this.zero) === 0) {
            if (r) throw new Error("invalid point");
            return this.point(this.zero, e);
        }
        var u = o.redSqrt();
        if (u.redSqr().redSub(o).cmp(this.zero) !== 0) throw new Error("invalid point");
        return u.fromRed().isOdd() !== r && (u = u.redNeg()), this.point(u, e);
    };
    Zt.prototype.validate = function(e) {
        if (e.isInfinity()) return !0;
        e.normalize();
        var r = e.x.redSqr(), i = e.y.redSqr(), n = r.redMul(this.a).redAdd(i), f = this.c2.redMul(this.one.redAdd(this.d.redMul(r).redMul(i)));
        return n.cmp(f) === 0;
    };
    function Te(t, e, r, i, n) {
        Ea.BasePoint.call(this, t, "projective"), e === null && r === null && i === null ? (this.x = this.curve.zero, this.y = this.curve.one, this.z = this.curve.one, this.t = this.curve.zero, this.zOne = !0) : (this.x = new ur(e, 16), this.y = new ur(r, 16), this.z = i ? new ur(i, 16) : this.curve.one, this.t = n && new ur(n, 16), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.t && !this.t.red && (this.t = this.t.toRed(this.curve.red)), this.zOne = this.z === this.curve.one, this.curve.extended && !this.t && (this.t = this.x.redMul(this.y), this.zOne || (this.t = this.t.redMul(this.z.redInvm()))));
    }
    Yd(Te, Ea.BasePoint);
    Zt.prototype.pointFromJSON = function(e) {
        return Te.fromJSON(this, e);
    };
    Zt.prototype.point = function(e, r, i, n) {
        return new Te(this, e, r, i, n);
    };
    Te.fromJSON = function(e, r) {
        return new Te(e, r[0], r[1], r[2]);
    };
    Te.prototype.inspect = function() {
        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
    };
    Te.prototype.isInfinity = function() {
        return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
    };
    Te.prototype._extDbl = function() {
        var e = this.x.redSqr(), r = this.y.redSqr(), i = this.z.redSqr();
        i = i.redIAdd(i);
        var n = this.curve._mulA(e), f = this.x.redAdd(this.y).redSqr().redISub(e).redISub(r), o = n.redAdd(r), u = o.redSub(i), v = n.redSub(r), _ = f.redMul(u), x = o.redMul(v), E = f.redMul(v), A = u.redMul(o);
        return this.curve.point(_, x, A, E);
    };
    Te.prototype._projDbl = function() {
        var e = this.x.redAdd(this.y).redSqr(), r = this.x.redSqr(), i = this.y.redSqr(), n, f, o, u, v, _;
        if (this.curve.twisted) {
            u = this.curve._mulA(r);
            var x = u.redAdd(i);
            this.zOne ? (n = e.redSub(r).redSub(i).redMul(x.redSub(this.curve.two)), f = x.redMul(u.redSub(i)), o = x.redSqr().redSub(x).redSub(x)) : (v = this.z.redSqr(), _ = x.redSub(v).redISub(v), n = e.redSub(r).redISub(i).redMul(_), f = x.redMul(u.redSub(i)), o = x.redMul(_));
        } else u = r.redAdd(i), v = this.curve._mulC(this.z).redSqr(), _ = u.redSub(v).redSub(v), n = this.curve._mulC(e.redISub(u)).redMul(_), f = this.curve._mulC(u).redMul(r.redISub(i)), o = u.redMul(_);
        return this.curve.point(n, f, o);
    };
    Te.prototype.dbl = function() {
        return this.isInfinity() ? this : this.curve.extended ? this._extDbl() : this._projDbl();
    };
    Te.prototype._extAdd = function(e) {
        var r = this.y.redSub(this.x).redMul(e.y.redSub(e.x)), i = this.y.redAdd(this.x).redMul(e.y.redAdd(e.x)), n = this.t.redMul(this.curve.dd).redMul(e.t), f = this.z.redMul(e.z.redAdd(e.z)), o = i.redSub(r), u = f.redSub(n), v = f.redAdd(n), _ = i.redAdd(r), x = o.redMul(u), E = v.redMul(_), A = o.redMul(_), B = u.redMul(v);
        return this.curve.point(x, E, B, A);
    };
    Te.prototype._projAdd = function(e) {
        var r = this.z.redMul(e.z), i = r.redSqr(), n = this.x.redMul(e.x), f = this.y.redMul(e.y), o = this.curve.d.redMul(n).redMul(f), u = i.redSub(o), v = i.redAdd(o), _ = this.x.redAdd(this.y).redMul(e.x.redAdd(e.y)).redISub(n).redISub(f), x = r.redMul(u).redMul(_), E, A;
        return this.curve.twisted ? (E = r.redMul(v).redMul(f.redSub(this.curve._mulA(n))), A = u.redMul(v)) : (E = r.redMul(v).redMul(f.redSub(n)), A = this.curve._mulC(u).redMul(v)), this.curve.point(x, E, A);
    };
    Te.prototype.add = function(e) {
        return this.isInfinity() ? e : e.isInfinity() ? this : this.curve.extended ? this._extAdd(e) : this._projAdd(e);
    };
    Te.prototype.mul = function(e) {
        return this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve._wnafMul(this, e);
    };
    Te.prototype.mulAdd = function(e, r, i) {
        return this.curve._wnafMulAdd(1, [
            this,
            r
        ], [
            e,
            i
        ], 2, !1);
    };
    Te.prototype.jmulAdd = function(e, r, i) {
        return this.curve._wnafMulAdd(1, [
            this,
            r
        ], [
            e,
            i
        ], 2, !0);
    };
    Te.prototype.normalize = function() {
        if (this.zOne) return this;
        var e = this.z.redInvm();
        return this.x = this.x.redMul(e), this.y = this.y.redMul(e), this.t && (this.t = this.t.redMul(e)), this.z = this.curve.one, this.zOne = !0, this;
    };
    Te.prototype.neg = function() {
        return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
    };
    Te.prototype.getX = function() {
        return this.normalize(), this.x.fromRed();
    };
    Te.prototype.getY = function() {
        return this.normalize(), this.y.fromRed();
    };
    Te.prototype.eq = function(e) {
        return this === e || this.getX().cmp(e.getX()) === 0 && this.getY().cmp(e.getY()) === 0;
    };
    Te.prototype.eqXToP = function(e) {
        var r = e.toRed(this.curve.red).redMul(this.z);
        if (this.x.cmp(r) === 0) return !0;
        for(var i = e.clone(), n = this.curve.redN.redMul(this.z);;){
            if (i.iadd(this.curve.n), i.cmp(this.curve.p) >= 0) return !1;
            if (r.redIAdd(n), this.x.cmp(r) === 0) return !0;
        }
    };
    Te.prototype.toP = Te.prototype.normalize;
    Te.prototype.mixedAdd = Te.prototype.add;
});
var zo = q((Qd)=>{
    "use strict";
    var Sa = Qd;
    Sa.base = rf();
    Sa.short = Vd();
    Sa.mont = Xd();
    Sa.edwards = $d();
});
var Dt = q((Ce)=>{
    "use strict";
    var z4 = ct(), H4 = xe();
    Ce.inherits = H4;
    function j4(t, e) {
        return (t.charCodeAt(e) & 64512) !== 55296 || e < 0 || e + 1 >= t.length ? !1 : (t.charCodeAt(e + 1) & 64512) === 56320;
    }
    function K4(t, e) {
        if (Array.isArray(t)) return t.slice();
        if (!t) return [];
        var r = [];
        if (typeof t == "string") {
            if (e) {
                if (e === "hex") for(t = t.replace(/[^a-z0-9]+/ig, ""), t.length % 2 !== 0 && (t = "0" + t), n = 0; n < t.length; n += 2)r.push(parseInt(t[n] + t[n + 1], 16));
            } else for(var i = 0, n = 0; n < t.length; n++){
                var f = t.charCodeAt(n);
                f < 128 ? r[i++] = f : f < 2048 ? (r[i++] = f >> 6 | 192, r[i++] = f & 63 | 128) : j4(t, n) ? (f = 65536 + ((f & 1023) << 10) + (t.charCodeAt(++n) & 1023), r[i++] = f >> 18 | 240, r[i++] = f >> 12 & 63 | 128, r[i++] = f >> 6 & 63 | 128, r[i++] = f & 63 | 128) : (r[i++] = f >> 12 | 224, r[i++] = f >> 6 & 63 | 128, r[i++] = f & 63 | 128);
            }
        } else for(n = 0; n < t.length; n++)r[n] = t[n] | 0;
        return r;
    }
    Ce.toArray = K4;
    function W4(t) {
        for(var e = "", r = 0; r < t.length; r++)e += tl(t[r].toString(16));
        return e;
    }
    Ce.toHex = W4;
    function el(t) {
        var e = t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (t & 255) << 24;
        return e >>> 0;
    }
    Ce.htonl = el;
    function V4(t, e) {
        for(var r = "", i = 0; i < t.length; i++){
            var n = t[i];
            e === "little" && (n = el(n)), r += rl(n.toString(16));
        }
        return r;
    }
    Ce.toHex32 = V4;
    function tl(t) {
        return t.length === 1 ? "0" + t : t;
    }
    Ce.zero2 = tl;
    function rl(t) {
        return t.length === 7 ? "0" + t : t.length === 6 ? "00" + t : t.length === 5 ? "000" + t : t.length === 4 ? "0000" + t : t.length === 3 ? "00000" + t : t.length === 2 ? "000000" + t : t.length === 1 ? "0000000" + t : t;
    }
    Ce.zero8 = rl;
    function G4(t, e, r, i) {
        var n = r - e;
        z4(n % 4 === 0);
        for(var f = new Array(n / 4), o = 0, u = e; o < f.length; o++, u += 4){
            var v;
            i === "big" ? v = t[u] << 24 | t[u + 1] << 16 | t[u + 2] << 8 | t[u + 3] : v = t[u + 3] << 24 | t[u + 2] << 16 | t[u + 1] << 8 | t[u], f[o] = v >>> 0;
        }
        return f;
    }
    Ce.join32 = G4;
    function Z4(t, e) {
        for(var r = new Array(t.length * 4), i = 0, n = 0; i < t.length; i++, n += 4){
            var f = t[i];
            e === "big" ? (r[n] = f >>> 24, r[n + 1] = f >>> 16 & 255, r[n + 2] = f >>> 8 & 255, r[n + 3] = f & 255) : (r[n + 3] = f >>> 24, r[n + 2] = f >>> 16 & 255, r[n + 1] = f >>> 8 & 255, r[n] = f & 255);
        }
        return r;
    }
    Ce.split32 = Z4;
    function X4(t, e) {
        return t >>> e | t << 32 - e;
    }
    Ce.rotr32 = X4;
    function Y4(t, e) {
        return t << e | t >>> 32 - e;
    }
    Ce.rotl32 = Y4;
    function J4(t, e) {
        return t + e >>> 0;
    }
    Ce.sum32 = J4;
    function $4(t, e, r) {
        return t + e + r >>> 0;
    }
    Ce.sum32_3 = $4;
    function Q4(t, e, r, i) {
        return t + e + r + i >>> 0;
    }
    Ce.sum32_4 = Q4;
    function e8(t, e, r, i, n) {
        return t + e + r + i + n >>> 0;
    }
    Ce.sum32_5 = e8;
    function t8(t, e, r, i) {
        var n = t[e], f = t[e + 1], o = i + f >>> 0, u = (o < i ? 1 : 0) + r + n;
        t[e] = u >>> 0, t[e + 1] = o;
    }
    Ce.sum64 = t8;
    function r8(t, e, r, i) {
        var n = e + i >>> 0, f = (n < e ? 1 : 0) + t + r;
        return f >>> 0;
    }
    Ce.sum64_hi = r8;
    function i8(t, e, r, i) {
        var n = e + i;
        return n >>> 0;
    }
    Ce.sum64_lo = i8;
    function n8(t, e, r, i, n, f, o, u) {
        var v = 0, _ = e;
        _ = _ + i >>> 0, v += _ < e ? 1 : 0, _ = _ + f >>> 0, v += _ < f ? 1 : 0, _ = _ + u >>> 0, v += _ < u ? 1 : 0;
        var x = t + r + n + o + v;
        return x >>> 0;
    }
    Ce.sum64_4_hi = n8;
    function f8(t, e, r, i, n, f, o, u) {
        var v = e + i + f + u;
        return v >>> 0;
    }
    Ce.sum64_4_lo = f8;
    function a8(t, e, r, i, n, f, o, u, v, _) {
        var x = 0, E = e;
        E = E + i >>> 0, x += E < e ? 1 : 0, E = E + f >>> 0, x += E < f ? 1 : 0, E = E + u >>> 0, x += E < u ? 1 : 0, E = E + _ >>> 0, x += E < _ ? 1 : 0;
        var A = t + r + n + o + v + x;
        return A >>> 0;
    }
    Ce.sum64_5_hi = a8;
    function o8(t, e, r, i, n, f, o, u, v, _) {
        var x = e + i + f + u + _;
        return x >>> 0;
    }
    Ce.sum64_5_lo = o8;
    function s8(t, e, r) {
        var i = e << 32 - r | t >>> r;
        return i >>> 0;
    }
    Ce.rotr64_hi = s8;
    function h8(t, e, r) {
        var i = t << 32 - r | e >>> r;
        return i >>> 0;
    }
    Ce.rotr64_lo = h8;
    function c8(t, e, r) {
        return t >>> r;
    }
    Ce.shr64_hi = c8;
    function u8(t, e, r) {
        var i = t << 32 - r | e >>> r;
        return i >>> 0;
    }
    Ce.shr64_lo = u8;
});
var Wi = q((nl)=>{
    "use strict";
    var il = Dt(), d8 = ct();
    function Aa() {
        this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
    }
    nl.BlockHash = Aa;
    Aa.prototype.update = function(e, r) {
        if (e = il.toArray(e, r), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
            e = this.pending;
            var i = e.length % this._delta8;
            this.pending = e.slice(e.length - i, e.length), this.pending.length === 0 && (this.pending = null), e = il.join32(e, 0, e.length - i, this.endian);
            for(var n = 0; n < e.length; n += this._delta32)this._update(e, n, n + this._delta32);
        }
        return this;
    };
    Aa.prototype.digest = function(e) {
        return this.update(this._pad()), d8(this.pending === null), this._digest(e);
    };
    Aa.prototype._pad = function() {
        var e = this.pendingTotal, r = this._delta8, i = r - (e + this.padLength) % r, n = new Array(i + this.padLength);
        n[0] = 128;
        for(var f = 1; f < i; f++)n[f] = 0;
        if (e <<= 3, this.endian === "big") {
            for(var o = 8; o < this.padLength; o++)n[f++] = 0;
            n[f++] = 0, n[f++] = 0, n[f++] = 0, n[f++] = 0, n[f++] = e >>> 24 & 255, n[f++] = e >>> 16 & 255, n[f++] = e >>> 8 & 255, n[f++] = e & 255;
        } else for(n[f++] = e & 255, n[f++] = e >>> 8 & 255, n[f++] = e >>> 16 & 255, n[f++] = e >>> 24 & 255, n[f++] = 0, n[f++] = 0, n[f++] = 0, n[f++] = 0, o = 8; o < this.padLength; o++)n[f++] = 0;
        return n;
    };
});
var Ho = q((dr)=>{
    "use strict";
    var l8 = Dt(), Xt = l8.rotr32;
    function p8(t, e, r, i) {
        if (t === 0) return fl(e, r, i);
        if (t === 1 || t === 3) return ol(e, r, i);
        if (t === 2) return al(e, r, i);
    }
    dr.ft_1 = p8;
    function fl(t, e, r) {
        return t & e ^ ~t & r;
    }
    dr.ch32 = fl;
    function al(t, e, r) {
        return t & e ^ t & r ^ e & r;
    }
    dr.maj32 = al;
    function ol(t, e, r) {
        return t ^ e ^ r;
    }
    dr.p32 = ol;
    function b8(t) {
        return Xt(t, 2) ^ Xt(t, 13) ^ Xt(t, 22);
    }
    dr.s0_256 = b8;
    function v8(t) {
        return Xt(t, 6) ^ Xt(t, 11) ^ Xt(t, 25);
    }
    dr.s1_256 = v8;
    function y8(t) {
        return Xt(t, 7) ^ Xt(t, 18) ^ t >>> 3;
    }
    dr.g0_256 = y8;
    function m8(t) {
        return Xt(t, 17) ^ Xt(t, 19) ^ t >>> 10;
    }
    dr.g1_256 = m8;
});
var cl = q((im, hl)=>{
    "use strict";
    var Vi = Dt(), g8 = Wi(), _8 = Ho(), jo = Vi.rotl32, nf = Vi.sum32, w8 = Vi.sum32_5, x8 = _8.ft_1, sl = g8.BlockHash, M8 = [
        1518500249,
        1859775393,
        2400959708,
        3395469782
    ];
    function Yt() {
        if (!(this instanceof Yt)) return new Yt;
        sl.call(this), this.h = [
            1732584193,
            4023233417,
            2562383102,
            271733878,
            3285377520
        ], this.W = new Array(80);
    }
    Vi.inherits(Yt, sl);
    hl.exports = Yt;
    Yt.blockSize = 512;
    Yt.outSize = 160;
    Yt.hmacStrength = 80;
    Yt.padLength = 64;
    Yt.prototype._update = function(e, r) {
        for(var i = this.W, n = 0; n < 16; n++)i[n] = e[r + n];
        for(; n < i.length; n++)i[n] = jo(i[n - 3] ^ i[n - 8] ^ i[n - 14] ^ i[n - 16], 1);
        var f = this.h[0], o = this.h[1], u = this.h[2], v = this.h[3], _ = this.h[4];
        for(n = 0; n < i.length; n++){
            var x = ~~(n / 20), E = w8(jo(f, 5), x8(x, o, u, v), _, i[n], M8[x]);
            _ = v, v = u, u = jo(o, 30), o = f, f = E;
        }
        this.h[0] = nf(this.h[0], f), this.h[1] = nf(this.h[1], o), this.h[2] = nf(this.h[2], u), this.h[3] = nf(this.h[3], v), this.h[4] = nf(this.h[4], _);
    };
    Yt.prototype._digest = function(e) {
        return e === "hex" ? Vi.toHex32(this.h, "big") : Vi.split32(this.h, "big");
    };
});
var Ko = q((nm, dl)=>{
    "use strict";
    var Gi = Dt(), E8 = Wi(), Zi = Ho(), S8 = ct(), Lt = Gi.sum32, A8 = Gi.sum32_4, B8 = Gi.sum32_5, q8 = Zi.ch32, R8 = Zi.maj32, I8 = Zi.s0_256, k8 = Zi.s1_256, C8 = Zi.g0_256, T8 = Zi.g1_256, ul = E8.BlockHash, P8 = [
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
    ];
    function Jt() {
        if (!(this instanceof Jt)) return new Jt;
        ul.call(this), this.h = [
            1779033703,
            3144134277,
            1013904242,
            2773480762,
            1359893119,
            2600822924,
            528734635,
            1541459225
        ], this.k = P8, this.W = new Array(64);
    }
    Gi.inherits(Jt, ul);
    dl.exports = Jt;
    Jt.blockSize = 512;
    Jt.outSize = 256;
    Jt.hmacStrength = 192;
    Jt.padLength = 64;
    Jt.prototype._update = function(e, r) {
        for(var i = this.W, n = 0; n < 16; n++)i[n] = e[r + n];
        for(; n < i.length; n++)i[n] = A8(T8(i[n - 2]), i[n - 7], C8(i[n - 15]), i[n - 16]);
        var f = this.h[0], o = this.h[1], u = this.h[2], v = this.h[3], _ = this.h[4], x = this.h[5], E = this.h[6], A = this.h[7];
        for(S8(this.k.length === i.length), n = 0; n < i.length; n++){
            var B = B8(A, k8(_), q8(_, x, E), this.k[n], i[n]), I = Lt(I8(f), R8(f, o, u));
            A = E, E = x, x = _, _ = Lt(v, B), v = u, u = o, o = f, f = Lt(B, I);
        }
        this.h[0] = Lt(this.h[0], f), this.h[1] = Lt(this.h[1], o), this.h[2] = Lt(this.h[2], u), this.h[3] = Lt(this.h[3], v), this.h[4] = Lt(this.h[4], _), this.h[5] = Lt(this.h[5], x), this.h[6] = Lt(this.h[6], E), this.h[7] = Lt(this.h[7], A);
    };
    Jt.prototype._digest = function(e) {
        return e === "hex" ? Gi.toHex32(this.h, "big") : Gi.split32(this.h, "big");
    };
});
var bl = q((fm, pl)=>{
    "use strict";
    var Wo = Dt(), ll = Ko();
    function lr() {
        if (!(this instanceof lr)) return new lr;
        ll.call(this), this.h = [
            3238371032,
            914150663,
            812702999,
            4144912697,
            4290775857,
            1750603025,
            1694076839,
            3204075428
        ];
    }
    Wo.inherits(lr, ll);
    pl.exports = lr;
    lr.blockSize = 512;
    lr.outSize = 224;
    lr.hmacStrength = 192;
    lr.padLength = 64;
    lr.prototype._digest = function(e) {
        return e === "hex" ? Wo.toHex32(this.h.slice(0, 7), "big") : Wo.split32(this.h.slice(0, 7), "big");
    };
});
var Zo = q((am, gl)=>{
    "use strict";
    var ot = Dt(), D8 = Wi(), L8 = ct(), $t = ot.rotr64_hi, Qt = ot.rotr64_lo, vl = ot.shr64_hi, yl = ot.shr64_lo, Br = ot.sum64, Vo = ot.sum64_hi, Go = ot.sum64_lo, N8 = ot.sum64_4_hi, O8 = ot.sum64_4_lo, F8 = ot.sum64_5_hi, U8 = ot.sum64_5_lo, ml = D8.BlockHash, z8 = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
    ];
    function Nt() {
        if (!(this instanceof Nt)) return new Nt;
        ml.call(this), this.h = [
            1779033703,
            4089235720,
            3144134277,
            2227873595,
            1013904242,
            4271175723,
            2773480762,
            1595750129,
            1359893119,
            2917565137,
            2600822924,
            725511199,
            528734635,
            4215389547,
            1541459225,
            327033209
        ], this.k = z8, this.W = new Array(160);
    }
    ot.inherits(Nt, ml);
    gl.exports = Nt;
    Nt.blockSize = 1024;
    Nt.outSize = 512;
    Nt.hmacStrength = 192;
    Nt.padLength = 128;
    Nt.prototype._prepareBlock = function(e, r) {
        for(var i = this.W, n = 0; n < 32; n++)i[n] = e[r + n];
        for(; n < i.length; n += 2){
            var f = $8(i[n - 4], i[n - 3]), o = Q8(i[n - 4], i[n - 3]), u = i[n - 14], v = i[n - 13], _ = Y8(i[n - 30], i[n - 29]), x = J8(i[n - 30], i[n - 29]), E = i[n - 32], A = i[n - 31];
            i[n] = N8(f, o, u, v, _, x, E, A), i[n + 1] = O8(f, o, u, v, _, x, E, A);
        }
    };
    Nt.prototype._update = function(e, r) {
        this._prepareBlock(e, r);
        var i = this.W, n = this.h[0], f = this.h[1], o = this.h[2], u = this.h[3], v = this.h[4], _ = this.h[5], x = this.h[6], E = this.h[7], A = this.h[8], B = this.h[9], I = this.h[10], P = this.h[11], F = this.h[12], D = this.h[13], z = this.h[14], Ae = this.h[15];
        L8(this.k.length === i.length);
        for(var qe = 0; qe < i.length; qe += 2){
            var Pe = z, Re = Ae, Ue = Z8(A, B), Se = X8(A, B), Fe = H8(A, B, I, P, F, D), S = j8(A, B, I, P, F, D), c = this.k[qe], m = this.k[qe + 1], l = i[qe], a = i[qe + 1], h = F8(Pe, Re, Ue, Se, Fe, S, c, m, l, a), p = U8(Pe, Re, Ue, Se, Fe, S, c, m, l, a);
            Pe = V8(n, f), Re = G8(n, f), Ue = K8(n, f, o, u, v, _), Se = W8(n, f, o, u, v, _);
            var y = Vo(Pe, Re, Ue, Se), b = Go(Pe, Re, Ue, Se);
            z = F, Ae = D, F = I, D = P, I = A, P = B, A = Vo(x, E, h, p), B = Go(E, E, h, p), x = v, E = _, v = o, _ = u, o = n, u = f, n = Vo(h, p, y, b), f = Go(h, p, y, b);
        }
        Br(this.h, 0, n, f), Br(this.h, 2, o, u), Br(this.h, 4, v, _), Br(this.h, 6, x, E), Br(this.h, 8, A, B), Br(this.h, 10, I, P), Br(this.h, 12, F, D), Br(this.h, 14, z, Ae);
    };
    Nt.prototype._digest = function(e) {
        return e === "hex" ? ot.toHex32(this.h, "big") : ot.split32(this.h, "big");
    };
    function H8(t, e, r, i, n) {
        var f = t & r ^ ~t & n;
        return f < 0 && (f += 4294967296), f;
    }
    function j8(t, e, r, i, n, f) {
        var o = e & i ^ ~e & f;
        return o < 0 && (o += 4294967296), o;
    }
    function K8(t, e, r, i, n) {
        var f = t & r ^ t & n ^ r & n;
        return f < 0 && (f += 4294967296), f;
    }
    function W8(t, e, r, i, n, f) {
        var o = e & i ^ e & f ^ i & f;
        return o < 0 && (o += 4294967296), o;
    }
    function V8(t, e) {
        var r = $t(t, e, 28), i = $t(e, t, 2), n = $t(e, t, 7), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function G8(t, e) {
        var r = Qt(t, e, 28), i = Qt(e, t, 2), n = Qt(e, t, 7), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function Z8(t, e) {
        var r = $t(t, e, 14), i = $t(t, e, 18), n = $t(e, t, 9), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function X8(t, e) {
        var r = Qt(t, e, 14), i = Qt(t, e, 18), n = Qt(e, t, 9), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function Y8(t, e) {
        var r = $t(t, e, 1), i = $t(t, e, 8), n = vl(t, e, 7), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function J8(t, e) {
        var r = Qt(t, e, 1), i = Qt(t, e, 8), n = yl(t, e, 7), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function $8(t, e) {
        var r = $t(t, e, 19), i = $t(e, t, 29), n = vl(t, e, 6), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
    function Q8(t, e) {
        var r = Qt(t, e, 19), i = Qt(e, t, 29), n = yl(t, e, 6), f = r ^ i ^ n;
        return f < 0 && (f += 4294967296), f;
    }
});
var xl = q((om, wl)=>{
    "use strict";
    var Xo = Dt(), _l = Zo();
    function pr() {
        if (!(this instanceof pr)) return new pr;
        _l.call(this), this.h = [
            3418070365,
            3238371032,
            1654270250,
            914150663,
            2438529370,
            812702999,
            355462360,
            4144912697,
            1731405415,
            4290775857,
            2394180231,
            1750603025,
            3675008525,
            1694076839,
            1203062813,
            3204075428
        ];
    }
    Xo.inherits(pr, _l);
    wl.exports = pr;
    pr.blockSize = 1024;
    pr.outSize = 384;
    pr.hmacStrength = 192;
    pr.padLength = 128;
    pr.prototype._digest = function(e) {
        return e === "hex" ? Xo.toHex32(this.h.slice(0, 12), "big") : Xo.split32(this.h.slice(0, 12), "big");
    };
});
var Ml = q((Xi)=>{
    "use strict";
    Xi.sha1 = cl();
    Xi.sha224 = bl();
    Xi.sha256 = Ko();
    Xi.sha384 = xl();
    Xi.sha512 = Zo();
});
var Rl = q((ql)=>{
    "use strict";
    var pi = Dt(), e5 = Wi(), Ba = pi.rotl32, El = pi.sum32, ff = pi.sum32_3, Sl = pi.sum32_4, Bl = e5.BlockHash;
    function er() {
        if (!(this instanceof er)) return new er;
        Bl.call(this), this.h = [
            1732584193,
            4023233417,
            2562383102,
            271733878,
            3285377520
        ], this.endian = "little";
    }
    pi.inherits(er, Bl);
    ql.ripemd160 = er;
    er.blockSize = 512;
    er.outSize = 160;
    er.hmacStrength = 192;
    er.padLength = 64;
    er.prototype._update = function(e, r) {
        for(var i = this.h[0], n = this.h[1], f = this.h[2], o = this.h[3], u = this.h[4], v = i, _ = n, x = f, E = o, A = u, B = 0; B < 80; B++){
            var I = El(Ba(Sl(i, Al(B, n, f, o), e[i5[B] + r], t5(B)), f5[B]), u);
            i = u, u = o, o = Ba(f, 10), f = n, n = I, I = El(Ba(Sl(v, Al(79 - B, _, x, E), e[n5[B] + r], r5(B)), a5[B]), A), v = A, A = E, E = Ba(x, 10), x = _, _ = I;
        }
        I = ff(this.h[1], f, E), this.h[1] = ff(this.h[2], o, A), this.h[2] = ff(this.h[3], u, v), this.h[3] = ff(this.h[4], i, _), this.h[4] = ff(this.h[0], n, x), this.h[0] = I;
    };
    er.prototype._digest = function(e) {
        return e === "hex" ? pi.toHex32(this.h, "little") : pi.split32(this.h, "little");
    };
    function Al(t, e, r, i) {
        return t <= 15 ? e ^ r ^ i : t <= 31 ? e & r | ~e & i : t <= 47 ? (e | ~r) ^ i : t <= 63 ? e & i | r & ~i : e ^ (r | ~i);
    }
    function t5(t) {
        return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
    }
    function r5(t) {
        return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
    }
    var i5 = [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        7,
        4,
        13,
        1,
        10,
        6,
        15,
        3,
        12,
        0,
        9,
        5,
        2,
        14,
        11,
        8,
        3,
        10,
        14,
        4,
        9,
        15,
        8,
        1,
        2,
        7,
        0,
        6,
        13,
        11,
        5,
        12,
        1,
        9,
        11,
        10,
        0,
        8,
        12,
        4,
        13,
        3,
        7,
        15,
        14,
        5,
        6,
        2,
        4,
        0,
        5,
        9,
        7,
        12,
        2,
        10,
        14,
        1,
        3,
        8,
        11,
        6,
        15,
        13
    ], n5 = [
        5,
        14,
        7,
        0,
        9,
        2,
        11,
        4,
        13,
        6,
        15,
        8,
        1,
        10,
        3,
        12,
        6,
        11,
        3,
        7,
        0,
        13,
        5,
        10,
        14,
        15,
        8,
        12,
        4,
        9,
        1,
        2,
        15,
        5,
        1,
        3,
        7,
        14,
        6,
        9,
        11,
        8,
        12,
        2,
        10,
        0,
        4,
        13,
        8,
        6,
        4,
        1,
        3,
        11,
        15,
        0,
        5,
        12,
        2,
        13,
        9,
        7,
        10,
        14,
        12,
        15,
        10,
        4,
        1,
        5,
        8,
        7,
        6,
        2,
        13,
        14,
        0,
        3,
        9,
        11
    ], f5 = [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8,
        7,
        6,
        8,
        13,
        11,
        9,
        7,
        15,
        7,
        12,
        15,
        9,
        11,
        7,
        13,
        12,
        11,
        13,
        6,
        7,
        14,
        9,
        13,
        15,
        14,
        8,
        13,
        6,
        5,
        12,
        7,
        5,
        11,
        12,
        14,
        15,
        14,
        15,
        9,
        8,
        9,
        14,
        5,
        6,
        8,
        6,
        5,
        12,
        9,
        15,
        5,
        11,
        6,
        8,
        13,
        12,
        5,
        12,
        13,
        14,
        11,
        8,
        5,
        6
    ], a5 = [
        8,
        9,
        9,
        11,
        13,
        15,
        15,
        5,
        7,
        7,
        8,
        11,
        14,
        14,
        12,
        6,
        9,
        13,
        15,
        7,
        12,
        8,
        9,
        11,
        7,
        7,
        12,
        7,
        6,
        15,
        13,
        11,
        9,
        7,
        15,
        11,
        8,
        6,
        6,
        14,
        12,
        13,
        5,
        14,
        13,
        13,
        7,
        5,
        15,
        5,
        8,
        11,
        14,
        14,
        6,
        14,
        6,
        9,
        12,
        9,
        12,
        5,
        15,
        8,
        8,
        5,
        12,
        9,
        12,
        5,
        14,
        6,
        8,
        13,
        6,
        5,
        15,
        13,
        11,
        11
    ];
});
var kl = q((cm, Il)=>{
    "use strict";
    var o5 = Dt(), s5 = ct();
    function Yi(t, e, r) {
        if (!(this instanceof Yi)) return new Yi(t, e, r);
        this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, this.outer = null, this._init(o5.toArray(e, r));
    }
    Il.exports = Yi;
    Yi.prototype._init = function(e) {
        e.length > this.blockSize && (e = new this.Hash().update(e).digest()), s5(e.length <= this.blockSize);
        for(var r = e.length; r < this.blockSize; r++)e.push(0);
        for(r = 0; r < e.length; r++)e[r] ^= 54;
        for(this.inner = new this.Hash().update(e), r = 0; r < e.length; r++)e[r] ^= 106;
        this.outer = new this.Hash().update(e);
    };
    Yi.prototype.update = function(e, r) {
        return this.inner.update(e, r), this;
    };
    Yi.prototype.digest = function(e) {
        return this.outer.update(this.inner.digest()), this.outer.digest(e);
    };
});
var qa = q((Cl)=>{
    var Je = Cl;
    Je.utils = Dt();
    Je.common = Wi();
    Je.sha = Ml();
    Je.ripemd = Rl();
    Je.hmac = kl();
    Je.sha1 = Je.sha.sha1;
    Je.sha256 = Je.sha.sha256;
    Je.sha224 = Je.sha.sha224;
    Je.sha384 = Je.sha.sha384;
    Je.sha512 = Je.sha.sha512;
    Je.ripemd160 = Je.ripemd.ripemd160;
});
var Pl = q((dm, Tl)=>{
    Tl.exports = {
        doubles: {
            step: 4,
            points: [
                [
                    "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                    "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                ],
                [
                    "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                    "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                ],
                [
                    "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                    "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                ],
                [
                    "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                    "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                ],
                [
                    "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                    "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                ],
                [
                    "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                    "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                ],
                [
                    "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                    "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                ],
                [
                    "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                    "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                ],
                [
                    "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                    "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                ],
                [
                    "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                    "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                ],
                [
                    "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                    "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                ],
                [
                    "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                    "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                ],
                [
                    "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                    "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                ],
                [
                    "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                    "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                ],
                [
                    "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                    "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                ],
                [
                    "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                    "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                ],
                [
                    "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                    "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                ],
                [
                    "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                    "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                ],
                [
                    "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                    "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                ],
                [
                    "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                    "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                ],
                [
                    "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                    "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                ],
                [
                    "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                    "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                ],
                [
                    "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                    "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                ],
                [
                    "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                    "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                ],
                [
                    "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                    "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                ],
                [
                    "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                    "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                ],
                [
                    "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                    "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                ],
                [
                    "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                    "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                ],
                [
                    "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                    "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                ],
                [
                    "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                    "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                ],
                [
                    "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                    "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                ],
                [
                    "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                    "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                ],
                [
                    "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                    "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                ],
                [
                    "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                    "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                ],
                [
                    "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                    "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                ],
                [
                    "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                    "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                ],
                [
                    "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                    "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                ],
                [
                    "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                    "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                ],
                [
                    "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                    "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                ],
                [
                    "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                    "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                ],
                [
                    "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                    "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                ],
                [
                    "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                    "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                ],
                [
                    "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                    "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                ],
                [
                    "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                    "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                ],
                [
                    "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                    "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                ],
                [
                    "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                    "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                ],
                [
                    "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                    "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                ],
                [
                    "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                    "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                ],
                [
                    "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                    "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                ],
                [
                    "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                    "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                ],
                [
                    "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                    "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                ],
                [
                    "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                    "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                ],
                [
                    "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                    "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                ],
                [
                    "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                    "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                ],
                [
                    "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                    "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                ],
                [
                    "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                    "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                ],
                [
                    "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                    "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                ],
                [
                    "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                    "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                ],
                [
                    "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                    "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                ],
                [
                    "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                    "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                ],
                [
                    "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                    "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                ],
                [
                    "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                    "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                ],
                [
                    "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                    "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                ],
                [
                    "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                    "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                ],
                [
                    "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                    "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                ]
            ]
        },
        naf: {
            wnd: 7,
            points: [
                [
                    "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                    "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                ],
                [
                    "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                    "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                ],
                [
                    "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                    "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                ],
                [
                    "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                    "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                ],
                [
                    "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                    "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                ],
                [
                    "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                    "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                ],
                [
                    "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                    "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                ],
                [
                    "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                    "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                ],
                [
                    "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                    "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                ],
                [
                    "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                    "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                ],
                [
                    "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                    "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                ],
                [
                    "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                    "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                ],
                [
                    "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                    "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                ],
                [
                    "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                    "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                ],
                [
                    "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                    "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                ],
                [
                    "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                    "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                ],
                [
                    "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                    "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                ],
                [
                    "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                    "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                ],
                [
                    "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                    "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                ],
                [
                    "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                    "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                ],
                [
                    "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                    "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                ],
                [
                    "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                    "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                ],
                [
                    "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                    "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                ],
                [
                    "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                    "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                ],
                [
                    "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                    "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                ],
                [
                    "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                    "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                ],
                [
                    "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                    "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                ],
                [
                    "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                    "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                ],
                [
                    "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                    "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                ],
                [
                    "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                    "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                ],
                [
                    "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                    "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                ],
                [
                    "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                    "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                ],
                [
                    "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                    "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                ],
                [
                    "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                    "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                ],
                [
                    "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                    "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                ],
                [
                    "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                    "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                ],
                [
                    "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                    "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                ],
                [
                    "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                    "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                ],
                [
                    "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                    "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                ],
                [
                    "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                    "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                ],
                [
                    "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                    "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                ],
                [
                    "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                    "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                ],
                [
                    "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                    "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                ],
                [
                    "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                    "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                ],
                [
                    "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                    "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                ],
                [
                    "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                    "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                ],
                [
                    "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                    "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                ],
                [
                    "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                    "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                ],
                [
                    "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                    "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                ],
                [
                    "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                    "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                ],
                [
                    "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                    "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                ],
                [
                    "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                    "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                ],
                [
                    "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                    "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                ],
                [
                    "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                    "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                ],
                [
                    "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                    "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                ],
                [
                    "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                    "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                ],
                [
                    "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                    "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                ],
                [
                    "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                    "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                ],
                [
                    "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                    "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                ],
                [
                    "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                    "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                ],
                [
                    "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                    "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                ],
                [
                    "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                    "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                ],
                [
                    "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                    "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                ],
                [
                    "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                    "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                ],
                [
                    "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                    "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                ],
                [
                    "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                    "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                ],
                [
                    "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                    "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                ],
                [
                    "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                    "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                ],
                [
                    "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                    "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                ],
                [
                    "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                    "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                ],
                [
                    "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                    "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                ],
                [
                    "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                    "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                ],
                [
                    "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                    "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                ],
                [
                    "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                    "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                ],
                [
                    "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                    "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                ],
                [
                    "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                    "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                ],
                [
                    "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                    "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                ],
                [
                    "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                    "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                ],
                [
                    "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                    "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                ],
                [
                    "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                    "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                ],
                [
                    "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                    "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                ],
                [
                    "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                    "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                ],
                [
                    "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                    "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                ],
                [
                    "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                    "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                ],
                [
                    "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                    "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                ],
                [
                    "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                    "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                ],
                [
                    "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                    "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                ],
                [
                    "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                    "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                ],
                [
                    "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                    "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                ],
                [
                    "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                    "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                ],
                [
                    "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                    "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                ],
                [
                    "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                    "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                ],
                [
                    "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                    "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                ],
                [
                    "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                    "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                ],
                [
                    "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                    "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                ],
                [
                    "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                    "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                ],
                [
                    "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                    "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                ],
                [
                    "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                    "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                ],
                [
                    "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                    "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                ],
                [
                    "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                    "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                ],
                [
                    "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                    "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                ],
                [
                    "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                    "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                ],
                [
                    "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                    "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                ],
                [
                    "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                    "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                ],
                [
                    "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                    "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                ],
                [
                    "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                    "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                ],
                [
                    "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                    "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                ],
                [
                    "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                    "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                ],
                [
                    "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                    "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                ],
                [
                    "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                    "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                ],
                [
                    "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                    "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                ],
                [
                    "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                    "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                ],
                [
                    "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                    "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                ],
                [
                    "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                    "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                ],
                [
                    "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                    "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                ],
                [
                    "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                    "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                ],
                [
                    "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                    "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                ],
                [
                    "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                    "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                ],
                [
                    "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                    "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                ],
                [
                    "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                    "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                ],
                [
                    "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                    "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                ],
                [
                    "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                    "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                ],
                [
                    "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                    "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                ],
                [
                    "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                    "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                ],
                [
                    "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                    "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                ],
                [
                    "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                    "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                ],
                [
                    "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                    "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                ]
            ]
        }
    };
});
var Ra = q((Nl)=>{
    "use strict";
    var Jo = Nl, qr = qa(), Yo = zo(), h5 = ut(), Dl = h5.assert;
    function Ll(t) {
        t.type === "short" ? this.curve = new Yo.short(t) : t.type === "edwards" ? this.curve = new Yo.edwards(t) : this.curve = new Yo.mont(t), this.g = this.curve.g, this.n = this.curve.n, this.hash = t.hash, Dl(this.g.validate(), "Invalid curve"), Dl(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    Jo.PresetCurve = Ll;
    function Rr(t, e) {
        Object.defineProperty(Jo, t, {
            configurable: !0,
            enumerable: !0,
            get: function() {
                var r = new Ll(e);
                return Object.defineProperty(Jo, t, {
                    configurable: !0,
                    enumerable: !0,
                    value: r
                }), r;
            }
        });
    }
    Rr("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: qr.sha256,
        gRed: !1,
        g: [
            "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
            "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
        ]
    });
    Rr("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: qr.sha256,
        gRed: !1,
        g: [
            "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
            "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
        ]
    });
    Rr("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: qr.sha256,
        gRed: !1,
        g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
        ]
    });
    Rr("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: qr.sha384,
        gRed: !1,
        g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
        ]
    });
    Rr("p521", {
        type: "short",
        prime: null,
        p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
        a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
        b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: qr.sha512,
        gRed: !1,
        g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
        ]
    });
    Rr("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: qr.sha256,
        gRed: !1,
        g: [
            "9"
        ]
    });
    Rr("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: qr.sha256,
        gRed: !1,
        g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
            "6666666666666666666666666666666666666666666666666666666666666658"
        ]
    });
    var $o;
    try {
        $o = Pl();
    } catch (t) {
        $o = void 0;
    }
    Rr("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: qr.sha256,
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
            {
                a: "3086d221a7d46bcde86c90e49284eb15",
                b: "-e4437ed6010e88286f547fa90abfe4c3"
            },
            {
                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                b: "3086d221a7d46bcde86c90e49284eb15"
            }
        ],
        gRed: !1,
        g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            $o
        ]
    });
});
var Ul = q((pm, Fl)=>{
    "use strict";
    var c5 = qa(), bi = Fo(), Ol = ct();
    function Ir(t) {
        if (!(this instanceof Ir)) return new Ir(t);
        this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
        var e = bi.toArray(t.entropy, t.entropyEnc || "hex"), r = bi.toArray(t.nonce, t.nonceEnc || "hex"), i = bi.toArray(t.pers, t.persEnc || "hex");
        Ol(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e, r, i);
    }
    Fl.exports = Ir;
    Ir.prototype._init = function(e, r, i) {
        var n = e.concat(r).concat(i);
        this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
        for(var f = 0; f < this.V.length; f++)this.K[f] = 0, this.V[f] = 1;
        this._update(n), this._reseed = 1, this.reseedInterval = 281474976710656;
    };
    Ir.prototype._hmac = function() {
        return new c5.hmac(this.hash, this.K);
    };
    Ir.prototype._update = function(e) {
        var r = this._hmac().update(this.V).update([
            0
        ]);
        e && (r = r.update(e)), this.K = r.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([
            1
        ]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
    };
    Ir.prototype.reseed = function(e, r, i, n) {
        typeof r != "string" && (n = i, i = r, r = null), e = bi.toArray(e, r), i = bi.toArray(i, n), Ol(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(i || [])), this._reseed = 1;
    };
    Ir.prototype.generate = function(e, r, i, n) {
        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
        typeof r != "string" && (n = i, i = r, r = null), i && (i = bi.toArray(i, n || "hex"), this._update(i));
        for(var f = []; f.length < e;)this.V = this._hmac().update(this.V).digest(), f = f.concat(this.V);
        var o = f.slice(0, e);
        return this._update(i), this._reseed++, bi.encode(o, r);
    };
});
var Hl = q((bm, zl)=>{
    "use strict";
    var u5 = je(), d5 = ut(), Qo = d5.assert;
    function rt(t, e) {
        this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
    }
    zl.exports = rt;
    rt.fromPublic = function(e, r, i) {
        return r instanceof rt ? r : new rt(e, {
            pub: r,
            pubEnc: i
        });
    };
    rt.fromPrivate = function(e, r, i) {
        return r instanceof rt ? r : new rt(e, {
            priv: r,
            privEnc: i
        });
    };
    rt.prototype.validate = function() {
        var e = this.getPublic();
        return e.isInfinity() ? {
            result: !1,
            reason: "Invalid public key"
        } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
            result: !0,
            reason: null
        } : {
            result: !1,
            reason: "Public key * N != O"
        } : {
            result: !1,
            reason: "Public key is not a point"
        };
    };
    rt.prototype.getPublic = function(e, r) {
        return typeof e == "string" && (r = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), r ? this.pub.encode(r, e) : this.pub;
    };
    rt.prototype.getPrivate = function(e) {
        return e === "hex" ? this.priv.toString(16, 2) : this.priv;
    };
    rt.prototype._importPrivate = function(e, r) {
        this.priv = new u5(e, r || 16), this.priv = this.priv.umod(this.ec.curve.n);
    };
    rt.prototype._importPublic = function(e, r) {
        if (e.x || e.y) {
            this.ec.curve.type === "mont" ? Qo(e.x, "Need x coordinate") : (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") && Qo(e.x && e.y, "Need both x and y coordinate"), this.pub = this.ec.curve.point(e.x, e.y);
            return;
        }
        this.pub = this.ec.curve.decodePoint(e, r);
    };
    rt.prototype.derive = function(e) {
        return e.validate() || Qo(e.validate(), "public point not validated"), e.mul(this.priv).getX();
    };
    rt.prototype.sign = function(e, r, i) {
        return this.ec.sign(e, this, r, i);
    };
    rt.prototype.verify = function(e, r) {
        return this.ec.verify(e, r, this);
    };
    rt.prototype.inspect = function() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
    };
});
var Wl = q((vm, Kl)=>{
    "use strict";
    var Ia = je(), rs = ut(), l5 = rs.assert;
    function ka(t, e) {
        if (t instanceof ka) return t;
        this._importDER(t, e) || (l5(t.r && t.s, "Signature without r or s"), this.r = new Ia(t.r, 16), this.s = new Ia(t.s, 16), t.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
    }
    Kl.exports = ka;
    function p5() {
        this.place = 0;
    }
    function es(t, e) {
        var r = t[e.place++];
        if (!(r & 128)) return r;
        var i = r & 15;
        if (i === 0 || i > 4) return !1;
        for(var n = 0, f = 0, o = e.place; f < i; f++, o++)n <<= 8, n |= t[o], n >>>= 0;
        return n <= 127 ? !1 : (e.place = o, n);
    }
    function jl(t) {
        for(var e = 0, r = t.length - 1; !t[e] && !(t[e + 1] & 128) && e < r;)e++;
        return e === 0 ? t : t.slice(e);
    }
    ka.prototype._importDER = function(e, r) {
        e = rs.toArray(e, r);
        var i = new p5;
        if (e[i.place++] !== 48) return !1;
        var n = es(e, i);
        if (n === !1 || n + i.place !== e.length || e[i.place++] !== 2) return !1;
        var f = es(e, i);
        if (f === !1) return !1;
        var o = e.slice(i.place, f + i.place);
        if (i.place += f, e[i.place++] !== 2) return !1;
        var u = es(e, i);
        if (u === !1 || e.length !== u + i.place) return !1;
        var v = e.slice(i.place, u + i.place);
        if (o[0] === 0) {
            if (o[1] & 128) o = o.slice(1);
            else return !1;
        }
        if (v[0] === 0) {
            if (v[1] & 128) v = v.slice(1);
            else return !1;
        }
        return this.r = new Ia(o), this.s = new Ia(v), this.recoveryParam = null, !0;
    };
    function ts(t, e) {
        if (e < 128) {
            t.push(e);
            return;
        }
        var r = 1 + (Math.log(e) / Math.LN2 >>> 3);
        for(t.push(r | 128); --r;)t.push(e >>> (r << 3) & 255);
        t.push(e);
    }
    ka.prototype.toDER = function(e) {
        var r = this.r.toArray(), i = this.s.toArray();
        for(r[0] & 128 && (r = [
            0
        ].concat(r)), i[0] & 128 && (i = [
            0
        ].concat(i)), r = jl(r), i = jl(i); !i[0] && !(i[1] & 128);)i = i.slice(1);
        var n = [
            2
        ];
        ts(n, r.length), n = n.concat(r), n.push(2), ts(n, i.length);
        var f = n.concat(i), o = [
            48
        ];
        return ts(o, f.length), o = o.concat(f), rs.encode(o, e);
    };
});
var Xl = q((ym, Zl)=>{
    "use strict";
    var vi = je(), Vl = Ul(), b5 = ut(), is = Ra(), v5 = pa(), Gl = b5.assert, ns = Hl(), Ca = Wl();
    function Et(t) {
        if (!(this instanceof Et)) return new Et(t);
        typeof t == "string" && (Gl(Object.prototype.hasOwnProperty.call(is, t), "Unknown curve " + t), t = is[t]), t instanceof is.PresetCurve && (t = {
            curve: t
        }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), this.hash = t.hash || t.curve.hash;
    }
    Zl.exports = Et;
    Et.prototype.keyPair = function(e) {
        return new ns(this, e);
    };
    Et.prototype.keyFromPrivate = function(e, r) {
        return ns.fromPrivate(this, e, r);
    };
    Et.prototype.keyFromPublic = function(e, r) {
        return ns.fromPublic(this, e, r);
    };
    Et.prototype.genKeyPair = function(e) {
        e || (e = {});
        for(var r = new Vl({
            hash: this.hash,
            pers: e.pers,
            persEnc: e.persEnc || "utf8",
            entropy: e.entropy || v5(this.hash.hmacStrength),
            entropyEnc: e.entropy && e.entropyEnc || "utf8",
            nonce: this.n.toArray()
        }), i = this.n.byteLength(), n = this.n.sub(new vi(2));;){
            var f = new vi(r.generate(i));
            if (!(f.cmp(n) > 0)) return f.iaddn(1), this.keyFromPrivate(f);
        }
    };
    Et.prototype._truncateToN = function(e, r) {
        var i = e.byteLength() * 8 - this.n.bitLength();
        return i > 0 && (e = e.ushrn(i)), !r && e.cmp(this.n) >= 0 ? e.sub(this.n) : e;
    };
    Et.prototype.sign = function(e, r, i, n) {
        typeof i == "object" && (n = i, i = null), n || (n = {}), r = this.keyFromPrivate(r, i), e = this._truncateToN(new vi(e, 16));
        for(var f = this.n.byteLength(), o = r.getPrivate().toArray("be", f), u = e.toArray("be", f), v = new Vl({
            hash: this.hash,
            entropy: o,
            nonce: u,
            pers: n.pers,
            persEnc: n.persEnc || "utf8"
        }), _ = this.n.sub(new vi(1)), x = 0;; x++){
            var E = n.k ? n.k(x) : new vi(v.generate(this.n.byteLength()));
            if (E = this._truncateToN(E, !0), !(E.cmpn(1) <= 0 || E.cmp(_) >= 0)) {
                var A = this.g.mul(E);
                if (!A.isInfinity()) {
                    var B = A.getX(), I = B.umod(this.n);
                    if (I.cmpn(0) !== 0) {
                        var P = E.invm(this.n).mul(I.mul(r.getPrivate()).iadd(e));
                        if (P = P.umod(this.n), P.cmpn(0) !== 0) {
                            var F = (A.getY().isOdd() ? 1 : 0) | (B.cmp(I) !== 0 ? 2 : 0);
                            return n.canonical && P.cmp(this.nh) > 0 && (P = this.n.sub(P), F ^= 1), new Ca({
                                r: I,
                                s: P,
                                recoveryParam: F
                            });
                        }
                    }
                }
            }
        }
    };
    Et.prototype.verify = function(e, r, i, n) {
        e = this._truncateToN(new vi(e, 16)), i = this.keyFromPublic(i, n), r = new Ca(r, "hex");
        var f = r.r, o = r.s;
        if (f.cmpn(1) < 0 || f.cmp(this.n) >= 0 || o.cmpn(1) < 0 || o.cmp(this.n) >= 0) return !1;
        var u = o.invm(this.n), v = u.mul(e).umod(this.n), _ = u.mul(f).umod(this.n), x;
        return this.curve._maxwellTrick ? (x = this.g.jmulAdd(v, i.getPublic(), _), x.isInfinity() ? !1 : x.eqXToP(f)) : (x = this.g.mulAdd(v, i.getPublic(), _), x.isInfinity() ? !1 : x.getX().umod(this.n).cmp(f) === 0);
    };
    Et.prototype.recoverPubKey = function(t, e, r, i) {
        Gl((3 & r) === r, "The recovery param is more than two bits"), e = new Ca(e, i);
        var n = this.n, f = new vi(t), o = e.r, u = e.s, v = r & 1, _ = r >> 1;
        if (o.cmp(this.curve.p.umod(this.curve.n)) >= 0 && _) throw new Error("Unable to find sencond key candinate");
        _ ? o = this.curve.pointFromX(o.add(this.curve.n), v) : o = this.curve.pointFromX(o, v);
        var x = e.r.invm(n), E = n.sub(f).mul(x).umod(n), A = u.mul(x).umod(n);
        return this.g.mulAdd(E, o, A);
    };
    Et.prototype.getKeyRecoveryParam = function(t, e, r, i) {
        if (e = new Ca(e, i), e.recoveryParam !== null) return e.recoveryParam;
        for(var n = 0; n < 4; n++){
            var f;
            try {
                f = this.recoverPubKey(t, e, n);
            } catch (o) {
                continue;
            }
            if (f.eq(r)) return n;
        }
        throw new Error("Unable to find valid recovery factor");
    };
});
var Ql = q((mm, $l)=>{
    "use strict";
    var af = ut(), Jl = af.assert, Yl = af.parseBytes, Ji = af.cachedProperty;
    function Ze(t, e) {
        this.eddsa = t, this._secret = Yl(e.secret), t.isPoint(e.pub) ? this._pub = e.pub : this._pubBytes = Yl(e.pub);
    }
    Ze.fromPublic = function(e, r) {
        return r instanceof Ze ? r : new Ze(e, {
            pub: r
        });
    };
    Ze.fromSecret = function(e, r) {
        return r instanceof Ze ? r : new Ze(e, {
            secret: r
        });
    };
    Ze.prototype.secret = function() {
        return this._secret;
    };
    Ji(Ze, "pubBytes", function() {
        return this.eddsa.encodePoint(this.pub());
    });
    Ji(Ze, "pub", function() {
        return this._pubBytes ? this.eddsa.decodePoint(this._pubBytes) : this.eddsa.g.mul(this.priv());
    });
    Ji(Ze, "privBytes", function() {
        var e = this.eddsa, r = this.hash(), i = e.encodingLength - 1, n = r.slice(0, e.encodingLength);
        return n[0] &= 248, n[i] &= 127, n[i] |= 64, n;
    });
    Ji(Ze, "priv", function() {
        return this.eddsa.decodeInt(this.privBytes());
    });
    Ji(Ze, "hash", function() {
        return this.eddsa.hash().update(this.secret()).digest();
    });
    Ji(Ze, "messagePrefix", function() {
        return this.hash().slice(this.eddsa.encodingLength);
    });
    Ze.prototype.sign = function(e) {
        return Jl(this._secret, "KeyPair can only verify"), this.eddsa.sign(e, this);
    };
    Ze.prototype.verify = function(e, r) {
        return this.eddsa.verify(e, r, this);
    };
    Ze.prototype.getSecret = function(e) {
        return Jl(this._secret, "KeyPair is public only"), af.encode(this.secret(), e);
    };
    Ze.prototype.getPublic = function(e) {
        return af.encode(this.pubBytes(), e);
    };
    $l.exports = Ze;
});
var t1 = q((gm, e1)=>{
    "use strict";
    var y5 = je(), Ta = ut(), m5 = Ta.assert, Pa = Ta.cachedProperty, g5 = Ta.parseBytes;
    function yi(t, e) {
        this.eddsa = t, typeof e != "object" && (e = g5(e)), Array.isArray(e) && (e = {
            R: e.slice(0, t.encodingLength),
            S: e.slice(t.encodingLength)
        }), m5(e.R && e.S, "Signature without R or S"), t.isPoint(e.R) && (this._R = e.R), e.S instanceof y5 && (this._S = e.S), this._Rencoded = Array.isArray(e.R) ? e.R : e.Rencoded, this._Sencoded = Array.isArray(e.S) ? e.S : e.Sencoded;
    }
    Pa(yi, "S", function() {
        return this.eddsa.decodeInt(this.Sencoded());
    });
    Pa(yi, "R", function() {
        return this.eddsa.decodePoint(this.Rencoded());
    });
    Pa(yi, "Rencoded", function() {
        return this.eddsa.encodePoint(this.R());
    });
    Pa(yi, "Sencoded", function() {
        return this.eddsa.encodeInt(this.S());
    });
    yi.prototype.toBytes = function() {
        return this.Rencoded().concat(this.Sencoded());
    };
    yi.prototype.toHex = function() {
        return Ta.encode(this.toBytes(), "hex").toUpperCase();
    };
    e1.exports = yi;
});
var a1 = q((_m, f1)=>{
    "use strict";
    var _5 = qa(), w5 = Ra(), $i = ut(), x5 = $i.assert, i1 = $i.parseBytes, n1 = Ql(), r1 = t1();
    function st(t) {
        if (x5(t === "ed25519", "only tested with ed25519 so far"), !(this instanceof st)) return new st(t);
        t = w5[t].curve, this.curve = t, this.g = t.g, this.g.precompute(t.n.bitLength() + 1), this.pointClass = t.point().constructor, this.encodingLength = Math.ceil(t.n.bitLength() / 8), this.hash = _5.sha512;
    }
    f1.exports = st;
    st.prototype.sign = function(e, r) {
        e = i1(e);
        var i = this.keyFromSecret(r), n = this.hashInt(i.messagePrefix(), e), f = this.g.mul(n), o = this.encodePoint(f), u = this.hashInt(o, i.pubBytes(), e).mul(i.priv()), v = n.add(u).umod(this.curve.n);
        return this.makeSignature({
            R: f,
            S: v,
            Rencoded: o
        });
    };
    st.prototype.verify = function(e, r, i) {
        e = i1(e), r = this.makeSignature(r);
        var n = this.keyFromPublic(i), f = this.hashInt(r.Rencoded(), n.pubBytes(), e), o = this.g.mul(r.S()), u = r.R().add(n.pub().mul(f));
        return u.eq(o);
    };
    st.prototype.hashInt = function() {
        for(var e = this.hash(), r = 0; r < arguments.length; r++)e.update(arguments[r]);
        return $i.intFromLE(e.digest()).umod(this.curve.n);
    };
    st.prototype.keyFromPublic = function(e) {
        return n1.fromPublic(this, e);
    };
    st.prototype.keyFromSecret = function(e) {
        return n1.fromSecret(this, e);
    };
    st.prototype.makeSignature = function(e) {
        return e instanceof r1 ? e : new r1(this, e);
    };
    st.prototype.encodePoint = function(e) {
        var r = e.getY().toArray("le", this.encodingLength);
        return r[this.encodingLength - 1] |= e.getX().isOdd() ? 128 : 0, r;
    };
    st.prototype.decodePoint = function(e) {
        e = $i.parseBytes(e);
        var r = e.length - 1, i = e.slice(0, r).concat(e[r] & -129), n = (e[r] & 128) !== 0, f = $i.intFromLE(i);
        return this.curve.pointFromY(f, n);
    };
    st.prototype.encodeInt = function(e) {
        return e.toArray("le", this.encodingLength);
    };
    st.prototype.decodeInt = function(e) {
        return $i.intFromLE(e);
    };
    st.prototype.isPoint = function(e) {
        return e instanceof this.pointClass;
    };
});
var Da = q((o1)=>{
    "use strict";
    var mi = o1;
    mi.version = Fd().version;
    mi.utils = ut();
    mi.rand = pa();
    mi.curve = zo();
    mi.curves = Ra();
    mi.ec = Xl();
    mi.eddsa = a1();
});
var Na = q((xm, s1)=>{
    "use strict";
    var La = Xr(), Qi = La.Buffer, St = {}, At;
    for(At in La)La.hasOwnProperty(At) && (At === "SlowBuffer" || At === "Buffer" || (St[At] = La[At]));
    var en = St.Buffer = {};
    for(At in Qi)Qi.hasOwnProperty(At) && (At === "allocUnsafe" || At === "allocUnsafeSlow" || (en[At] = Qi[At]));
    St.Buffer.prototype = Qi.prototype;
    (!en.from || en.from === Uint8Array.from) && (en.from = function(t, e, r) {
        if (typeof t == "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof t);
        if (t && typeof t.length > "u") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
        return Qi(t, e, r);
    });
    en.alloc || (en.alloc = function(t, e, r) {
        if (typeof t != "number") throw new TypeError('The "size" argument must be of type number. Received type ' + typeof t);
        if (t < 0 || t >= 2 * 1073741824) throw new RangeError('The value "' + t + '" is invalid for option "size"');
        var i = Qi(t);
        return !e || e.length === 0 ? i.fill(0) : typeof r == "string" ? i.fill(e, r) : i.fill(e), i;
    });
    if (!St.kStringMaxLength) try {
        St.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (t) {}
    St.constants || (St.constants = {
        MAX_LENGTH: St.kMaxLength
    }, St.kStringMaxLength && (St.constants.MAX_STRING_LENGTH = St.kStringMaxLength));
    s1.exports = St;
});
var Oa = q((h1)=>{
    "use strict";
    var M5 = xe();
    function Bt(t) {
        this._reporterState = {
            obj: null,
            path: [],
            options: t || {},
            errors: []
        };
    }
    h1.Reporter = Bt;
    Bt.prototype.isError = function(e) {
        return e instanceof tn;
    };
    Bt.prototype.save = function() {
        let e = this._reporterState;
        return {
            obj: e.obj,
            pathLen: e.path.length
        };
    };
    Bt.prototype.restore = function(e) {
        let r = this._reporterState;
        r.obj = e.obj, r.path = r.path.slice(0, e.pathLen);
    };
    Bt.prototype.enterKey = function(e) {
        return this._reporterState.path.push(e);
    };
    Bt.prototype.exitKey = function(e) {
        let r = this._reporterState;
        r.path = r.path.slice(0, e - 1);
    };
    Bt.prototype.leaveKey = function(e, r, i) {
        let n = this._reporterState;
        this.exitKey(e), n.obj !== null && (n.obj[r] = i);
    };
    Bt.prototype.path = function() {
        return this._reporterState.path.join("/");
    };
    Bt.prototype.enterObject = function() {
        let e = this._reporterState, r = e.obj;
        return e.obj = {}, r;
    };
    Bt.prototype.leaveObject = function(e) {
        let r = this._reporterState, i = r.obj;
        return r.obj = e, i;
    };
    Bt.prototype.error = function(e) {
        let r, i = this._reporterState, n = e instanceof tn;
        if (n ? r = e : r = new tn(i.path.map(function(f) {
            return "[" + JSON.stringify(f) + "]";
        }).join(""), e.message || e, e.stack), !i.options.partial) throw r;
        return n || i.errors.push(r), r;
    };
    Bt.prototype.wrapResult = function(e) {
        let r = this._reporterState;
        return r.options.partial ? {
            result: this.isError(e) ? null : e,
            errors: r.errors
        } : e;
    };
    function tn(t, e) {
        this.path = t, this.rethrow(e);
    }
    M5(tn, Error);
    tn.prototype.rethrow = function(e) {
        if (this.message = e + " at: " + (this.path || "(shallow)"), Error.captureStackTrace && Error.captureStackTrace(this, tn), !this.stack) try {
            throw new Error(this.message);
        } catch (r) {
            this.stack = r.stack;
        }
        return this;
    };
});
var fn = q((fs)=>{
    "use strict";
    var E5 = xe(), Fa = Oa().Reporter, rn = Na().Buffer;
    function qt(t, e) {
        if (Fa.call(this, e), !rn.isBuffer(t)) {
            this.error("Input not Buffer");
            return;
        }
        this.base = t, this.offset = 0, this.length = t.length;
    }
    E5(qt, Fa);
    fs.DecoderBuffer = qt;
    qt.isDecoderBuffer = function(e) {
        return e instanceof qt ? !0 : typeof e == "object" && rn.isBuffer(e.base) && e.constructor.name === "DecoderBuffer" && typeof e.offset == "number" && typeof e.length == "number" && typeof e.save == "function" && typeof e.restore == "function" && typeof e.isEmpty == "function" && typeof e.readUInt8 == "function" && typeof e.skip == "function" && typeof e.raw == "function";
    };
    qt.prototype.save = function() {
        return {
            offset: this.offset,
            reporter: Fa.prototype.save.call(this)
        };
    };
    qt.prototype.restore = function(e) {
        let r = new qt(this.base);
        return r.offset = e.offset, r.length = this.offset, this.offset = e.offset, Fa.prototype.restore.call(this, e.reporter), r;
    };
    qt.prototype.isEmpty = function() {
        return this.offset === this.length;
    };
    qt.prototype.readUInt8 = function(e) {
        return this.offset + 1 <= this.length ? this.base.readUInt8(this.offset++, !0) : this.error(e || "DecoderBuffer overrun");
    };
    qt.prototype.skip = function(e, r) {
        if (!(this.offset + e <= this.length)) return this.error(r || "DecoderBuffer overrun");
        let i = new qt(this.base);
        return i._reporterState = this._reporterState, i.offset = this.offset, i.length = this.offset + e, this.offset += e, i;
    };
    qt.prototype.raw = function(e) {
        return this.base.slice(e ? e.offset : this.offset, this.length);
    };
    function nn(t, e) {
        if (Array.isArray(t)) this.length = 0, this.value = t.map(function(r) {
            return nn.isEncoderBuffer(r) || (r = new nn(r, e)), this.length += r.length, r;
        }, this);
        else if (typeof t == "number") {
            if (!(0 <= t && t <= 255)) return e.error("non-byte EncoderBuffer value");
            this.value = t, this.length = 1;
        } else if (typeof t == "string") this.value = t, this.length = rn.byteLength(t);
        else if (rn.isBuffer(t)) this.value = t, this.length = t.length;
        else return e.error("Unsupported type: " + typeof t);
    }
    fs.EncoderBuffer = nn;
    nn.isEncoderBuffer = function(e) {
        return e instanceof nn ? !0 : typeof e == "object" && e.constructor.name === "EncoderBuffer" && typeof e.length == "number" && typeof e.join == "function";
    };
    nn.prototype.join = function(e, r) {
        return e || (e = rn.alloc(this.length)), r || (r = 0), this.length === 0 || (Array.isArray(this.value) ? this.value.forEach(function(i) {
            i.join(e, r), r += i.length;
        }) : (typeof this.value == "number" ? e[r] = this.value : typeof this.value == "string" ? e.write(this.value, r) : rn.isBuffer(this.value) && this.value.copy(e, r), r += this.length)), e;
    };
});
var Ua = q((Sm, u1)=>{
    "use strict";
    var S5 = Oa().Reporter, A5 = fn().EncoderBuffer, B5 = fn().DecoderBuffer, nt = ct(), c1 = [
        "seq",
        "seqof",
        "set",
        "setof",
        "objid",
        "bool",
        "gentime",
        "utctime",
        "null_",
        "enum",
        "int",
        "objDesc",
        "bitstr",
        "bmpstr",
        "charstr",
        "genstr",
        "graphstr",
        "ia5str",
        "iso646str",
        "numstr",
        "octstr",
        "printstr",
        "t61str",
        "unistr",
        "utf8str",
        "videostr"
    ], q5 = [
        "key",
        "obj",
        "use",
        "optional",
        "explicit",
        "implicit",
        "def",
        "choice",
        "any",
        "contains"
    ].concat(c1), R5 = [
        "_peekTag",
        "_decodeTag",
        "_use",
        "_decodeStr",
        "_decodeObjid",
        "_decodeTime",
        "_decodeNull",
        "_decodeInt",
        "_decodeBool",
        "_decodeList",
        "_encodeComposite",
        "_encodeStr",
        "_encodeObjid",
        "_encodeTime",
        "_encodeNull",
        "_encodeInt",
        "_encodeBool"
    ];
    function ke(t, e, r) {
        let i = {};
        this._baseState = i, i.name = r, i.enc = t, i.parent = e || null, i.children = null, i.tag = null, i.args = null, i.reverseArgs = null, i.choice = null, i.optional = !1, i.any = !1, i.obj = !1, i.use = null, i.useDecoder = null, i.key = null, i.default = null, i.explicit = null, i.implicit = null, i.contains = null, i.parent || (i.children = [], this._wrap());
    }
    u1.exports = ke;
    var I5 = [
        "enc",
        "parent",
        "children",
        "tag",
        "args",
        "reverseArgs",
        "choice",
        "optional",
        "any",
        "obj",
        "use",
        "alteredUse",
        "key",
        "default",
        "explicit",
        "implicit",
        "contains"
    ];
    ke.prototype.clone = function() {
        let e = this._baseState, r = {};
        I5.forEach(function(n) {
            r[n] = e[n];
        });
        let i = new this.constructor(r.parent);
        return i._baseState = r, i;
    };
    ke.prototype._wrap = function() {
        let e = this._baseState;
        q5.forEach(function(r) {
            this[r] = function() {
                let n = new this.constructor(this);
                return e.children.push(n), n[r].apply(n, arguments);
            };
        }, this);
    };
    ke.prototype._init = function(e) {
        let r = this._baseState;
        nt(r.parent === null), e.call(this), r.children = r.children.filter(function(i) {
            return i._baseState.parent === this;
        }, this), nt.equal(r.children.length, 1, "Root node can have only one child");
    };
    ke.prototype._useArgs = function(e) {
        let r = this._baseState, i = e.filter(function(n) {
            return n instanceof this.constructor;
        }, this);
        e = e.filter(function(n) {
            return !(n instanceof this.constructor);
        }, this), i.length !== 0 && (nt(r.children === null), r.children = i, i.forEach(function(n) {
            n._baseState.parent = this;
        }, this)), e.length !== 0 && (nt(r.args === null), r.args = e, r.reverseArgs = e.map(function(n) {
            if (typeof n != "object" || n.constructor !== Object) return n;
            let f = {};
            return Object.keys(n).forEach(function(o) {
                o == (o | 0) && (o |= 0);
                let u = n[o];
                f[u] = o;
            }), f;
        }));
    };
    R5.forEach(function(t) {
        ke.prototype[t] = function() {
            let r = this._baseState;
            throw new Error(t + " not implemented for encoding: " + r.enc);
        };
    });
    c1.forEach(function(t) {
        ke.prototype[t] = function() {
            let r = this._baseState, i = Array.prototype.slice.call(arguments);
            return nt(r.tag === null), r.tag = t, this._useArgs(i), this;
        };
    });
    ke.prototype.use = function(e) {
        nt(e);
        let r = this._baseState;
        return nt(r.use === null), r.use = e, this;
    };
    ke.prototype.optional = function() {
        let e = this._baseState;
        return e.optional = !0, this;
    };
    ke.prototype.def = function(e) {
        let r = this._baseState;
        return nt(r.default === null), r.default = e, r.optional = !0, this;
    };
    ke.prototype.explicit = function(e) {
        let r = this._baseState;
        return nt(r.explicit === null && r.implicit === null), r.explicit = e, this;
    };
    ke.prototype.implicit = function(e) {
        let r = this._baseState;
        return nt(r.explicit === null && r.implicit === null), r.implicit = e, this;
    };
    ke.prototype.obj = function() {
        let e = this._baseState, r = Array.prototype.slice.call(arguments);
        return e.obj = !0, r.length !== 0 && this._useArgs(r), this;
    };
    ke.prototype.key = function(e) {
        let r = this._baseState;
        return nt(r.key === null), r.key = e, this;
    };
    ke.prototype.any = function() {
        let e = this._baseState;
        return e.any = !0, this;
    };
    ke.prototype.choice = function(e) {
        let r = this._baseState;
        return nt(r.choice === null), r.choice = e, this._useArgs(Object.keys(e).map(function(i) {
            return e[i];
        })), this;
    };
    ke.prototype.contains = function(e) {
        let r = this._baseState;
        return nt(r.use === null), r.contains = e, this;
    };
    ke.prototype._decode = function(e, r) {
        let i = this._baseState;
        if (i.parent === null) return e.wrapResult(i.children[0]._decode(e, r));
        let n = i.default, f = !0, o = null;
        if (i.key !== null && (o = e.enterKey(i.key)), i.optional) {
            let v = null;
            if (i.explicit !== null ? v = i.explicit : i.implicit !== null ? v = i.implicit : i.tag !== null && (v = i.tag), v === null && !i.any) {
                let _ = e.save();
                try {
                    i.choice === null ? this._decodeGeneric(i.tag, e, r) : this._decodeChoice(e, r), f = !0;
                } catch (x) {
                    f = !1;
                }
                e.restore(_);
            } else if (f = this._peekTag(e, v, i.any), e.isError(f)) return f;
        }
        let u;
        if (i.obj && f && (u = e.enterObject()), f) {
            if (i.explicit !== null) {
                let _ = this._decodeTag(e, i.explicit);
                if (e.isError(_)) return _;
                e = _;
            }
            let v = e.offset;
            if (i.use === null && i.choice === null) {
                let _;
                i.any && (_ = e.save());
                let x = this._decodeTag(e, i.implicit !== null ? i.implicit : i.tag, i.any);
                if (e.isError(x)) return x;
                i.any ? n = e.raw(_) : e = x;
            }
            if (r && r.track && i.tag !== null && r.track(e.path(), v, e.length, "tagged"), r && r.track && i.tag !== null && r.track(e.path(), e.offset, e.length, "content"), i.any || (i.choice === null ? n = this._decodeGeneric(i.tag, e, r) : n = this._decodeChoice(e, r)), e.isError(n)) return n;
            if (!i.any && i.choice === null && i.children !== null && i.children.forEach(function(x) {
                x._decode(e, r);
            }), i.contains && (i.tag === "octstr" || i.tag === "bitstr")) {
                let _ = new B5(n);
                n = this._getUse(i.contains, e._reporterState.obj)._decode(_, r);
            }
        }
        return i.obj && f && (n = e.leaveObject(u)), i.key !== null && (n !== null || f === !0) ? e.leaveKey(o, i.key, n) : o !== null && e.exitKey(o), n;
    };
    ke.prototype._decodeGeneric = function(e, r, i) {
        let n = this._baseState;
        return e === "seq" || e === "set" ? null : e === "seqof" || e === "setof" ? this._decodeList(r, e, n.args[0], i) : /str$/.test(e) ? this._decodeStr(r, e, i) : e === "objid" && n.args ? this._decodeObjid(r, n.args[0], n.args[1], i) : e === "objid" ? this._decodeObjid(r, null, null, i) : e === "gentime" || e === "utctime" ? this._decodeTime(r, e, i) : e === "null_" ? this._decodeNull(r, i) : e === "bool" ? this._decodeBool(r, i) : e === "objDesc" ? this._decodeStr(r, e, i) : e === "int" || e === "enum" ? this._decodeInt(r, n.args && n.args[0], i) : n.use !== null ? this._getUse(n.use, r._reporterState.obj)._decode(r, i) : r.error("unknown tag: " + e);
    };
    ke.prototype._getUse = function(e, r) {
        let i = this._baseState;
        return i.useDecoder = this._use(e, r), nt(i.useDecoder._baseState.parent === null), i.useDecoder = i.useDecoder._baseState.children[0], i.implicit !== i.useDecoder._baseState.implicit && (i.useDecoder = i.useDecoder.clone(), i.useDecoder._baseState.implicit = i.implicit), i.useDecoder;
    };
    ke.prototype._decodeChoice = function(e, r) {
        let i = this._baseState, n = null, f = !1;
        return Object.keys(i.choice).some(function(o) {
            let u = e.save(), v = i.choice[o];
            try {
                let _ = v._decode(e, r);
                if (e.isError(_)) return !1;
                n = {
                    type: o,
                    value: _
                }, f = !0;
            } catch (_) {
                return e.restore(u), !1;
            }
            return !0;
        }, this), f ? n : e.error("Choice not matched");
    };
    ke.prototype._createEncoderBuffer = function(e) {
        return new A5(e, this.reporter);
    };
    ke.prototype._encode = function(e, r, i) {
        let n = this._baseState;
        if (n.default !== null && n.default === e) return;
        let f = this._encodeValue(e, r, i);
        if (f !== void 0 && !this._skipDefault(f, r, i)) return f;
    };
    ke.prototype._encodeValue = function(e, r, i) {
        let n = this._baseState;
        if (n.parent === null) return n.children[0]._encode(e, r || new S5);
        let f = null;
        if (this.reporter = r, n.optional && e === void 0) {
            if (n.default !== null) e = n.default;
            else return;
        }
        let o = null, u = !1;
        if (n.any) f = this._createEncoderBuffer(e);
        else if (n.choice) f = this._encodeChoice(e, r);
        else if (n.contains) o = this._getUse(n.contains, i)._encode(e, r), u = !0;
        else if (n.children) o = n.children.map(function(v) {
            if (v._baseState.tag === "null_") return v._encode(null, r, e);
            if (v._baseState.key === null) return r.error("Child should have a key");
            let _ = r.enterKey(v._baseState.key);
            if (typeof e != "object") return r.error("Child expected, but input is not object");
            let x = v._encode(e[v._baseState.key], r, e);
            return r.leaveKey(_), x;
        }, this).filter(function(v) {
            return v;
        }), o = this._createEncoderBuffer(o);
        else if (n.tag === "seqof" || n.tag === "setof") {
            if (!(n.args && n.args.length === 1)) return r.error("Too many args for : " + n.tag);
            if (!Array.isArray(e)) return r.error("seqof/setof, but data is not Array");
            let v = this.clone();
            v._baseState.implicit = null, o = this._createEncoderBuffer(e.map(function(_) {
                let x = this._baseState;
                return this._getUse(x.args[0], e)._encode(_, r);
            }, v));
        } else n.use !== null ? f = this._getUse(n.use, i)._encode(e, r) : (o = this._encodePrimitive(n.tag, e), u = !0);
        if (!n.any && n.choice === null) {
            let v = n.implicit !== null ? n.implicit : n.tag, _ = n.implicit === null ? "universal" : "context";
            v === null ? n.use === null && r.error("Tag could be omitted only for .use()") : n.use === null && (f = this._encodeComposite(v, u, _, o));
        }
        return n.explicit !== null && (f = this._encodeComposite(n.explicit, !1, "context", f)), f;
    };
    ke.prototype._encodeChoice = function(e, r) {
        let i = this._baseState, n = i.choice[e.type];
        return n || nt(!1, e.type + " not found in " + JSON.stringify(Object.keys(i.choice))), n._encode(e.value, r);
    };
    ke.prototype._encodePrimitive = function(e, r) {
        let i = this._baseState;
        if (/str$/.test(e)) return this._encodeStr(r, e);
        if (e === "objid" && i.args) return this._encodeObjid(r, i.reverseArgs[0], i.args[1]);
        if (e === "objid") return this._encodeObjid(r, null, null);
        if (e === "gentime" || e === "utctime") return this._encodeTime(r, e);
        if (e === "null_") return this._encodeNull();
        if (e === "int" || e === "enum") return this._encodeInt(r, i.args && i.reverseArgs[0]);
        if (e === "bool") return this._encodeBool(r);
        if (e === "objDesc") return this._encodeStr(r, e);
        throw new Error("Unsupported tag: " + e);
    };
    ke.prototype._isNumstr = function(e) {
        return /^[0-9 ]*$/.test(e);
    };
    ke.prototype._isPrintstr = function(e) {
        return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(e);
    };
});
var za = q((gi)=>{
    "use strict";
    function d1(t) {
        let e = {};
        return Object.keys(t).forEach(function(r) {
            (r | 0) == r && (r = r | 0);
            let i = t[r];
            e[i] = r;
        }), e;
    }
    gi.tagClass = {
        0: "universal",
        1: "application",
        2: "context",
        3: "private"
    };
    gi.tagClassByName = d1(gi.tagClass);
    gi.tag = {
        0: "end",
        1: "bool",
        2: "int",
        3: "bitstr",
        4: "octstr",
        5: "null_",
        6: "objid",
        7: "objDesc",
        8: "external",
        9: "real",
        10: "enum",
        11: "embed",
        12: "utf8str",
        13: "relativeOid",
        16: "seq",
        17: "set",
        18: "numstr",
        19: "printstr",
        20: "t61str",
        21: "videostr",
        22: "ia5str",
        23: "utctime",
        24: "gentime",
        25: "graphstr",
        26: "iso646str",
        27: "genstr",
        28: "unistr",
        29: "charstr",
        30: "bmpstr"
    };
    gi.tagByName = d1(gi.tag);
});
var os = q((Bm, b1)=>{
    "use strict";
    var k5 = xe(), br = Na().Buffer, l1 = Ua(), as = za();
    function p1(t) {
        this.enc = "der", this.name = t.name, this.entity = t, this.tree = new Ot, this.tree._init(t.body);
    }
    b1.exports = p1;
    p1.prototype.encode = function(e, r) {
        return this.tree._encode(e, r).join();
    };
    function Ot(t) {
        l1.call(this, "der", t);
    }
    k5(Ot, l1);
    Ot.prototype._encodeComposite = function(e, r, i, n) {
        let f = C5(e, r, i, this.reporter);
        if (n.length < 128) {
            let v = br.alloc(2);
            return v[0] = f, v[1] = n.length, this._createEncoderBuffer([
                v,
                n
            ]);
        }
        let o = 1;
        for(let v = n.length; v >= 256; v >>= 8)o++;
        let u = br.alloc(2 + o);
        u[0] = f, u[1] = 128 | o;
        for(let v = 1 + o, _ = n.length; _ > 0; v--, _ >>= 8)u[v] = _ & 255;
        return this._createEncoderBuffer([
            u,
            n
        ]);
    };
    Ot.prototype._encodeStr = function(e, r) {
        if (r === "bitstr") return this._createEncoderBuffer([
            e.unused | 0,
            e.data
        ]);
        if (r === "bmpstr") {
            let i = br.alloc(e.length * 2);
            for(let n = 0; n < e.length; n++)i.writeUInt16BE(e.charCodeAt(n), n * 2);
            return this._createEncoderBuffer(i);
        } else return r === "numstr" ? this._isNumstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: numstr supports only digits and space") : r === "printstr" ? this._isPrintstr(e) ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark") : /str$/.test(r) ? this._createEncoderBuffer(e) : r === "objDesc" ? this._createEncoderBuffer(e) : this.reporter.error("Encoding of string type: " + r + " unsupported");
    };
    Ot.prototype._encodeObjid = function(e, r, i) {
        if (typeof e == "string") {
            if (!r) return this.reporter.error("string objid given, but no values map found");
            if (!r.hasOwnProperty(e)) return this.reporter.error("objid not found in values map");
            e = r[e].split(/[\s.]+/g);
            for(let u = 0; u < e.length; u++)e[u] |= 0;
        } else if (Array.isArray(e)) {
            e = e.slice();
            for(let u = 0; u < e.length; u++)e[u] |= 0;
        }
        if (!Array.isArray(e)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(e));
        if (!i) {
            if (e[1] >= 40) return this.reporter.error("Second objid identifier OOB");
            e.splice(0, 2, e[0] * 40 + e[1]);
        }
        let n = 0;
        for(let u = 0; u < e.length; u++){
            let v = e[u];
            for(n++; v >= 128; v >>= 7)n++;
        }
        let f = br.alloc(n), o = f.length - 1;
        for(let u = e.length - 1; u >= 0; u--){
            let v = e[u];
            for(f[o--] = v & 127; (v >>= 7) > 0;)f[o--] = 128 | v & 127;
        }
        return this._createEncoderBuffer(f);
    };
    function Rt(t) {
        return t < 10 ? "0" + t : t;
    }
    Ot.prototype._encodeTime = function(e, r) {
        let i, n = new Date(e);
        return r === "gentime" ? i = [
            Rt(n.getUTCFullYear()),
            Rt(n.getUTCMonth() + 1),
            Rt(n.getUTCDate()),
            Rt(n.getUTCHours()),
            Rt(n.getUTCMinutes()),
            Rt(n.getUTCSeconds()),
            "Z"
        ].join("") : r === "utctime" ? i = [
            Rt(n.getUTCFullYear() % 100),
            Rt(n.getUTCMonth() + 1),
            Rt(n.getUTCDate()),
            Rt(n.getUTCHours()),
            Rt(n.getUTCMinutes()),
            Rt(n.getUTCSeconds()),
            "Z"
        ].join("") : this.reporter.error("Encoding " + r + " time is not supported yet"), this._encodeStr(i, "octstr");
    };
    Ot.prototype._encodeNull = function() {
        return this._createEncoderBuffer("");
    };
    Ot.prototype._encodeInt = function(e, r) {
        if (typeof e == "string") {
            if (!r) return this.reporter.error("String int or enum given, but no values map");
            if (!r.hasOwnProperty(e)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(e));
            e = r[e];
        }
        if (typeof e != "number" && !br.isBuffer(e)) {
            let f = e.toArray();
            !e.sign && f[0] & 128 && f.unshift(0), e = br.from(f);
        }
        if (br.isBuffer(e)) {
            let f = e.length;
            e.length === 0 && f++;
            let o = br.alloc(f);
            return e.copy(o), e.length === 0 && (o[0] = 0), this._createEncoderBuffer(o);
        }
        if (e < 128) return this._createEncoderBuffer(e);
        if (e < 256) return this._createEncoderBuffer([
            0,
            e
        ]);
        let i = 1;
        for(let f = e; f >= 256; f >>= 8)i++;
        let n = new Array(i);
        for(let f = n.length - 1; f >= 0; f--)n[f] = e & 255, e >>= 8;
        return n[0] & 128 && n.unshift(0), this._createEncoderBuffer(br.from(n));
    };
    Ot.prototype._encodeBool = function(e) {
        return this._createEncoderBuffer(e ? 255 : 0);
    };
    Ot.prototype._use = function(e, r) {
        return typeof e == "function" && (e = e(r)), e._getEncoder("der").tree;
    };
    Ot.prototype._skipDefault = function(e, r, i) {
        let n = this._baseState, f;
        if (n.default === null) return !1;
        let o = e.join();
        if (n.defaultBuffer === void 0 && (n.defaultBuffer = this._encodeValue(n.default, r, i).join()), o.length !== n.defaultBuffer.length) return !1;
        for(f = 0; f < o.length; f++)if (o[f] !== n.defaultBuffer[f]) return !1;
        return !0;
    };
    function C5(t, e, r, i) {
        let n;
        if (t === "seqof" ? t = "seq" : t === "setof" && (t = "set"), as.tagByName.hasOwnProperty(t)) n = as.tagByName[t];
        else if (typeof t == "number" && (t | 0) === t) n = t;
        else return i.error("Unknown tag: " + t);
        return n >= 31 ? i.error("Multi-octet tag encoding unsupported") : (e || (n |= 32), n |= as.tagClassByName[r || "universal"] << 6, n);
    }
});
var y1 = q((qm, v1)=>{
    "use strict";
    var T5 = xe(), ss = os();
    function hs(t) {
        ss.call(this, t), this.enc = "pem";
    }
    T5(hs, ss);
    v1.exports = hs;
    hs.prototype.encode = function(e, r) {
        let n = ss.prototype.encode.call(this, e).toString("base64"), f = [
            "-----BEGIN " + r.label + "-----"
        ];
        for(let o = 0; o < n.length; o += 64)f.push(n.slice(o, o + 64));
        return f.push("-----END " + r.label + "-----"), f.join(`
`);
    };
});
var cs = q((g1)=>{
    "use strict";
    var m1 = g1;
    m1.der = os();
    m1.pem = y1();
});
var ds = q((Im, S1)=>{
    "use strict";
    var P5 = xe(), D5 = je(), _1 = fn().DecoderBuffer, x1 = Ua(), w1 = za();
    function M1(t) {
        this.enc = "der", this.name = t.name, this.entity = t, this.tree = new dt, this.tree._init(t.body);
    }
    S1.exports = M1;
    M1.prototype.decode = function(e, r) {
        return _1.isDecoderBuffer(e) || (e = new _1(e, r)), this.tree._decode(e, r);
    };
    function dt(t) {
        x1.call(this, "der", t);
    }
    P5(dt, x1);
    dt.prototype._peekTag = function(e, r, i) {
        if (e.isEmpty()) return !1;
        let n = e.save(), f = us(e, 'Failed to peek tag: "' + r + '"');
        return e.isError(f) ? f : (e.restore(n), f.tag === r || f.tagStr === r || f.tagStr + "of" === r || i);
    };
    dt.prototype._decodeTag = function(e, r, i) {
        let n = us(e, 'Failed to decode tag of "' + r + '"');
        if (e.isError(n)) return n;
        let f = E1(e, n.primitive, 'Failed to get length of "' + r + '"');
        if (e.isError(f)) return f;
        if (!i && n.tag !== r && n.tagStr !== r && n.tagStr + "of" !== r) return e.error('Failed to match tag: "' + r + '"');
        if (n.primitive || f !== null) return e.skip(f, 'Failed to match body of: "' + r + '"');
        let o = e.save(), u = this._skipUntilEnd(e, 'Failed to skip indefinite length body: "' + this.tag + '"');
        return e.isError(u) ? u : (f = e.offset - o.offset, e.restore(o), e.skip(f, 'Failed to match body of: "' + r + '"'));
    };
    dt.prototype._skipUntilEnd = function(e, r) {
        for(;;){
            let i = us(e, r);
            if (e.isError(i)) return i;
            let n = E1(e, i.primitive, r);
            if (e.isError(n)) return n;
            let f;
            if (i.primitive || n !== null ? f = e.skip(n) : f = this._skipUntilEnd(e, r), e.isError(f)) return f;
            if (i.tagStr === "end") break;
        }
    };
    dt.prototype._decodeList = function(e, r, i, n) {
        let f = [];
        for(; !e.isEmpty();){
            let o = this._peekTag(e, "end");
            if (e.isError(o)) return o;
            let u = i.decode(e, "der", n);
            if (e.isError(u) && o) break;
            f.push(u);
        }
        return f;
    };
    dt.prototype._decodeStr = function(e, r) {
        if (r === "bitstr") {
            let i = e.readUInt8();
            return e.isError(i) ? i : {
                unused: i,
                data: e.raw()
            };
        } else if (r === "bmpstr") {
            let i = e.raw();
            if (i.length % 2 === 1) return e.error("Decoding of string type: bmpstr length mismatch");
            let n = "";
            for(let f = 0; f < i.length / 2; f++)n += String.fromCharCode(i.readUInt16BE(f * 2));
            return n;
        } else if (r === "numstr") {
            let i = e.raw().toString("ascii");
            return this._isNumstr(i) ? i : e.error("Decoding of string type: numstr unsupported characters");
        } else {
            if (r === "octstr") return e.raw();
            if (r === "objDesc") return e.raw();
            if (r === "printstr") {
                let i = e.raw().toString("ascii");
                return this._isPrintstr(i) ? i : e.error("Decoding of string type: printstr unsupported characters");
            } else return /str$/.test(r) ? e.raw().toString() : e.error("Decoding of string type: " + r + " unsupported");
        }
    };
    dt.prototype._decodeObjid = function(e, r, i) {
        let n, f = [], o = 0, u = 0;
        for(; !e.isEmpty();)u = e.readUInt8(), o <<= 7, o |= u & 127, u & 128 || (f.push(o), o = 0);
        u & 128 && f.push(o);
        let v = f[0] / 40 | 0, _ = f[0] % 40;
        if (i ? n = f : n = [
            v,
            _
        ].concat(f.slice(1)), r) {
            let x = r[n.join(" ")];
            x === void 0 && (x = r[n.join(".")]), x !== void 0 && (n = x);
        }
        return n;
    };
    dt.prototype._decodeTime = function(e, r) {
        let i = e.raw().toString(), n, f, o, u, v, _;
        if (r === "gentime") n = i.slice(0, 4) | 0, f = i.slice(4, 6) | 0, o = i.slice(6, 8) | 0, u = i.slice(8, 10) | 0, v = i.slice(10, 12) | 0, _ = i.slice(12, 14) | 0;
        else if (r === "utctime") n = i.slice(0, 2) | 0, f = i.slice(2, 4) | 0, o = i.slice(4, 6) | 0, u = i.slice(6, 8) | 0, v = i.slice(8, 10) | 0, _ = i.slice(10, 12) | 0, n < 70 ? n = 2e3 + n : n = 1900 + n;
        else return e.error("Decoding " + r + " time is not supported yet");
        return Date.UTC(n, f - 1, o, u, v, _, 0);
    };
    dt.prototype._decodeNull = function() {
        return null;
    };
    dt.prototype._decodeBool = function(e) {
        let r = e.readUInt8();
        return e.isError(r) ? r : r !== 0;
    };
    dt.prototype._decodeInt = function(e, r) {
        let i = e.raw(), n = new D5(i);
        return r && (n = r[n.toString(10)] || n), n;
    };
    dt.prototype._use = function(e, r) {
        return typeof e == "function" && (e = e(r)), e._getDecoder("der").tree;
    };
    function us(t, e) {
        let r = t.readUInt8(e);
        if (t.isError(r)) return r;
        let i = w1.tagClass[r >> 6], n = (r & 32) === 0;
        if ((r & 31) === 31) {
            let o = r;
            for(r = 0; (o & 128) === 128;){
                if (o = t.readUInt8(e), t.isError(o)) return o;
                r <<= 7, r |= o & 127;
            }
        } else r &= 31;
        let f = w1.tag[r];
        return {
            cls: i,
            primitive: n,
            tag: r,
            tagStr: f
        };
    }
    function E1(t, e, r) {
        let i = t.readUInt8(r);
        if (t.isError(i)) return i;
        if (!e && i === 128) return null;
        if (!(i & 128)) return i;
        let n = i & 127;
        if (n > 4) return t.error("length octect is too long");
        i = 0;
        for(let f = 0; f < n; f++){
            i <<= 8;
            let o = t.readUInt8(r);
            if (t.isError(o)) return o;
            i |= o;
        }
        return i;
    }
});
var B1 = q((km, A1)=>{
    "use strict";
    var L5 = xe(), N5 = Na().Buffer, ls = ds();
    function ps(t) {
        ls.call(this, t), this.enc = "pem";
    }
    L5(ps, ls);
    A1.exports = ps;
    ps.prototype.decode = function(e, r) {
        let i = e.toString().split(/[\r\n]+/g), n = r.label.toUpperCase(), f = /^-----(BEGIN|END) ([^-]+)-----$/, o = -1, u = -1;
        for(let x = 0; x < i.length; x++){
            let E = i[x].match(f);
            if (E !== null && E[2] === n) {
                if (o === -1) {
                    if (E[1] !== "BEGIN") break;
                    o = x;
                } else {
                    if (E[1] !== "END") break;
                    u = x;
                    break;
                }
            }
        }
        if (o === -1 || u === -1) throw new Error("PEM section not found for: " + n);
        let v = i.slice(o + 1, u).join("");
        v.replace(/[^a-z0-9+/=]+/gi, "");
        let _ = N5.from(v, "base64");
        return ls.prototype.decode.call(this, _, r);
    };
});
var bs = q((R1)=>{
    "use strict";
    var q1 = R1;
    q1.der = ds();
    q1.pem = B1();
});
var k1 = q((I1)=>{
    "use strict";
    var O5 = cs(), F5 = bs(), U5 = xe(), z5 = I1;
    z5.define = function(e, r) {
        return new an(e, r);
    };
    function an(t, e) {
        this.name = t, this.body = e, this.decoders = {}, this.encoders = {};
    }
    an.prototype._createNamed = function(e) {
        let r = this.name;
        function i(n) {
            this._initNamed(n, r);
        }
        return U5(i, e), i.prototype._initNamed = function(f, o) {
            e.call(this, f, o);
        }, new i(this);
    };
    an.prototype._getDecoder = function(e) {
        return e = e || "der", this.decoders.hasOwnProperty(e) || (this.decoders[e] = this._createNamed(F5[e])), this.decoders[e];
    };
    an.prototype.decode = function(e, r, i) {
        return this._getDecoder(r).decode(e, i);
    };
    an.prototype._getEncoder = function(e) {
        return e = e || "der", this.encoders.hasOwnProperty(e) || (this.encoders[e] = this._createNamed(O5[e])), this.encoders[e];
    };
    an.prototype.encode = function(e, r, i) {
        return this._getEncoder(r).encode(e, i);
    };
});
var T1 = q((C1)=>{
    "use strict";
    var Ha = C1;
    Ha.Reporter = Oa().Reporter;
    Ha.DecoderBuffer = fn().DecoderBuffer;
    Ha.EncoderBuffer = fn().EncoderBuffer;
    Ha.Node = Ua();
});
var L1 = q((D1)=>{
    "use strict";
    var P1 = D1;
    P1._reverse = function(e) {
        let r = {};
        return Object.keys(e).forEach(function(i) {
            (i | 0) == i && (i = i | 0);
            let n = e[i];
            r[n] = i;
        }), r;
    };
    P1.der = za();
});
var vs = q((N1)=>{
    "use strict";
    var on = N1;
    on.bignum = je();
    on.define = k1().define;
    on.base = T1();
    on.constants = L1();
    on.decoders = bs();
    on.encoders = cs();
});
var z1 = q((Nm, U1)=>{
    "use strict";
    var Ft = vs(), O1 = Ft.define("Time", function() {
        this.choice({
            utcTime: this.utctime(),
            generalTime: this.gentime()
        });
    }), H5 = Ft.define("AttributeTypeValue", function() {
        this.seq().obj(this.key("type").objid(), this.key("value").any());
    }), ys = Ft.define("AlgorithmIdentifier", function() {
        this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
    }), j5 = Ft.define("SubjectPublicKeyInfo", function() {
        this.seq().obj(this.key("algorithm").use(ys), this.key("subjectPublicKey").bitstr());
    }), K5 = Ft.define("RelativeDistinguishedName", function() {
        this.setof(H5);
    }), W5 = Ft.define("RDNSequence", function() {
        this.seqof(K5);
    }), F1 = Ft.define("Name", function() {
        this.choice({
            rdnSequence: this.use(W5)
        });
    }), V5 = Ft.define("Validity", function() {
        this.seq().obj(this.key("notBefore").use(O1), this.key("notAfter").use(O1));
    }), G5 = Ft.define("Extension", function() {
        this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(!1), this.key("extnValue").octstr());
    }), Z5 = Ft.define("TBSCertificate", function() {
        this.seq().obj(this.key("version").explicit(0).int().optional(), this.key("serialNumber").int(), this.key("signature").use(ys), this.key("issuer").use(F1), this.key("validity").use(V5), this.key("subject").use(F1), this.key("subjectPublicKeyInfo").use(j5), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(G5).optional());
    }), X5 = Ft.define("X509Certificate", function() {
        this.seq().obj(this.key("tbsCertificate").use(Z5), this.key("signatureAlgorithm").use(ys), this.key("signatureValue").bitstr());
    });
    U1.exports = X5;
});
var j1 = q((zt)=>{
    "use strict";
    var Ut = vs();
    zt.certificate = z1();
    var Y5 = Ut.define("RSAPrivateKey", function() {
        this.seq().obj(this.key("version").int(), this.key("modulus").int(), this.key("publicExponent").int(), this.key("privateExponent").int(), this.key("prime1").int(), this.key("prime2").int(), this.key("exponent1").int(), this.key("exponent2").int(), this.key("coefficient").int());
    });
    zt.RSAPrivateKey = Y5;
    var J5 = Ut.define("RSAPublicKey", function() {
        this.seq().obj(this.key("modulus").int(), this.key("publicExponent").int());
    });
    zt.RSAPublicKey = J5;
    var $5 = Ut.define("SubjectPublicKeyInfo", function() {
        this.seq().obj(this.key("algorithm").use(H1), this.key("subjectPublicKey").bitstr());
    });
    zt.PublicKey = $5;
    var H1 = Ut.define("AlgorithmIdentifier", function() {
        this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p").int(), this.key("q").int(), this.key("g").int()).optional());
    }), Q5 = Ut.define("PrivateKeyInfo", function() {
        this.seq().obj(this.key("version").int(), this.key("algorithm").use(H1), this.key("subjectPrivateKey").octstr());
    });
    zt.PrivateKey = Q5;
    var e7 = Ut.define("EncryptedPrivateKeyInfo", function() {
        this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters").int())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
    });
    zt.EncryptedPrivateKey = e7;
    var t7 = Ut.define("DSAPrivateKey", function() {
        this.seq().obj(this.key("version").int(), this.key("p").int(), this.key("q").int(), this.key("g").int(), this.key("pub_key").int(), this.key("priv_key").int());
    });
    zt.DSAPrivateKey = t7;
    zt.DSAparam = Ut.define("DSAparam", function() {
        this.int();
    });
    var r7 = Ut.define("ECPrivateKey", function() {
        this.seq().obj(this.key("version").int(), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(i7), this.key("publicKey").optional().explicit(1).bitstr());
    });
    zt.ECPrivateKey = r7;
    var i7 = Ut.define("ECParameters", function() {
        this.choice({
            namedCurve: this.objid()
        });
    });
    zt.signature = Ut.define("signature", function() {
        this.seq().obj(this.key("r").int(), this.key("s").int());
    });
});
var K1 = q((Fm, n7)=>{
    n7.exports = {
        "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
        "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
        "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
        "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
        "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
        "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
        "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
        "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
        "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
        "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
        "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
        "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
    };
});
var V1 = q((Um, W1)=>{
    var f7 = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m, a7 = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m, o7 = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m, s7 = $n(), h7 = la(), ja = we().Buffer;
    W1.exports = function(t, e) {
        var r = t.toString(), i = r.match(f7), n;
        if (i) {
            var o = "aes" + i[1], u = ja.from(i[2], "hex"), v = ja.from(i[3].replace(/[\r\n]/g, ""), "base64"), _ = s7(e, u.slice(0, 8), parseInt(i[1], 10)).key, x = [], E = h7.createDecipheriv(o, _, u);
            x.push(E.update(v)), x.push(E.final()), n = ja.concat(x);
        } else {
            var f = r.match(o7);
            n = ja.from(f[2].replace(/[\r\n]/g, ""), "base64");
        }
        var A = r.match(a7)[1];
        return {
            tag: A,
            data: n
        };
    };
});
var of = q((zm, Z1)=>{
    var ht = j1(), c7 = K1(), u7 = V1(), d7 = la(), l7 = fo(), ms = we().Buffer;
    Z1.exports = G1;
    function G1(t) {
        var e;
        typeof t == "object" && !ms.isBuffer(t) && (e = t.passphrase, t = t.key), typeof t == "string" && (t = ms.from(t));
        var r = u7(t, e), i = r.tag, n = r.data, f, o;
        switch(i){
            case "CERTIFICATE":
                o = ht.certificate.decode(n, "der").tbsCertificate.subjectPublicKeyInfo;
            case "PUBLIC KEY":
                switch(o || (o = ht.PublicKey.decode(n, "der")), f = o.algorithm.algorithm.join("."), f){
                    case "1.2.840.113549.1.1.1":
                        return ht.RSAPublicKey.decode(o.subjectPublicKey.data, "der");
                    case "1.2.840.10045.2.1":
                        return o.subjectPrivateKey = o.subjectPublicKey, {
                            type: "ec",
                            data: o
                        };
                    case "1.2.840.10040.4.1":
                        return o.algorithm.params.pub_key = ht.DSAparam.decode(o.subjectPublicKey.data, "der"), {
                            type: "dsa",
                            data: o.algorithm.params
                        };
                    default:
                        throw new Error("unknown key id " + f);
                }
            case "ENCRYPTED PRIVATE KEY":
                n = ht.EncryptedPrivateKey.decode(n, "der"), n = p7(n, e);
            case "PRIVATE KEY":
                switch(o = ht.PrivateKey.decode(n, "der"), f = o.algorithm.algorithm.join("."), f){
                    case "1.2.840.113549.1.1.1":
                        return ht.RSAPrivateKey.decode(o.subjectPrivateKey, "der");
                    case "1.2.840.10045.2.1":
                        return {
                            curve: o.algorithm.curve,
                            privateKey: ht.ECPrivateKey.decode(o.subjectPrivateKey, "der").privateKey
                        };
                    case "1.2.840.10040.4.1":
                        return o.algorithm.params.priv_key = ht.DSAparam.decode(o.subjectPrivateKey, "der"), {
                            type: "dsa",
                            params: o.algorithm.params
                        };
                    default:
                        throw new Error("unknown key id " + f);
                }
            case "RSA PUBLIC KEY":
                return ht.RSAPublicKey.decode(n, "der");
            case "RSA PRIVATE KEY":
                return ht.RSAPrivateKey.decode(n, "der");
            case "DSA PRIVATE KEY":
                return {
                    type: "dsa",
                    params: ht.DSAPrivateKey.decode(n, "der")
                };
            case "EC PRIVATE KEY":
                return n = ht.ECPrivateKey.decode(n, "der"), {
                    curve: n.parameters.value,
                    privateKey: n.privateKey
                };
            default:
                throw new Error("unknown key type " + i);
        }
    }
    G1.signature = ht.signature;
    function p7(t, e) {
        var r = t.algorithm.decrypt.kde.kdeparams.salt, i = parseInt(t.algorithm.decrypt.kde.kdeparams.iters.toString(), 10), n = c7[t.algorithm.decrypt.cipher.algo.join(".")], f = t.algorithm.decrypt.cipher.iv, o = t.subjectPrivateKey, u = parseInt(n.split("-")[1], 10) / 8, v = l7.pbkdf2Sync(e, r, i, u, "sha1"), _ = d7.createDecipheriv(n, v, f), x = [];
        return x.push(_.update(o)), x.push(_.final()), ms.concat(x);
    }
});
var gs = q((Hm, b7)=>{
    b7.exports = {
        "1.3.132.0.10": "secp256k1",
        "1.3.132.0.33": "p224",
        "1.2.840.10045.3.1.1": "p192",
        "1.2.840.10045.3.1.7": "p256",
        "1.3.132.0.34": "p384",
        "1.3.132.0.35": "p521"
    };
});
var J1 = q((jm, Wa)=>{
    var it = we().Buffer, _i = X0(), v7 = ma(), y7 = Da().ec, Ka = ya(), m7 = of(), g7 = gs();
    function _7(t, e, r, i, n) {
        var f = m7(e);
        if (f.curve) {
            if (i !== "ecdsa" && i !== "ecdsa/rsa") throw new Error("wrong private key type");
            return w7(t, f);
        } else if (f.type === "dsa") {
            if (i !== "dsa") throw new Error("wrong private key type");
            return x7(t, f, r);
        } else if (i !== "rsa" && i !== "ecdsa/rsa") throw new Error("wrong private key type");
        t = it.concat([
            n,
            t
        ]);
        for(var o = f.modulus.byteLength(), u = [
            0,
            1
        ]; t.length + u.length + 1 < o;)u.push(255);
        u.push(0);
        for(var v = -1; ++v < t.length;)u.push(t[v]);
        var _ = v7(u, f);
        return _;
    }
    function w7(t, e) {
        var r = g7[e.curve.join(".")];
        if (!r) throw new Error("unknown curve " + e.curve.join("."));
        var i = new y7(r), n = i.keyFromPrivate(e.privateKey), f = n.sign(t);
        return it.from(f.toDER());
    }
    function x7(t, e, r) {
        for(var i = e.params.priv_key, n = e.params.p, f = e.params.q, o = e.params.g, u = new Ka(0), v, _ = _s(t, f).mod(f), x = !1, E = X1(i, f, t, r); x === !1;)v = Y1(f, E, r), u = S7(o, v, n, f), x = v.invm(f).imul(_.add(i.mul(u))).mod(f), x.cmpn(0) === 0 && (x = !1, u = new Ka(0));
        return M7(u, x);
    }
    function M7(t, e) {
        t = t.toArray(), e = e.toArray(), t[0] & 128 && (t = [
            0
        ].concat(t)), e[0] & 128 && (e = [
            0
        ].concat(e));
        var r = t.length + e.length + 4, i = [
            48,
            r,
            2,
            t.length
        ];
        return i = i.concat(t, [
            2,
            e.length
        ], e), it.from(i);
    }
    function X1(t, e, r, i) {
        if (t = it.from(t.toArray()), t.length < e.byteLength()) {
            var n = it.alloc(e.byteLength() - t.length);
            t = it.concat([
                n,
                t
            ]);
        }
        var f = r.length, o = E7(r, e), u = it.alloc(f);
        u.fill(1);
        var v = it.alloc(f);
        return v = _i(i, v).update(u).update(it.from([
            0
        ])).update(t).update(o).digest(), u = _i(i, v).update(u).digest(), v = _i(i, v).update(u).update(it.from([
            1
        ])).update(t).update(o).digest(), u = _i(i, v).update(u).digest(), {
            k: v,
            v: u
        };
    }
    function _s(t, e) {
        var r = new Ka(t), i = (t.length << 3) - e.bitLength();
        return i > 0 && r.ishrn(i), r;
    }
    function E7(t, e) {
        t = _s(t, e), t = t.mod(e);
        var r = it.from(t.toArray());
        if (r.length < e.byteLength()) {
            var i = it.alloc(e.byteLength() - r.length);
            r = it.concat([
                i,
                r
            ]);
        }
        return r;
    }
    function Y1(t, e, r) {
        var i, n;
        do {
            for(i = it.alloc(0); i.length * 8 < t.bitLength();)e.v = _i(r, e.k).update(e.v).digest(), i = it.concat([
                i,
                e.v
            ]);
            n = _s(i, t), e.k = _i(r, e.k).update(e.v).update(it.from([
                0
            ])).digest(), e.v = _i(r, e.k).update(e.v).digest();
        }while (n.cmp(t) !== -1);
        return n;
    }
    function S7(t, e, r, i) {
        return t.toRed(Ka.mont(r)).redPow(e).fromRed().mod(i);
    }
    Wa.exports = _7;
    Wa.exports.getKey = X1;
    Wa.exports.makeKey = Y1;
});
var tp = q((Km, ep)=>{
    var ws = we().Buffer, sf = ya(), A7 = Da().ec, Q1 = of(), B7 = gs();
    function q7(t, e, r, i, n) {
        var f = Q1(r);
        if (f.type === "ec") {
            if (i !== "ecdsa" && i !== "ecdsa/rsa") throw new Error("wrong public key type");
            return R7(t, e, f);
        } else if (f.type === "dsa") {
            if (i !== "dsa") throw new Error("wrong public key type");
            return I7(t, e, f);
        } else if (i !== "rsa" && i !== "ecdsa/rsa") throw new Error("wrong public key type");
        e = ws.concat([
            n,
            e
        ]);
        for(var o = f.modulus.byteLength(), u = [
            1
        ], v = 0; e.length + u.length + 2 < o;)u.push(255), v++;
        u.push(0);
        for(var _ = -1; ++_ < e.length;)u.push(e[_]);
        u = ws.from(u);
        var x = sf.mont(f.modulus);
        t = new sf(t).toRed(x), t = t.redPow(new sf(f.publicExponent)), t = ws.from(t.fromRed().toArray());
        var E = v < 8 ? 1 : 0;
        for(o = Math.min(t.length, u.length), t.length !== u.length && (E = 1), _ = -1; ++_ < o;)E |= t[_] ^ u[_];
        return E === 0;
    }
    function R7(t, e, r) {
        var i = B7[r.data.algorithm.curve.join(".")];
        if (!i) throw new Error("unknown curve " + r.data.algorithm.curve.join("."));
        var n = new A7(i), f = r.data.subjectPrivateKey.data;
        return n.verify(e, t, f);
    }
    function I7(t, e, r) {
        var i = r.data.p, n = r.data.q, f = r.data.g, o = r.data.pub_key, u = Q1.signature.decode(t, "der"), v = u.s, _ = u.r;
        $1(v, n), $1(_, n);
        var x = sf.mont(i), E = v.invm(n), A = f.toRed(x).redPow(new sf(e).mul(E).mod(n)).fromRed().mul(o.toRed(x).redPow(_.mul(E).mod(n)).fromRed()).mod(i).mod(n);
        return A.cmp(_) === 0;
    }
    function $1(t, e) {
        if (t.cmpn(0) <= 0) throw new Error("invalid sig");
        if (t.cmp(e) >= e) throw new Error("invalid sig");
    }
    ep.exports = q7;
});
var op = q((Wm, ap)=>{
    var Va = we().Buffer, np = Pi(), Ga = U0(), fp = xe(), k7 = J1(), C7 = tp(), wi = Y0();
    Object.keys(wi).forEach(function(t) {
        wi[t].id = Va.from(wi[t].id, "hex"), wi[t.toLowerCase()] = wi[t];
    });
    function hf(t) {
        Ga.Writable.call(this);
        var e = wi[t];
        if (!e) throw new Error("Unknown message digest");
        this._hashType = e.hash, this._hash = np(e.hash), this._tag = e.id, this._signType = e.sign;
    }
    fp(hf, Ga.Writable);
    hf.prototype._write = function(e, r, i) {
        this._hash.update(e), i();
    };
    hf.prototype.update = function(e, r) {
        return typeof e == "string" && (e = Va.from(e, r)), this._hash.update(e), this;
    };
    hf.prototype.sign = function(e, r) {
        this.end();
        var i = this._hash.digest(), n = k7(i, e, this._hashType, this._signType, this._tag);
        return r ? n.toString(r) : n;
    };
    function cf(t) {
        Ga.Writable.call(this);
        var e = wi[t];
        if (!e) throw new Error("Unknown message digest");
        this._hash = np(e.hash), this._tag = e.id, this._signType = e.sign;
    }
    fp(cf, Ga.Writable);
    cf.prototype._write = function(e, r, i) {
        this._hash.update(e), i();
    };
    cf.prototype.update = function(e, r) {
        return typeof e == "string" && (e = Va.from(e, r)), this._hash.update(e), this;
    };
    cf.prototype.verify = function(e, r, i) {
        typeof r == "string" && (r = Va.from(r, i)), this.end();
        var n = this._hash.digest();
        return C7(r, n, e, this._signType, this._tag);
    };
    function rp(t) {
        return new hf(t);
    }
    function ip(t) {
        return new cf(t);
    }
    ap.exports = {
        Sign: rp,
        Verify: ip,
        createSign: rp,
        createVerify: ip
    };
});
var hp = q((Vm, sp)=>{
    var T7 = Da(), P7 = je();
    sp.exports = function(e) {
        return new xi(e);
    };
    var lt = {
        secp256k1: {
            name: "secp256k1",
            byteLength: 32
        },
        secp224r1: {
            name: "p224",
            byteLength: 28
        },
        prime256v1: {
            name: "p256",
            byteLength: 32
        },
        prime192v1: {
            name: "p192",
            byteLength: 24
        },
        ed25519: {
            name: "ed25519",
            byteLength: 32
        },
        secp384r1: {
            name: "p384",
            byteLength: 48
        },
        secp521r1: {
            name: "p521",
            byteLength: 66
        }
    };
    lt.p224 = lt.secp224r1;
    lt.p256 = lt.secp256r1 = lt.prime256v1;
    lt.p192 = lt.secp192r1 = lt.prime192v1;
    lt.p384 = lt.secp384r1;
    lt.p521 = lt.secp521r1;
    function xi(t) {
        this.curveType = lt[t], this.curveType || (this.curveType = {
            name: t
        }), this.curve = new T7.ec(this.curveType.name), this.keys = void 0;
    }
    xi.prototype.generateKeys = function(t, e) {
        return this.keys = this.curve.genKeyPair(), this.getPublicKey(t, e);
    };
    xi.prototype.computeSecret = function(t, e, r) {
        e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e));
        var i = this.curve.keyFromPublic(t).getPublic(), n = i.mul(this.keys.getPrivate()).getX();
        return xs(n, r, this.curveType.byteLength);
    };
    xi.prototype.getPublicKey = function(t, e) {
        var r = this.keys.getPublic(e === "compressed", !0);
        return e === "hybrid" && (r[r.length - 1] % 2 ? r[0] = 7 : r[0] = 6), xs(r, t);
    };
    xi.prototype.getPrivateKey = function(t) {
        return xs(this.keys.getPrivate(), t);
    };
    xi.prototype.setPublicKey = function(t, e) {
        return e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e)), this.keys._importPublic(t), this;
    };
    xi.prototype.setPrivateKey = function(t, e) {
        e = e || "utf8", Buffer.isBuffer(t) || (t = new Buffer(t, e));
        var r = new P7(t);
        return r = r.toString(16), this.keys = this.curve.genKeyPair(), this.keys._importPrivate(r), this;
    };
    function xs(t, e, r) {
        Array.isArray(t) || (t = t.toArray());
        var i = new Buffer(t);
        if (r && i.length < r) {
            var n = new Buffer(r - i.length);
            n.fill(0), i = Buffer.concat([
                n,
                i
            ]);
        }
        return e ? i.toString(e) : i;
    }
});
var Es = q((Gm, cp)=>{
    var D7 = Pi(), Ms = we().Buffer;
    cp.exports = function(t, e) {
        for(var r = Ms.alloc(0), i = 0, n; r.length < e;)n = L7(i++), r = Ms.concat([
            r,
            D7("sha1").update(t).update(n).digest()
        ]);
        return r.slice(0, e);
    };
    function L7(t) {
        var e = Ms.allocUnsafe(4);
        return e.writeUInt32BE(t, 0), e;
    }
});
var Ss = q((Zm, up)=>{
    up.exports = function(e, r) {
        for(var i = e.length, n = -1; ++n < i;)e[n] ^= r[n];
        return e;
    };
});
var As = q((Xm, lp)=>{
    var dp = je(), N7 = we().Buffer;
    function O7(t, e) {
        return N7.from(t.toRed(dp.mont(e.modulus)).redPow(new dp(e.publicExponent)).fromRed().toArray());
    }
    lp.exports = O7;
});
var yp = q((Ym, vp)=>{
    var F7 = of(), Bs = Jr(), U7 = Pi(), pp = Es(), bp = Ss(), qs = je(), z7 = As(), H7 = ma(), Ht = we().Buffer;
    vp.exports = function(e, r, i) {
        var n;
        e.padding ? n = e.padding : i ? n = 1 : n = 4;
        var f = F7(e), o;
        if (n === 4) o = j7(f, r);
        else if (n === 1) o = K7(f, r, i);
        else if (n === 3) {
            if (o = new qs(r), o.cmp(f.modulus) >= 0) throw new Error("data too long for modulus");
        } else throw new Error("unknown padding");
        return i ? H7(o, f) : z7(o, f);
    };
    function j7(t, e) {
        var r = t.modulus.byteLength(), i = e.length, n = U7("sha1").update(Ht.alloc(0)).digest(), f = n.length, o = 2 * f;
        if (i > r - o - 2) throw new Error("message too long");
        var u = Ht.alloc(r - i - o - 2), v = r - f - 1, _ = Bs(f), x = bp(Ht.concat([
            n,
            u,
            Ht.alloc(1, 1),
            e
        ], v), pp(_, v)), E = bp(_, pp(x, f));
        return new qs(Ht.concat([
            Ht.alloc(1),
            E,
            x
        ], r));
    }
    function K7(t, e, r) {
        var i = e.length, n = t.modulus.byteLength();
        if (i > n - 11) throw new Error("message too long");
        var f;
        return r ? f = Ht.alloc(n - i - 3, 255) : f = W7(n - i - 3), new qs(Ht.concat([
            Ht.from([
                0,
                r ? 1 : 2
            ]),
            f,
            Ht.alloc(1),
            e
        ], n));
    }
    function W7(t) {
        for(var e = Ht.allocUnsafe(t), r = 0, i = Bs(t * 2), n = 0, f; r < t;)n === i.length && (i = Bs(t * 2), n = 0), f = i[n++], f && (e[r++] = f);
        return e;
    }
});
var xp = q((Jm, wp)=>{
    var V7 = of(), mp = Es(), gp = Ss(), _p = je(), G7 = ma(), Z7 = Pi(), X7 = As(), uf = we().Buffer;
    wp.exports = function(e, r, i) {
        var n;
        e.padding ? n = e.padding : i ? n = 1 : n = 4;
        var f = V7(e), o = f.modulus.byteLength();
        if (r.length > o || new _p(r).cmp(f.modulus) >= 0) throw new Error("decryption error");
        var u;
        i ? u = X7(new _p(r), f) : u = G7(r, f);
        var v = uf.alloc(o - u.length);
        if (u = uf.concat([
            v,
            u
        ], o), n === 4) return Y7(f, u);
        if (n === 1) return J7(f, u, i);
        if (n === 3) return u;
        throw new Error("unknown padding");
    };
    function Y7(t, e) {
        var r = t.modulus.byteLength(), i = Z7("sha1").update(uf.alloc(0)).digest(), n = i.length;
        if (e[0] !== 0) throw new Error("decryption error");
        var f = e.slice(1, n + 1), o = e.slice(n + 1), u = gp(f, mp(o, n)), v = gp(o, mp(u, r - n - 1));
        if ($7(i, v.slice(0, n))) throw new Error("decryption error");
        for(var _ = n; v[_] === 0;)_++;
        if (v[_++] !== 1) throw new Error("decryption error");
        return v.slice(_);
    }
    function J7(t, e, r) {
        for(var i = e.slice(0, 2), n = 2, f = 0; e[n++] !== 0;)if (n >= e.length) {
            f++;
            break;
        }
        var o = e.slice(2, n - 1);
        if ((i.toString("hex") !== "0002" && !r || i.toString("hex") !== "0001" && r) && f++, o.length < 8 && f++, f) throw new Error("decryption error");
        return e.slice(n);
    }
    function $7(t, e) {
        t = uf.from(t), e = uf.from(e);
        var r = 0, i = t.length;
        t.length !== e.length && (r++, i = Math.min(t.length, e.length));
        for(var n = -1; ++n < i;)r += t[n] ^ e[n];
        return r;
    }
});
var Mp = q((Mi)=>{
    Mi.publicEncrypt = yp();
    Mi.privateDecrypt = xp();
    Mi.privateEncrypt = function(e, r) {
        return Mi.publicEncrypt(e, r, !0);
    };
    Mi.publicDecrypt = function(e, r) {
        return Mi.privateDecrypt(e, r, !0);
    };
});
var Tp = q((df)=>{
    "use strict";
    function Ep() {
        throw new Error(`secure random number generation not supported by this browser
use chrome, FireFox or Internet Explorer 11`);
    }
    var Ap = we(), Sp = Jr(), Bp = Ap.Buffer, qp = Ap.kMaxLength, Rs = global.crypto || global.msCrypto, Rp = Math.pow(2, 32) - 1;
    function Ip(t, e) {
        if (typeof t != "number" || t !== t) throw new TypeError("offset must be a number");
        if (t > Rp || t < 0) throw new TypeError("offset must be a uint32");
        if (t > qp || t > e) throw new RangeError("offset out of range");
    }
    function kp(t, e, r) {
        if (typeof t != "number" || t !== t) throw new TypeError("size must be a number");
        if (t > Rp || t < 0) throw new TypeError("size must be a uint32");
        if (t + e > r || t > qp) throw new RangeError("buffer too small");
    }
    Rs && Rs.getRandomValues || false ? (df.randomFill = Q7, df.randomFillSync = e9) : (df.randomFill = Ep, df.randomFillSync = Ep);
    function Q7(t, e, r, i) {
        if (!Bp.isBuffer(t) && !(t instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        if (typeof e == "function") i = e, e = 0, r = t.length;
        else if (typeof r == "function") i = r, r = t.length - e;
        else if (typeof i != "function") throw new TypeError('"cb" argument must be a function');
        return Ip(e, t.length), kp(r, e, t.length), Cp(t, e, r, i);
    }
    function Cp(t, e, r, i) {
        var n = t.buffer, f = new Uint8Array(n, e, r);
        if (Rs.getRandomValues(f), i) {
            process.nextTick(function() {
                i(null, t);
            });
            return;
        }
        return t;
        if (i) {
            Sp(r, function(u, v) {
                if (u) return i(u);
                v.copy(t, e), i(null, t);
            });
            return;
        }
        var o = Sp(r);
        return o.copy(t, e), t;
    }
    function e9(t, e, r) {
        if (typeof e > "u" && (e = 0), !Bp.isBuffer(t) && !(t instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
        return Ip(e, t.length), r === void 0 && (r = t.length - e), kp(r, e, t.length), Cp(t, e, r);
    }
});
var Is = q((Me)=>{
    "use strict";
    Me.randomBytes = Me.rng = Me.pseudoRandomBytes = Me.prng = Jr();
    Me.createHash = Me.Hash = Pi();
    Me.createHmac = Me.Hmac = X0();
    var t9 = $c(), r9 = Object.keys(t9), i9 = [
        "sha1",
        "sha224",
        "sha256",
        "sha384",
        "sha512",
        "md5",
        "rmd160"
    ].concat(r9);
    Me.getHashes = function() {
        return i9;
    };
    var Pp = fo();
    Me.pbkdf2 = Pp.pbkdf2;
    Me.pbkdf2Sync = Pp.pbkdf2Sync;
    var tr = _d();
    Me.Cipher = tr.Cipher;
    Me.createCipher = tr.createCipher;
    Me.Cipheriv = tr.Cipheriv;
    Me.createCipheriv = tr.createCipheriv;
    Me.Decipher = tr.Decipher;
    Me.createDecipher = tr.createDecipher;
    Me.Decipheriv = tr.Decipheriv;
    Me.createDecipheriv = tr.createDecipheriv;
    Me.getCiphers = tr.getCiphers;
    Me.listCiphers = tr.listCiphers;
    var lf = Pd();
    Me.DiffieHellmanGroup = lf.DiffieHellmanGroup;
    Me.createDiffieHellmanGroup = lf.createDiffieHellmanGroup;
    Me.getDiffieHellman = lf.getDiffieHellman;
    Me.createDiffieHellman = lf.createDiffieHellman;
    Me.DiffieHellman = lf.DiffieHellman;
    var Za = op();
    Me.createSign = Za.createSign;
    Me.Sign = Za.Sign;
    Me.createVerify = Za.createVerify;
    Me.Verify = Za.Verify;
    Me.createECDH = hp();
    var Xa = Mp();
    Me.publicEncrypt = Xa.publicEncrypt;
    Me.privateEncrypt = Xa.privateEncrypt;
    Me.publicDecrypt = Xa.publicDecrypt;
    Me.privateDecrypt = Xa.privateDecrypt;
    var Dp = Tp();
    Me.randomFill = Dp.randomFill;
    Me.randomFillSync = Dp.randomFillSync;
    Me.createCredentials = function() {
        throw new Error([
            "sorry, createCredentials is not implemented yet",
            "we accept pull requests",
            "https://github.com/crypto-browserify/crypto-browserify"
        ].join(`
`));
    };
    Me.constants = {
        DH_CHECK_P_NOT_SAFE_PRIME: 2,
        DH_CHECK_P_NOT_PRIME: 1,
        DH_UNABLE_TO_CHECK_GENERATOR: 4,
        DH_NOT_SUITABLE_GENERATOR: 8,
        NPN_ENABLED: 1,
        ALPN_ENABLED: 1,
        RSA_PKCS1_PADDING: 1,
        RSA_SSLV23_PADDING: 2,
        RSA_NO_PADDING: 3,
        RSA_PKCS1_OAEP_PADDING: 4,
        RSA_X931_PADDING: 5,
        RSA_PKCS1_PSS_PADDING: 6,
        POINT_CONVERSION_COMPRESSED: 2,
        POINT_CONVERSION_UNCOMPRESSED: 4,
        POINT_CONVERSION_HYBRID: 6
    };
});
var sn = {};
Hp(sn, {
    default: ()=>n9
});
module.exports = jp(sn);
var Lp = ks(Is());
Sn(sn, ks(Is()), module.exports);
var n9 = Lp.default; /*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
*/ 

},{"5bbaa25c67b48a86":"b8aC1","47560951658fc921":"5HX1W"}],"b8aC1":[function(require,module,exports) {
var q = Object.create;
var p = Object.defineProperty;
var A = Object.getOwnPropertyDescriptor;
var I = Object.getOwnPropertyNames;
var Q = Object.getPrototypeOf, S = Object.prototype.hasOwnProperty;
var N = (e, t)=>()=>(t || e((t = {
            exports: {}
        }).exports, t), t.exports), O = (e, t)=>{
    for(var n in t)p(e, n, {
        get: t[n],
        enumerable: !0
    });
}, m = (e, t, n, w)=>{
    if (t && typeof t == "object" || typeof t == "function") for (let f of I(t))!S.call(e, f) && f !== n && p(e, f, {
        get: ()=>t[f],
        enumerable: !(w = A(t, f)) || w.enumerable
    });
    return e;
}, h = (e, t, n)=>(m(e, t, "default"), n && m(n, t, "default")), y = (e, t, n)=>(n = e != null ? q(Q(e)) : {}, m(t || !e || !e.__esModule ? p(n, "default", {
        value: e,
        enumerable: !0
    }) : n, e)), U = (e)=>m(p({}, "__esModule", {
        value: !0
    }), e);
var v = N((F, E)=>{
    var r = E.exports = {}, i, u;
    function T() {
        throw new Error("setTimeout has not been defined");
    }
    function g() {
        throw new Error("clearTimeout has not been defined");
    }
    (function() {
        try {
            typeof setTimeout == "function" ? i = setTimeout : i = T;
        } catch (e) {
            i = T;
        }
        try {
            typeof clearTimeout == "function" ? u = clearTimeout : u = g;
        } catch (e) {
            u = g;
        }
    })();
    function b(e) {
        if (i === setTimeout) return setTimeout(e, 0);
        if ((i === T || !i) && setTimeout) return i = setTimeout, setTimeout(e, 0);
        try {
            return i(e, 0);
        } catch (t) {
            try {
                return i.call(null, e, 0);
            } catch (n) {
                return i.call(this, e, 0);
            }
        }
    }
    function j(e) {
        if (u === clearTimeout) return clearTimeout(e);
        if ((u === g || !u) && clearTimeout) return u = clearTimeout, clearTimeout(e);
        try {
            return u(e);
        } catch (t) {
            try {
                return u.call(null, e);
            } catch (n) {
                return u.call(this, e);
            }
        }
    }
    var o = [], s = !1, a, d = -1;
    function z() {
        !s || !a || (s = !1, a.length ? o = a.concat(o) : d = -1, o.length && x());
    }
    function x() {
        if (!s) {
            var e = b(z);
            s = !0;
            for(var t = o.length; t;){
                for(a = o, o = []; ++d < t;)a && a[d].run();
                d = -1, t = o.length;
            }
            a = null, s = !1, j(e);
        }
    }
    r.nextTick = function(e) {
        var t = new Array(arguments.length - 1);
        if (arguments.length > 1) for(var n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];
        o.push(new L(e, t)), o.length === 1 && !s && b(x);
    };
    function L(e, t) {
        this.fun = e, this.array = t;
    }
    L.prototype.run = function() {
        this.fun.apply(null, this.array);
    };
    r.title = "browser";
    r.browser = !0;
    r.env = {};
    r.argv = [];
    r.version = "";
    r.versions = {};
    function c() {}
    r.on = c;
    r.addListener = c;
    r.once = c;
    r.off = c;
    r.removeListener = c;
    r.removeAllListeners = c;
    r.emit = c;
    r.prependListener = c;
    r.prependOnceListener = c;
    r.listeners = function(e) {
        return [];
    };
    r.binding = function(e) {
        throw new Error("process.binding is not supported");
    };
    r.cwd = function() {
        return "/";
    };
    r.chdir = function(e) {
        throw new Error("process.chdir is not supported");
    };
    r.umask = function() {
        return 0;
    };
});
var l = {};
O(l, {
    default: ()=>B
});
module.exports = U(l);
var C = y(v());
h(l, y(v()), module.exports);
var B = C.default;

},{}],"5HX1W":[function(require,module,exports) {
var Er = Object.create;
var N = Object.defineProperty;
var dr = Object.getOwnPropertyDescriptor;
var gr = Object.getOwnPropertyNames;
var mr = Object.getPrototypeOf, Ir = Object.prototype.hasOwnProperty;
var $ = (i, r)=>()=>(r || i((r = {
            exports: {}
        }).exports, r), r.exports), Fr = (i, r)=>{
    for(var t in r)N(i, t, {
        get: r[t],
        enumerable: !0
    });
}, L = (i, r, t, n)=>{
    if (r && typeof r == "object" || typeof r == "function") for (let e of gr(r))!Ir.call(i, e) && e !== t && N(i, e, {
        get: ()=>r[e],
        enumerable: !(n = dr(r, e)) || n.enumerable
    });
    return i;
}, S = (i, r, t)=>(L(i, r, "default"), t && L(t, r, "default")), J = (i, r, t)=>(t = i != null ? Er(mr(i)) : {}, L(r || !i || !i.__esModule ? N(t, "default", {
        value: i,
        enumerable: !0
    }) : t, i)), Ar = (i)=>L(N({}, "__esModule", {
        value: !0
    }), i);
var Q = $((M)=>{
    "use strict";
    M.byteLength = Rr;
    M.toByteArray = Cr;
    M.fromByteArray = Lr;
    var B = [], w = [], Ur = typeof Uint8Array < "u" ? Uint8Array : Array, P = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    for(m = 0, K = P.length; m < K; ++m)B[m] = P[m], w[P.charCodeAt(m)] = m;
    var m, K;
    w["-".charCodeAt(0)] = 62;
    w["_".charCodeAt(0)] = 63;
    function Z(i) {
        var r = i.length;
        if (r % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
        var t = i.indexOf("=");
        t === -1 && (t = r);
        var n = t === r ? 0 : 4 - t % 4;
        return [
            t,
            n
        ];
    }
    function Rr(i) {
        var r = Z(i), t = r[0], n = r[1];
        return (t + n) * 3 / 4 - n;
    }
    function Tr(i, r, t) {
        return (r + t) * 3 / 4 - t;
    }
    function Cr(i) {
        var r, t = Z(i), n = t[0], e = t[1], o = new Ur(Tr(i, n, e)), u = 0, f = e > 0 ? n - 4 : n, c;
        for(c = 0; c < f; c += 4)r = w[i.charCodeAt(c)] << 18 | w[i.charCodeAt(c + 1)] << 12 | w[i.charCodeAt(c + 2)] << 6 | w[i.charCodeAt(c + 3)], o[u++] = r >> 16 & 255, o[u++] = r >> 8 & 255, o[u++] = r & 255;
        return e === 2 && (r = w[i.charCodeAt(c)] << 2 | w[i.charCodeAt(c + 1)] >> 4, o[u++] = r & 255), e === 1 && (r = w[i.charCodeAt(c)] << 10 | w[i.charCodeAt(c + 1)] << 4 | w[i.charCodeAt(c + 2)] >> 2, o[u++] = r >> 8 & 255, o[u++] = r & 255), o;
    }
    function Sr(i) {
        return B[i >> 18 & 63] + B[i >> 12 & 63] + B[i >> 6 & 63] + B[i & 63];
    }
    function _r(i, r, t) {
        for(var n, e = [], o = r; o < t; o += 3)n = (i[o] << 16 & 16711680) + (i[o + 1] << 8 & 65280) + (i[o + 2] & 255), e.push(Sr(n));
        return e.join("");
    }
    function Lr(i) {
        for(var r, t = i.length, n = t % 3, e = [], o = 16383, u = 0, f = t - n; u < f; u += o)e.push(_r(i, u, u + o > f ? f : u + o));
        return n === 1 ? (r = i[t - 1], e.push(B[r >> 2] + B[r << 4 & 63] + "==")) : n === 2 && (r = (i[t - 2] << 8) + i[t - 1], e.push(B[r >> 10] + B[r >> 4 & 63] + B[r << 2 & 63] + "=")), e.join("");
    }
});
var v = $((O)=>{
    O.read = function(i, r, t, n, e) {
        var o, u, f = e * 8 - n - 1, c = (1 << f) - 1, l = c >> 1, s = -7, p = t ? e - 1 : 0, F = t ? -1 : 1, x = i[r + p];
        for(p += F, o = x & (1 << -s) - 1, x >>= -s, s += f; s > 0; o = o * 256 + i[r + p], p += F, s -= 8);
        for(u = o & (1 << -s) - 1, o >>= -s, s += n; s > 0; u = u * 256 + i[r + p], p += F, s -= 8);
        if (o === 0) o = 1 - l;
        else {
            if (o === c) return u ? NaN : (x ? -1 : 1) * (1 / 0);
            u = u + Math.pow(2, n), o = o - l;
        }
        return (x ? -1 : 1) * u * Math.pow(2, o - n);
    };
    O.write = function(i, r, t, n, e, o) {
        var u, f, c, l = o * 8 - e - 1, s = (1 << l) - 1, p = s >> 1, F = e === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, x = n ? 0 : o - 1, b = n ? 1 : -1, Br = r < 0 || r === 0 && 1 / r < 0 ? 1 : 0;
        for(r = Math.abs(r), isNaN(r) || r === 1 / 0 ? (f = isNaN(r) ? 1 : 0, u = s) : (u = Math.floor(Math.log(r) / Math.LN2), r * (c = Math.pow(2, -u)) < 1 && (u--, c *= 2), u + p >= 1 ? r += F / c : r += F * Math.pow(2, 1 - p), r * c >= 2 && (u++, c /= 2), u + p >= s ? (f = 0, u = s) : u + p >= 1 ? (f = (r * c - 1) * Math.pow(2, e), u = u + p) : (f = r * Math.pow(2, p - 1) * Math.pow(2, e), u = 0)); e >= 8; i[t + x] = f & 255, x += b, f /= 256, e -= 8);
        for(u = u << e | f, l += e; l > 0; i[t + x] = u & 255, x += b, u /= 256, l -= 8);
        i[t + x - b] |= Br * 128;
    };
});
var z = $((T)=>{
    "use strict";
    var G = Q(), U = v(), rr = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
    T.Buffer = h;
    T.SlowBuffer = $r;
    T.INSPECT_MAX_BYTES = 50;
    var k = 2147483647;
    T.kMaxLength = k;
    h.TYPED_ARRAY_SUPPORT = Nr();
    !h.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    function Nr() {
        try {
            let i = new Uint8Array(1), r = {
                foo: function() {
                    return 42;
                }
            };
            return Object.setPrototypeOf(r, Uint8Array.prototype), Object.setPrototypeOf(i, r), i.foo() === 42;
        } catch (i) {
            return !1;
        }
    }
    Object.defineProperty(h.prototype, "parent", {
        enumerable: !0,
        get: function() {
            if (h.isBuffer(this)) return this.buffer;
        }
    });
    Object.defineProperty(h.prototype, "offset", {
        enumerable: !0,
        get: function() {
            if (h.isBuffer(this)) return this.byteOffset;
        }
    });
    function d(i) {
        if (i > k) throw new RangeError('The value "' + i + '" is invalid for option "size"');
        let r = new Uint8Array(i);
        return Object.setPrototypeOf(r, h.prototype), r;
    }
    function h(i, r, t) {
        if (typeof i == "number") {
            if (typeof r == "string") throw new TypeError('The "string" argument must be of type string. Received type number');
            return j(i);
        }
        return er(i, r, t);
    }
    h.poolSize = 8192;
    function er(i, r, t) {
        if (typeof i == "string") return kr(i, r);
        if (ArrayBuffer.isView(i)) return Dr(i);
        if (i == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof i);
        if (E(i, ArrayBuffer) || i && E(i.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (E(i, SharedArrayBuffer) || i && E(i.buffer, SharedArrayBuffer))) return q(i, r, t);
        if (typeof i == "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
        let n = i.valueOf && i.valueOf();
        if (n != null && n !== i) return h.from(n, r, t);
        let e = br(i);
        if (e) return e;
        if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof i[Symbol.toPrimitive] == "function") return h.from(i[Symbol.toPrimitive]("string"), r, t);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof i);
    }
    h.from = function(i, r, t) {
        return er(i, r, t);
    };
    Object.setPrototypeOf(h.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(h, Uint8Array);
    function or(i) {
        if (typeof i != "number") throw new TypeError('"size" argument must be of type number');
        if (i < 0) throw new RangeError('The value "' + i + '" is invalid for option "size"');
    }
    function Mr(i, r, t) {
        return or(i), i <= 0 ? d(i) : r !== void 0 ? typeof t == "string" ? d(i).fill(r, t) : d(i).fill(r) : d(i);
    }
    h.alloc = function(i, r, t) {
        return Mr(i, r, t);
    };
    function j(i) {
        return or(i), d(i < 0 ? 0 : H(i) | 0);
    }
    h.allocUnsafe = function(i) {
        return j(i);
    };
    h.allocUnsafeSlow = function(i) {
        return j(i);
    };
    function kr(i, r) {
        if ((typeof r != "string" || r === "") && (r = "utf8"), !h.isEncoding(r)) throw new TypeError("Unknown encoding: " + r);
        let t = ur(i, r) | 0, n = d(t), e = n.write(i, r);
        return e !== t && (n = n.slice(0, e)), n;
    }
    function Y(i) {
        let r = i.length < 0 ? 0 : H(i.length) | 0, t = d(r);
        for(let n = 0; n < r; n += 1)t[n] = i[n] & 255;
        return t;
    }
    function Dr(i) {
        if (E(i, Uint8Array)) {
            let r = new Uint8Array(i);
            return q(r.buffer, r.byteOffset, r.byteLength);
        }
        return Y(i);
    }
    function q(i, r, t) {
        if (r < 0 || i.byteLength < r) throw new RangeError('"offset" is outside of buffer bounds');
        if (i.byteLength < r + (t || 0)) throw new RangeError('"length" is outside of buffer bounds');
        let n;
        return r === void 0 && t === void 0 ? n = new Uint8Array(i) : t === void 0 ? n = new Uint8Array(i, r) : n = new Uint8Array(i, r, t), Object.setPrototypeOf(n, h.prototype), n;
    }
    function br(i) {
        if (h.isBuffer(i)) {
            let r = H(i.length) | 0, t = d(r);
            return t.length === 0 || i.copy(t, 0, 0, r), t;
        }
        if (i.length !== void 0) return typeof i.length != "number" || X(i.length) ? d(0) : Y(i);
        if (i.type === "Buffer" && Array.isArray(i.data)) return Y(i.data);
    }
    function H(i) {
        if (i >= k) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + k.toString(16) + " bytes");
        return i | 0;
    }
    function $r(i) {
        return +i != i && (i = 0), h.alloc(+i);
    }
    h.isBuffer = function(r) {
        return r != null && r._isBuffer === !0 && r !== h.prototype;
    };
    h.compare = function(r, t) {
        if (E(r, Uint8Array) && (r = h.from(r, r.offset, r.byteLength)), E(t, Uint8Array) && (t = h.from(t, t.offset, t.byteLength)), !h.isBuffer(r) || !h.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (r === t) return 0;
        let n = r.length, e = t.length;
        for(let o = 0, u = Math.min(n, e); o < u; ++o)if (r[o] !== t[o]) {
            n = r[o], e = t[o];
            break;
        }
        return n < e ? -1 : e < n ? 1 : 0;
    };
    h.isEncoding = function(r) {
        switch(String(r).toLowerCase()){
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return !0;
            default:
                return !1;
        }
    };
    h.concat = function(r, t) {
        if (!Array.isArray(r)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (r.length === 0) return h.alloc(0);
        let n;
        if (t === void 0) for(t = 0, n = 0; n < r.length; ++n)t += r[n].length;
        let e = h.allocUnsafe(t), o = 0;
        for(n = 0; n < r.length; ++n){
            let u = r[n];
            if (E(u, Uint8Array)) o + u.length > e.length ? (h.isBuffer(u) || (u = h.from(u)), u.copy(e, o)) : Uint8Array.prototype.set.call(e, u, o);
            else if (h.isBuffer(u)) u.copy(e, o);
            else throw new TypeError('"list" argument must be an Array of Buffers');
            o += u.length;
        }
        return e;
    };
    function ur(i, r) {
        if (h.isBuffer(i)) return i.length;
        if (ArrayBuffer.isView(i) || E(i, ArrayBuffer)) return i.byteLength;
        if (typeof i != "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof i);
        let t = i.length, n = arguments.length > 2 && arguments[2] === !0;
        if (!n && t === 0) return 0;
        let e = !1;
        for(;;)switch(r){
            case "ascii":
            case "latin1":
            case "binary":
                return t;
            case "utf8":
            case "utf-8":
                return W(i).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return t * 2;
            case "hex":
                return t >>> 1;
            case "base64":
                return wr(i).length;
            default:
                if (e) return n ? -1 : W(i).length;
                r = ("" + r).toLowerCase(), e = !0;
        }
    }
    h.byteLength = ur;
    function Pr(i, r, t) {
        let n = !1;
        if ((r === void 0 || r < 0) && (r = 0), r > this.length || ((t === void 0 || t > this.length) && (t = this.length), t <= 0) || (t >>>= 0, r >>>= 0, t <= r)) return "";
        for(i || (i = "utf8");;)switch(i){
            case "hex":
                return zr(this, r, t);
            case "utf8":
            case "utf-8":
                return fr(this, r, t);
            case "ascii":
                return Vr(this, r, t);
            case "latin1":
            case "binary":
                return Xr(this, r, t);
            case "base64":
                return jr(this, r, t);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return Jr(this, r, t);
            default:
                if (n) throw new TypeError("Unknown encoding: " + i);
                i = (i + "").toLowerCase(), n = !0;
        }
    }
    h.prototype._isBuffer = !0;
    function I(i, r, t) {
        let n = i[r];
        i[r] = i[t], i[t] = n;
    }
    h.prototype.swap16 = function() {
        let r = this.length;
        if (r % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
        for(let t = 0; t < r; t += 2)I(this, t, t + 1);
        return this;
    };
    h.prototype.swap32 = function() {
        let r = this.length;
        if (r % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
        for(let t = 0; t < r; t += 4)I(this, t, t + 3), I(this, t + 1, t + 2);
        return this;
    };
    h.prototype.swap64 = function() {
        let r = this.length;
        if (r % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
        for(let t = 0; t < r; t += 8)I(this, t, t + 7), I(this, t + 1, t + 6), I(this, t + 2, t + 5), I(this, t + 3, t + 4);
        return this;
    };
    h.prototype.toString = function() {
        let r = this.length;
        return r === 0 ? "" : arguments.length === 0 ? fr(this, 0, r) : Pr.apply(this, arguments);
    };
    h.prototype.toLocaleString = h.prototype.toString;
    h.prototype.equals = function(r) {
        if (!h.isBuffer(r)) throw new TypeError("Argument must be a Buffer");
        return this === r ? !0 : h.compare(this, r) === 0;
    };
    h.prototype.inspect = function() {
        let r = "", t = T.INSPECT_MAX_BYTES;
        return r = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (r += " ... "), "<Buffer " + r + ">";
    };
    rr && (h.prototype[rr] = h.prototype.inspect);
    h.prototype.compare = function(r, t, n, e, o) {
        if (E(r, Uint8Array) && (r = h.from(r, r.offset, r.byteLength)), !h.isBuffer(r)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof r);
        if (t === void 0 && (t = 0), n === void 0 && (n = r ? r.length : 0), e === void 0 && (e = 0), o === void 0 && (o = this.length), t < 0 || n > r.length || e < 0 || o > this.length) throw new RangeError("out of range index");
        if (e >= o && t >= n) return 0;
        if (e >= o) return -1;
        if (t >= n) return 1;
        if (t >>>= 0, n >>>= 0, e >>>= 0, o >>>= 0, this === r) return 0;
        let u = o - e, f = n - t, c = Math.min(u, f), l = this.slice(e, o), s = r.slice(t, n);
        for(let p = 0; p < c; ++p)if (l[p] !== s[p]) {
            u = l[p], f = s[p];
            break;
        }
        return u < f ? -1 : f < u ? 1 : 0;
    };
    function hr(i, r, t, n, e) {
        if (i.length === 0) return -1;
        if (typeof t == "string" ? (n = t, t = 0) : t > 2147483647 ? t = 2147483647 : t < -2147483648 && (t = -2147483648), t = +t, X(t) && (t = e ? 0 : i.length - 1), t < 0 && (t = i.length + t), t >= i.length) {
            if (e) return -1;
            t = i.length - 1;
        } else if (t < 0) {
            if (e) t = 0;
            else return -1;
        }
        if (typeof r == "string" && (r = h.from(r, n)), h.isBuffer(r)) return r.length === 0 ? -1 : tr(i, r, t, n, e);
        if (typeof r == "number") return r = r & 255, typeof Uint8Array.prototype.indexOf == "function" ? e ? Uint8Array.prototype.indexOf.call(i, r, t) : Uint8Array.prototype.lastIndexOf.call(i, r, t) : tr(i, [
            r
        ], t, n, e);
        throw new TypeError("val must be string, number or Buffer");
    }
    function tr(i, r, t, n, e) {
        let o = 1, u = i.length, f = r.length;
        if (n !== void 0 && (n = String(n).toLowerCase(), n === "ucs2" || n === "ucs-2" || n === "utf16le" || n === "utf-16le")) {
            if (i.length < 2 || r.length < 2) return -1;
            o = 2, u /= 2, f /= 2, t /= 2;
        }
        function c(s, p) {
            return o === 1 ? s[p] : s.readUInt16BE(p * o);
        }
        let l;
        if (e) {
            let s = -1;
            for(l = t; l < u; l++)if (c(i, l) === c(r, s === -1 ? 0 : l - s)) {
                if (s === -1 && (s = l), l - s + 1 === f) return s * o;
            } else s !== -1 && (l -= l - s), s = -1;
        } else for(t + f > u && (t = u - f), l = t; l >= 0; l--){
            let s = !0;
            for(let p = 0; p < f; p++)if (c(i, l + p) !== c(r, p)) {
                s = !1;
                break;
            }
            if (s) return l;
        }
        return -1;
    }
    h.prototype.includes = function(r, t, n) {
        return this.indexOf(r, t, n) !== -1;
    };
    h.prototype.indexOf = function(r, t, n) {
        return hr(this, r, t, n, !0);
    };
    h.prototype.lastIndexOf = function(r, t, n) {
        return hr(this, r, t, n, !1);
    };
    function Or(i, r, t, n) {
        t = Number(t) || 0;
        let e = i.length - t;
        n ? (n = Number(n), n > e && (n = e)) : n = e;
        let o = r.length;
        n > o / 2 && (n = o / 2);
        let u;
        for(u = 0; u < n; ++u){
            let f = parseInt(r.substr(u * 2, 2), 16);
            if (X(f)) return u;
            i[t + u] = f;
        }
        return u;
    }
    function Gr(i, r, t, n) {
        return D(W(r, i.length - t), i, t, n);
    }
    function Yr(i, r, t, n) {
        return D(vr(r), i, t, n);
    }
    function qr(i, r, t, n) {
        return D(wr(r), i, t, n);
    }
    function Wr(i, r, t, n) {
        return D(rt(r, i.length - t), i, t, n);
    }
    h.prototype.write = function(r, t, n, e) {
        if (t === void 0) e = "utf8", n = this.length, t = 0;
        else if (n === void 0 && typeof t == "string") e = t, n = this.length, t = 0;
        else if (isFinite(t)) t = t >>> 0, isFinite(n) ? (n = n >>> 0, e === void 0 && (e = "utf8")) : (e = n, n = void 0);
        else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        let o = this.length - t;
        if ((n === void 0 || n > o) && (n = o), r.length > 0 && (n < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        e || (e = "utf8");
        let u = !1;
        for(;;)switch(e){
            case "hex":
                return Or(this, r, t, n);
            case "utf8":
            case "utf-8":
                return Gr(this, r, t, n);
            case "ascii":
            case "latin1":
            case "binary":
                return Yr(this, r, t, n);
            case "base64":
                return qr(this, r, t, n);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
                return Wr(this, r, t, n);
            default:
                if (u) throw new TypeError("Unknown encoding: " + e);
                e = ("" + e).toLowerCase(), u = !0;
        }
    };
    h.prototype.toJSON = function() {
        return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
        };
    };
    function jr(i, r, t) {
        return r === 0 && t === i.length ? G.fromByteArray(i) : G.fromByteArray(i.slice(r, t));
    }
    function fr(i, r, t) {
        t = Math.min(i.length, t);
        let n = [], e = r;
        for(; e < t;){
            let o = i[e], u = null, f = o > 239 ? 4 : o > 223 ? 3 : o > 191 ? 2 : 1;
            if (e + f <= t) {
                let c, l, s, p;
                switch(f){
                    case 1:
                        o < 128 && (u = o);
                        break;
                    case 2:
                        c = i[e + 1], (c & 192) === 128 && (p = (o & 31) << 6 | c & 63, p > 127 && (u = p));
                        break;
                    case 3:
                        c = i[e + 1], l = i[e + 2], (c & 192) === 128 && (l & 192) === 128 && (p = (o & 15) << 12 | (c & 63) << 6 | l & 63, p > 2047 && (p < 55296 || p > 57343) && (u = p));
                        break;
                    case 4:
                        c = i[e + 1], l = i[e + 2], s = i[e + 3], (c & 192) === 128 && (l & 192) === 128 && (s & 192) === 128 && (p = (o & 15) << 18 | (c & 63) << 12 | (l & 63) << 6 | s & 63, p > 65535 && p < 1114112 && (u = p));
                }
            }
            u === null ? (u = 65533, f = 1) : u > 65535 && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | u & 1023), n.push(u), e += f;
        }
        return Hr(n);
    }
    var ir = 4096;
    function Hr(i) {
        let r = i.length;
        if (r <= ir) return String.fromCharCode.apply(String, i);
        let t = "", n = 0;
        for(; n < r;)t += String.fromCharCode.apply(String, i.slice(n, n += ir));
        return t;
    }
    function Vr(i, r, t) {
        let n = "";
        t = Math.min(i.length, t);
        for(let e = r; e < t; ++e)n += String.fromCharCode(i[e] & 127);
        return n;
    }
    function Xr(i, r, t) {
        let n = "";
        t = Math.min(i.length, t);
        for(let e = r; e < t; ++e)n += String.fromCharCode(i[e]);
        return n;
    }
    function zr(i, r, t) {
        let n = i.length;
        (!r || r < 0) && (r = 0), (!t || t < 0 || t > n) && (t = n);
        let e = "";
        for(let o = r; o < t; ++o)e += tt[i[o]];
        return e;
    }
    function Jr(i, r, t) {
        let n = i.slice(r, t), e = "";
        for(let o = 0; o < n.length - 1; o += 2)e += String.fromCharCode(n[o] + n[o + 1] * 256);
        return e;
    }
    h.prototype.slice = function(r, t) {
        let n = this.length;
        r = ~~r, t = t === void 0 ? n : ~~t, r < 0 ? (r += n, r < 0 && (r = 0)) : r > n && (r = n), t < 0 ? (t += n, t < 0 && (t = 0)) : t > n && (t = n), t < r && (t = r);
        let e = this.subarray(r, t);
        return Object.setPrototypeOf(e, h.prototype), e;
    };
    function a(i, r, t) {
        if (i % 1 !== 0 || i < 0) throw new RangeError("offset is not uint");
        if (i + r > t) throw new RangeError("Trying to access beyond buffer length");
    }
    h.prototype.readUintLE = h.prototype.readUIntLE = function(r, t, n) {
        r = r >>> 0, t = t >>> 0, n || a(r, t, this.length);
        let e = this[r], o = 1, u = 0;
        for(; ++u < t && (o *= 256);)e += this[r + u] * o;
        return e;
    };
    h.prototype.readUintBE = h.prototype.readUIntBE = function(r, t, n) {
        r = r >>> 0, t = t >>> 0, n || a(r, t, this.length);
        let e = this[r + --t], o = 1;
        for(; t > 0 && (o *= 256);)e += this[r + --t] * o;
        return e;
    };
    h.prototype.readUint8 = h.prototype.readUInt8 = function(r, t) {
        return r = r >>> 0, t || a(r, 1, this.length), this[r];
    };
    h.prototype.readUint16LE = h.prototype.readUInt16LE = function(r, t) {
        return r = r >>> 0, t || a(r, 2, this.length), this[r] | this[r + 1] << 8;
    };
    h.prototype.readUint16BE = h.prototype.readUInt16BE = function(r, t) {
        return r = r >>> 0, t || a(r, 2, this.length), this[r] << 8 | this[r + 1];
    };
    h.prototype.readUint32LE = h.prototype.readUInt32LE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), (this[r] | this[r + 1] << 8 | this[r + 2] << 16) + this[r + 3] * 16777216;
    };
    h.prototype.readUint32BE = h.prototype.readUInt32BE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), this[r] * 16777216 + (this[r + 1] << 16 | this[r + 2] << 8 | this[r + 3]);
    };
    h.prototype.readBigUInt64LE = g(function(r) {
        r = r >>> 0, R(r, "offset");
        let t = this[r], n = this[r + 7];
        (t === void 0 || n === void 0) && _(r, this.length - 8);
        let e = t + this[++r] * 256 + this[++r] * 2 ** 16 + this[++r] * 2 ** 24, o = this[++r] + this[++r] * 256 + this[++r] * 2 ** 16 + n * 2 ** 24;
        return BigInt(e) + (BigInt(o) << BigInt(32));
    });
    h.prototype.readBigUInt64BE = g(function(r) {
        r = r >>> 0, R(r, "offset");
        let t = this[r], n = this[r + 7];
        (t === void 0 || n === void 0) && _(r, this.length - 8);
        let e = t * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 256 + this[++r], o = this[++r] * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 256 + n;
        return (BigInt(e) << BigInt(32)) + BigInt(o);
    });
    h.prototype.readIntLE = function(r, t, n) {
        r = r >>> 0, t = t >>> 0, n || a(r, t, this.length);
        let e = this[r], o = 1, u = 0;
        for(; ++u < t && (o *= 256);)e += this[r + u] * o;
        return o *= 128, e >= o && (e -= Math.pow(2, 8 * t)), e;
    };
    h.prototype.readIntBE = function(r, t, n) {
        r = r >>> 0, t = t >>> 0, n || a(r, t, this.length);
        let e = t, o = 1, u = this[r + --e];
        for(; e > 0 && (o *= 256);)u += this[r + --e] * o;
        return o *= 128, u >= o && (u -= Math.pow(2, 8 * t)), u;
    };
    h.prototype.readInt8 = function(r, t) {
        return r = r >>> 0, t || a(r, 1, this.length), this[r] & 128 ? (255 - this[r] + 1) * -1 : this[r];
    };
    h.prototype.readInt16LE = function(r, t) {
        r = r >>> 0, t || a(r, 2, this.length);
        let n = this[r] | this[r + 1] << 8;
        return n & 32768 ? n | 4294901760 : n;
    };
    h.prototype.readInt16BE = function(r, t) {
        r = r >>> 0, t || a(r, 2, this.length);
        let n = this[r + 1] | this[r] << 8;
        return n & 32768 ? n | 4294901760 : n;
    };
    h.prototype.readInt32LE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), this[r] | this[r + 1] << 8 | this[r + 2] << 16 | this[r + 3] << 24;
    };
    h.prototype.readInt32BE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), this[r] << 24 | this[r + 1] << 16 | this[r + 2] << 8 | this[r + 3];
    };
    h.prototype.readBigInt64LE = g(function(r) {
        r = r >>> 0, R(r, "offset");
        let t = this[r], n = this[r + 7];
        (t === void 0 || n === void 0) && _(r, this.length - 8);
        let e = this[r + 4] + this[r + 5] * 256 + this[r + 6] * 2 ** 16 + (n << 24);
        return (BigInt(e) << BigInt(32)) + BigInt(t + this[++r] * 256 + this[++r] * 2 ** 16 + this[++r] * 2 ** 24);
    });
    h.prototype.readBigInt64BE = g(function(r) {
        r = r >>> 0, R(r, "offset");
        let t = this[r], n = this[r + 7];
        (t === void 0 || n === void 0) && _(r, this.length - 8);
        let e = (t << 24) + this[++r] * 2 ** 16 + this[++r] * 256 + this[++r];
        return (BigInt(e) << BigInt(32)) + BigInt(this[++r] * 2 ** 24 + this[++r] * 2 ** 16 + this[++r] * 256 + n);
    });
    h.prototype.readFloatLE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), U.read(this, r, !0, 23, 4);
    };
    h.prototype.readFloatBE = function(r, t) {
        return r = r >>> 0, t || a(r, 4, this.length), U.read(this, r, !1, 23, 4);
    };
    h.prototype.readDoubleLE = function(r, t) {
        return r = r >>> 0, t || a(r, 8, this.length), U.read(this, r, !0, 52, 8);
    };
    h.prototype.readDoubleBE = function(r, t) {
        return r = r >>> 0, t || a(r, 8, this.length), U.read(this, r, !1, 52, 8);
    };
    function y(i, r, t, n, e, o) {
        if (!h.isBuffer(i)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (r > e || r < o) throw new RangeError('"value" argument is out of bounds');
        if (t + n > i.length) throw new RangeError("Index out of range");
    }
    h.prototype.writeUintLE = h.prototype.writeUIntLE = function(r, t, n, e) {
        if (r = +r, t = t >>> 0, n = n >>> 0, !e) {
            let f = Math.pow(2, 8 * n) - 1;
            y(this, r, t, n, f, 0);
        }
        let o = 1, u = 0;
        for(this[t] = r & 255; ++u < n && (o *= 256);)this[t + u] = r / o & 255;
        return t + n;
    };
    h.prototype.writeUintBE = h.prototype.writeUIntBE = function(r, t, n, e) {
        if (r = +r, t = t >>> 0, n = n >>> 0, !e) {
            let f = Math.pow(2, 8 * n) - 1;
            y(this, r, t, n, f, 0);
        }
        let o = n - 1, u = 1;
        for(this[t + o] = r & 255; --o >= 0 && (u *= 256);)this[t + o] = r / u & 255;
        return t + n;
    };
    h.prototype.writeUint8 = h.prototype.writeUInt8 = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 1, 255, 0), this[t] = r & 255, t + 1;
    };
    h.prototype.writeUint16LE = h.prototype.writeUInt16LE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 2, 65535, 0), this[t] = r & 255, this[t + 1] = r >>> 8, t + 2;
    };
    h.prototype.writeUint16BE = h.prototype.writeUInt16BE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 2, 65535, 0), this[t] = r >>> 8, this[t + 1] = r & 255, t + 2;
    };
    h.prototype.writeUint32LE = h.prototype.writeUInt32LE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 4, 4294967295, 0), this[t + 3] = r >>> 24, this[t + 2] = r >>> 16, this[t + 1] = r >>> 8, this[t] = r & 255, t + 4;
    };
    h.prototype.writeUint32BE = h.prototype.writeUInt32BE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 4, 4294967295, 0), this[t] = r >>> 24, this[t + 1] = r >>> 16, this[t + 2] = r >>> 8, this[t + 3] = r & 255, t + 4;
    };
    function cr(i, r, t, n, e) {
        yr(r, n, e, i, t, 7);
        let o = Number(r & BigInt(4294967295));
        i[t++] = o, o = o >> 8, i[t++] = o, o = o >> 8, i[t++] = o, o = o >> 8, i[t++] = o;
        let u = Number(r >> BigInt(32) & BigInt(4294967295));
        return i[t++] = u, u = u >> 8, i[t++] = u, u = u >> 8, i[t++] = u, u = u >> 8, i[t++] = u, t;
    }
    function pr(i, r, t, n, e) {
        yr(r, n, e, i, t, 7);
        let o = Number(r & BigInt(4294967295));
        i[t + 7] = o, o = o >> 8, i[t + 6] = o, o = o >> 8, i[t + 5] = o, o = o >> 8, i[t + 4] = o;
        let u = Number(r >> BigInt(32) & BigInt(4294967295));
        return i[t + 3] = u, u = u >> 8, i[t + 2] = u, u = u >> 8, i[t + 1] = u, u = u >> 8, i[t] = u, t + 8;
    }
    h.prototype.writeBigUInt64LE = g(function(r, t = 0) {
        return cr(this, r, t, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    h.prototype.writeBigUInt64BE = g(function(r, t = 0) {
        return pr(this, r, t, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    h.prototype.writeIntLE = function(r, t, n, e) {
        if (r = +r, t = t >>> 0, !e) {
            let c = Math.pow(2, 8 * n - 1);
            y(this, r, t, n, c - 1, -c);
        }
        let o = 0, u = 1, f = 0;
        for(this[t] = r & 255; ++o < n && (u *= 256);)r < 0 && f === 0 && this[t + o - 1] !== 0 && (f = 1), this[t + o] = (r / u >> 0) - f & 255;
        return t + n;
    };
    h.prototype.writeIntBE = function(r, t, n, e) {
        if (r = +r, t = t >>> 0, !e) {
            let c = Math.pow(2, 8 * n - 1);
            y(this, r, t, n, c - 1, -c);
        }
        let o = n - 1, u = 1, f = 0;
        for(this[t + o] = r & 255; --o >= 0 && (u *= 256);)r < 0 && f === 0 && this[t + o + 1] !== 0 && (f = 1), this[t + o] = (r / u >> 0) - f & 255;
        return t + n;
    };
    h.prototype.writeInt8 = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 1, 127, -128), r < 0 && (r = 255 + r + 1), this[t] = r & 255, t + 1;
    };
    h.prototype.writeInt16LE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 2, 32767, -32768), this[t] = r & 255, this[t + 1] = r >>> 8, t + 2;
    };
    h.prototype.writeInt16BE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 2, 32767, -32768), this[t] = r >>> 8, this[t + 1] = r & 255, t + 2;
    };
    h.prototype.writeInt32LE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 4, 2147483647, -2147483648), this[t] = r & 255, this[t + 1] = r >>> 8, this[t + 2] = r >>> 16, this[t + 3] = r >>> 24, t + 4;
    };
    h.prototype.writeInt32BE = function(r, t, n) {
        return r = +r, t = t >>> 0, n || y(this, r, t, 4, 2147483647, -2147483648), r < 0 && (r = 4294967295 + r + 1), this[t] = r >>> 24, this[t + 1] = r >>> 16, this[t + 2] = r >>> 8, this[t + 3] = r & 255, t + 4;
    };
    h.prototype.writeBigInt64LE = g(function(r, t = 0) {
        return cr(this, r, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    h.prototype.writeBigInt64BE = g(function(r, t = 0) {
        return pr(this, r, t, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function sr(i, r, t, n, e, o) {
        if (t + n > i.length) throw new RangeError("Index out of range");
        if (t < 0) throw new RangeError("Index out of range");
    }
    function lr(i, r, t, n, e) {
        return r = +r, t = t >>> 0, e || sr(i, r, t, 4, 34028234663852886e22, -340282346638528860000000000000000000000), U.write(i, r, t, n, 23, 4), t + 4;
    }
    h.prototype.writeFloatLE = function(r, t, n) {
        return lr(this, r, t, !0, n);
    };
    h.prototype.writeFloatBE = function(r, t, n) {
        return lr(this, r, t, !1, n);
    };
    function ar(i, r, t, n, e) {
        return r = +r, t = t >>> 0, e || sr(i, r, t, 8, 17976931348623157e292, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), U.write(i, r, t, n, 52, 8), t + 8;
    }
    h.prototype.writeDoubleLE = function(r, t, n) {
        return ar(this, r, t, !0, n);
    };
    h.prototype.writeDoubleBE = function(r, t, n) {
        return ar(this, r, t, !1, n);
    };
    h.prototype.copy = function(r, t, n, e) {
        if (!h.isBuffer(r)) throw new TypeError("argument should be a Buffer");
        if (n || (n = 0), !e && e !== 0 && (e = this.length), t >= r.length && (t = r.length), t || (t = 0), e > 0 && e < n && (e = n), e === n || r.length === 0 || this.length === 0) return 0;
        if (t < 0) throw new RangeError("targetStart out of bounds");
        if (n < 0 || n >= this.length) throw new RangeError("Index out of range");
        if (e < 0) throw new RangeError("sourceEnd out of bounds");
        e > this.length && (e = this.length), r.length - t < e - n && (e = r.length - t + n);
        let o = e - n;
        return this === r && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(t, n, e) : Uint8Array.prototype.set.call(r, this.subarray(n, e), t), o;
    };
    h.prototype.fill = function(r, t, n, e) {
        if (typeof r == "string") {
            if (typeof t == "string" ? (e = t, t = 0, n = this.length) : typeof n == "string" && (e = n, n = this.length), e !== void 0 && typeof e != "string") throw new TypeError("encoding must be a string");
            if (typeof e == "string" && !h.isEncoding(e)) throw new TypeError("Unknown encoding: " + e);
            if (r.length === 1) {
                let u = r.charCodeAt(0);
                (e === "utf8" && u < 128 || e === "latin1") && (r = u);
            }
        } else typeof r == "number" ? r = r & 255 : typeof r == "boolean" && (r = Number(r));
        if (t < 0 || this.length < t || this.length < n) throw new RangeError("Out of range index");
        if (n <= t) return this;
        t = t >>> 0, n = n === void 0 ? this.length : n >>> 0, r || (r = 0);
        let o;
        if (typeof r == "number") for(o = t; o < n; ++o)this[o] = r;
        else {
            let u = h.isBuffer(r) ? r : h.from(r, e), f = u.length;
            if (f === 0) throw new TypeError('The value "' + r + '" is invalid for argument "value"');
            for(o = 0; o < n - t; ++o)this[o + t] = u[o % f];
        }
        return this;
    };
    var A = {};
    function V(i, r, t) {
        A[i] = class extends t {
            constructor(){
                super(), Object.defineProperty(this, "message", {
                    value: r.apply(this, arguments),
                    writable: !0,
                    configurable: !0
                }), this.name = `${this.name} [${i}]`, this.stack, delete this.name;
            }
            get code() {
                return i;
            }
            set code(e) {
                Object.defineProperty(this, "code", {
                    configurable: !0,
                    enumerable: !0,
                    value: e,
                    writable: !0
                });
            }
            toString() {
                return `${this.name} [${i}]: ${this.message}`;
            }
        };
    }
    V("ERR_BUFFER_OUT_OF_BOUNDS", function(i) {
        return i ? `${i} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    }, RangeError);
    V("ERR_INVALID_ARG_TYPE", function(i, r) {
        return `The "${i}" argument must be of type number. Received type ${typeof r}`;
    }, TypeError);
    V("ERR_OUT_OF_RANGE", function(i, r, t) {
        let n = `The value of "${i}" is out of range.`, e = t;
        return Number.isInteger(t) && Math.abs(t) > 2 ** 32 ? e = nr(String(t)) : typeof t == "bigint" && (e = String(t), (t > BigInt(2) ** BigInt(32) || t < -(BigInt(2) ** BigInt(32))) && (e = nr(e)), e += "n"), n += ` It must be ${r}. Received ${e}`, n;
    }, RangeError);
    function nr(i) {
        let r = "", t = i.length, n = i[0] === "-" ? 1 : 0;
        for(; t >= n + 4; t -= 3)r = `_${i.slice(t - 3, t)}${r}`;
        return `${i.slice(0, t)}${r}`;
    }
    function Kr(i, r, t) {
        R(r, "offset"), (i[r] === void 0 || i[r + t] === void 0) && _(r, i.length - (t + 1));
    }
    function yr(i, r, t, n, e, o) {
        if (i > t || i < r) {
            let u = typeof r == "bigint" ? "n" : "", f;
            throw o > 3 ? r === 0 || r === BigInt(0) ? f = `>= 0${u} and < 2${u} ** ${(o + 1) * 8}${u}` : f = `>= -(2${u} ** ${(o + 1) * 8 - 1}${u}) and < 2 ** ${(o + 1) * 8 - 1}${u}` : f = `>= ${r}${u} and <= ${t}${u}`, new A.ERR_OUT_OF_RANGE("value", f, i);
        }
        Kr(n, e, o);
    }
    function R(i, r) {
        if (typeof i != "number") throw new A.ERR_INVALID_ARG_TYPE(r, "number", i);
    }
    function _(i, r, t) {
        throw Math.floor(i) !== i ? (R(i, t), new A.ERR_OUT_OF_RANGE(t || "offset", "an integer", i)) : r < 0 ? new A.ERR_BUFFER_OUT_OF_BOUNDS : new A.ERR_OUT_OF_RANGE(t || "offset", `>= ${t ? 1 : 0} and <= ${r}`, i);
    }
    var Zr = /[^+/0-9A-Za-z-_]/g;
    function Qr(i) {
        if (i = i.split("=")[0], i = i.trim().replace(Zr, ""), i.length < 2) return "";
        for(; i.length % 4 !== 0;)i = i + "=";
        return i;
    }
    function W(i, r) {
        r = r || 1 / 0;
        let t, n = i.length, e = null, o = [];
        for(let u = 0; u < n; ++u){
            if (t = i.charCodeAt(u), t > 55295 && t < 57344) {
                if (!e) {
                    if (t > 56319) {
                        (r -= 3) > -1 && o.push(239, 191, 189);
                        continue;
                    } else if (u + 1 === n) {
                        (r -= 3) > -1 && o.push(239, 191, 189);
                        continue;
                    }
                    e = t;
                    continue;
                }
                if (t < 56320) {
                    (r -= 3) > -1 && o.push(239, 191, 189), e = t;
                    continue;
                }
                t = (e - 55296 << 10 | t - 56320) + 65536;
            } else e && (r -= 3) > -1 && o.push(239, 191, 189);
            if (e = null, t < 128) {
                if ((r -= 1) < 0) break;
                o.push(t);
            } else if (t < 2048) {
                if ((r -= 2) < 0) break;
                o.push(t >> 6 | 192, t & 63 | 128);
            } else if (t < 65536) {
                if ((r -= 3) < 0) break;
                o.push(t >> 12 | 224, t >> 6 & 63 | 128, t & 63 | 128);
            } else if (t < 1114112) {
                if ((r -= 4) < 0) break;
                o.push(t >> 18 | 240, t >> 12 & 63 | 128, t >> 6 & 63 | 128, t & 63 | 128);
            } else throw new Error("Invalid code point");
        }
        return o;
    }
    function vr(i) {
        let r = [];
        for(let t = 0; t < i.length; ++t)r.push(i.charCodeAt(t) & 255);
        return r;
    }
    function rt(i, r) {
        let t, n, e, o = [];
        for(let u = 0; u < i.length && !((r -= 2) < 0); ++u)t = i.charCodeAt(u), n = t >> 8, e = t % 256, o.push(e), o.push(n);
        return o;
    }
    function wr(i) {
        return G.toByteArray(Qr(i));
    }
    function D(i, r, t, n) {
        let e;
        for(e = 0; e < n && !(e + t >= r.length || e >= i.length); ++e)r[e + t] = i[e];
        return e;
    }
    function E(i, r) {
        return i instanceof r || i != null && i.constructor != null && i.constructor.name != null && i.constructor.name === r.name;
    }
    function X(i) {
        return i !== i;
    }
    var tt = function() {
        let i = "0123456789abcdef", r = new Array(256);
        for(let t = 0; t < 16; ++t){
            let n = t * 16;
            for(let e = 0; e < 16; ++e)r[n + e] = i[t] + i[e];
        }
        return r;
    }();
    function g(i) {
        return typeof BigInt > "u" ? it : i;
    }
    function it() {
        throw new Error("BigInt not supported");
    }
});
var C = {};
Fr(C, {
    default: ()=>nt
});
module.exports = Ar(C);
var xr = J(z());
S(C, J(z()), module.exports);
var nt = xr.default; /*! Bundled license information:

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/ 

},{}],"6s703":[function(require,module,exports) {
// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var global = arguments[3];
var ws = null;
if (typeof WebSocket !== "undefined") ws = WebSocket;
else if (typeof MozWebSocket !== "undefined") ws = MozWebSocket;
else if (typeof global !== "undefined") ws = global.WebSocket || global.MozWebSocket;
else if (typeof window !== "undefined") ws = window.WebSocket || window.MozWebSocket;
else if (typeof self !== "undefined") ws = self.WebSocket || self.MozWebSocket;
exports.default = ws;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"cfP7b"}]},["hVMLY","7HnuW"], "7HnuW", "parcelRequirea28e")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
